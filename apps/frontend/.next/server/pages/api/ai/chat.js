"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/ai/chat";
exports.ids = ["pages/api/ai/chat"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "zod":
/*!**********************!*\
  !*** external "zod" ***!
  \**********************/
/***/ ((module) => {

module.exports = import("zod");;

/***/ }),

/***/ "(api)/./pages/api/ai/chat.js":
/*!******************************!*\
  !*** ./pages/api/ai/chat.js ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"zod\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__, zod__WEBPACK_IMPORTED_MODULE_1__]);\n([openai__WEBPACK_IMPORTED_MODULE_0__, zod__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__.createClient)(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY); // Client instance for getting user from JWT\n\nconst supabaseClient = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__.createClient)(process.env.SUPABASE_URL, \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJsbWhybmpwanhoeXd6c2tsd2x1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk1NzY1MDAsImV4cCI6MjA2NTE1MjUwMH0.HWXnyBx33CiP6UojHyFvLDvjIuDa-q4Gt5qYa4G4aro\"); // Zod schema for final model input\n\nconst ModelSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n  siteLocation: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().min(1),\n  brandFlag: zod__WEBPACK_IMPORTED_MODULE_1__.z.string().min(1),\n  floorCount: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().int().min(1).max(40),\n  roomTypes: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.string()).min(1),\n  floorMix: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    floorIndex: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().int().min(1),\n    roomsByType: zod__WEBPACK_IMPORTED_MODULE_1__.z.record(zod__WEBPACK_IMPORTED_MODULE_1__.z.number().int().min(0))\n  })),\n  publicAreas: zod__WEBPACK_IMPORTED_MODULE_1__.z.array(zod__WEBPACK_IMPORTED_MODULE_1__.z.object({\n    area: zod__WEBPACK_IMPORTED_MODULE_1__.z.string(),\n    enabled: zod__WEBPACK_IMPORTED_MODULE_1__.z.boolean(),\n    size: zod__WEBPACK_IMPORTED_MODULE_1__.z.number().int().min(0)\n  }))\n});\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n}); // Define the conversation steps\n\nconst conversationSteps = [{\n  id: 'location',\n  question: \"Let's start with the basics! What city or ZIP code is your hotel project located in?\",\n  responseType: 'text',\n  extract: messages => {\n    const lastUserMessage = [...messages].reverse().find(m => m.role === 'user');\n    return lastUserMessage?.content;\n  }\n}, {\n  id: 'brand',\n  question: \"Great! What hotel brand or flag are you planning for this project?\",\n  responseType: 'choices',\n  choices: ['Marriott', 'Hilton', 'IHG', 'Hyatt', 'Choice Hotels', 'Wyndham', 'Independent', 'Other'],\n  allowCustom: true,\n  extract: messages => {\n    const lastUserMessage = [...messages].reverse().find(m => m.role === 'user');\n    return lastUserMessage?.content;\n  }\n}, {\n  id: 'floors',\n  question: \"How many floors will your hotel have? (Including ground floor)\",\n  responseType: 'text',\n  extract: messages => {\n    const lastUserMessage = [...messages].reverse().find(m => m.role === 'user');\n    const floors = parseInt(lastUserMessage?.content || '0');\n    return isNaN(floors) ? null : floors;\n  }\n}, {\n  id: 'roomTypes',\n  question: \"What types of rooms will you offer? Select all that apply:\",\n  responseType: 'choices',\n  choices: ['Standard King', 'Standard Double', 'Junior Suite', 'Executive Suite', 'Presidential Suite', 'Accessible Room'],\n  allowCustom: false,\n  multiSelect: true,\n  extract: messages => {\n    const lastUserMessage = [...messages].reverse().find(m => m.role === 'user');\n\n    try {\n      return JSON.parse(lastUserMessage?.content || '[]');\n    } catch {\n      return [lastUserMessage?.content];\n    }\n  }\n}, {\n  id: 'roomMix',\n  question: \"Now let's plan your room mix by floor. Please specify how many of each room type per floor:\",\n  responseType: 'table',\n  extract: (messages, data) => {\n    const lastUserMessage = [...messages].reverse().find(m => m.role === 'user');\n\n    try {\n      return JSON.parse(lastUserMessage?.content || '[]');\n    } catch {\n      return null;\n    }\n  }\n}, {\n  id: 'publicAreas',\n  question: \"Finally, which public areas and amenities will your hotel include?\",\n  responseType: 'areas',\n  publicAreas: ['Lobby', 'Restaurant', 'Bar/Lounge', 'Fitness Center', 'Business Center', 'Meeting Rooms', 'Pool', 'Spa', 'Gift Shop', 'Parking Garage'],\n  extract: messages => {\n    const lastUserMessage = [...messages].reverse().find(m => m.role === 'user');\n\n    try {\n      return JSON.parse(lastUserMessage?.content || '[]');\n    } catch {\n      return [];\n    }\n  }\n}];\n\nfunction extractDataFromMessages(messages) {\n  const data = {};\n  let currentStepIndex = 0; // Skip system message\n\n  const userMessages = messages.filter((m, i) => i > 0 && m.role === 'user');\n\n  for (let i = 0; i < userMessages.length && currentStepIndex < conversationSteps.length; i++) {\n    const step = conversationSteps[currentStepIndex];\n    const extracted = step.extract(messages.slice(0, (i + 1) * 2 + 1), data);\n\n    if (extracted !== null && extracted !== undefined) {\n      data[step.id] = extracted;\n      currentStepIndex++;\n    }\n  }\n\n  return {\n    data,\n    nextStepIndex: currentStepIndex\n  };\n}\n\nasync function handler(req, res) {\n  if (req.method !== 'POST') {\n    res.setHeader('Allow', ['POST']);\n    return res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n\n  const {\n    messages\n  } = req.body;\n\n  if (!messages || !Array.isArray(messages)) {\n    return res.status(400).json({\n      error: 'Messages array is required'\n    });\n  } // Get user from Authorization header\n\n\n  const authHeader = req.headers.authorization;\n\n  if (!authHeader) {\n    return res.status(401).json({\n      error: 'Authorization header required'\n    });\n  }\n\n  let user;\n\n  try {\n    const {\n      data: {\n        user: authUser\n      },\n      error: authError\n    } = await supabaseClient.auth.getUser(authHeader.replace('Bearer ', ''));\n\n    if (authError || !authUser) {\n      return res.status(401).json({\n        error: 'Invalid authorization token'\n      });\n    }\n\n    user = authUser;\n  } catch (err) {\n    return res.status(401).json({\n      error: 'Failed to authenticate user'\n    });\n  }\n\n  try {\n    const {\n      data,\n      nextStepIndex\n    } = extractDataFromMessages(messages); // Check if we have all the data needed\n\n    if (nextStepIndex >= conversationSteps.length) {\n      // Generate the final model\n      const model = {\n        siteLocation: data.location,\n        brandFlag: data.brand,\n        floorCount: data.floors,\n        roomTypes: data.roomTypes,\n        floorMix: data.roomMix,\n        publicAreas: data.publicAreas\n      }; // Validate the model\n\n      const validatedModel = ModelSchema.parse(model); // Save to database\n\n      const {\n        data: project,\n        error: projectError\n      } = await supabase.from('projects').insert([{\n        user_id: user.id,\n        name: `${validatedModel.brandFlag} Hotel - ${validatedModel.siteLocation}`,\n        status: 'Draft'\n      }]).select().single();\n      if (projectError) throw projectError;\n      const {\n        error: modelError\n      } = await supabase.from('hotel_base_models').insert([{\n        project_id: project.id,\n        data: validatedModel\n      }]);\n      if (modelError) throw modelError;\n      return res.status(200).json({\n        model: validatedModel,\n        projectId: project.id,\n        message: \"Perfect! I've created your hotel base model. Redirecting to your projects...\"\n      });\n    } // Get the next question\n\n\n    const nextStep = conversationSteps[nextStepIndex];\n    const question = {\n      id: nextStep.id,\n      text: nextStep.question,\n      responseType: nextStep.responseType,\n      choices: nextStep.choices,\n      allowCustom: nextStep.allowCustom,\n      multiSelect: nextStep.multiSelect,\n      floorCount: data.floors,\n      roomTypes: data.roomTypes,\n      publicAreas: nextStep.publicAreas\n    };\n    return res.status(200).json({\n      question\n    });\n  } catch (err) {\n    console.error('Chat API Error:', err);\n    return res.status(500).json({\n      error: err.message || 'An error occurred while processing your request'\n    });\n  }\n}\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/ai/chat.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/ai/chat.js"));
module.exports = __webpack_exports__;

})();