"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("amp",{

/***/ "../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/router.js":
/*!**************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/router.js ***!
  \**************************************************************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval(__webpack_require__.ts("// tslint:disable:no-console\n\n\nvar _regeneratorRuntime = __webpack_require__(/*! ../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/@babel/runtime/regenerator/index.js */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/@babel/runtime/regenerator/index.js\");\n\nvar _classCallCheck = __webpack_require__(/*! ../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/@babel/runtime/helpers/classCallCheck.js\");\n\nvar _createClass = __webpack_require__(/*! ../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/@babel/runtime/helpers/createClass.js\");\n\nvar _defineProperty = __webpack_require__(/*! ../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/@babel/runtime/helpers/defineProperty.js\");\n\nvar _slicedToArray = __webpack_require__(/*! ../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/@babel/runtime/helpers/slicedToArray.js\");\n\nvar _asyncToGenerator = __webpack_require__(/*! ../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator.js */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/@babel/runtime/helpers/asyncToGenerator.js\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n0 && (0);\n\nfunction _export(target, all) {\n  for (var name in all) {\n    Object.defineProperty(target, name, {\n      enumerable: true,\n      get: all[name]\n    });\n  }\n}\n\n_export(exports, {\n  \"default\": function _default() {\n    return Router;\n  },\n  matchesMiddleware: function matchesMiddleware() {\n    return _matchesMiddleware;\n  },\n  createKey: function createKey() {\n    return _createKey;\n  }\n});\n\nvar _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"../../node_modules/.pnpm/@swc+helpers@0.5.1/node_modules/@swc/helpers/esm/_interop_require_default.js\");\n\nvar _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ \"../../node_modules/.pnpm/@swc+helpers@0.5.1/node_modules/@swc/helpers/esm/_interop_require_wildcard.js\");\n\nvar _removetrailingslash = __webpack_require__(/*! ./utils/remove-trailing-slash */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/remove-trailing-slash.js\");\n\nvar _routeloader = __webpack_require__(/*! ../../../client/route-loader */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/client/route-loader.js\");\n\nvar _script = __webpack_require__(/*! ../../../client/script */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/client/script.js\");\n\nvar _iserror = /*#__PURE__*/_interop_require_wildcard._(__webpack_require__(/*! ../../../lib/is-error */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/lib/is-error.js\"));\n\nvar _denormalizepagepath = __webpack_require__(/*! ../page-path/denormalize-page-path */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/page-path/denormalize-page-path.js\");\n\nvar _normalizelocalepath = __webpack_require__(/*! ../i18n/normalize-locale-path */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/i18n/normalize-locale-path.js\");\n\nvar _mitt = /*#__PURE__*/_interop_require_default._(__webpack_require__(/*! ../mitt */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/mitt.js\"));\n\nvar _utils = __webpack_require__(/*! ../utils */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/utils.js\");\n\nvar _isdynamic = __webpack_require__(/*! ./utils/is-dynamic */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/is-dynamic.js\");\n\nvar _parserelativeurl = __webpack_require__(/*! ./utils/parse-relative-url */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/parse-relative-url.js\");\n\nvar _resolverewrites = /*#__PURE__*/_interop_require_default._(__webpack_require__(/*! ./utils/resolve-rewrites */ \"?ce93\"));\n\nvar _routematcher = __webpack_require__(/*! ./utils/route-matcher */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/route-matcher.js\");\n\nvar _routeregex = __webpack_require__(/*! ./utils/route-regex */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/route-regex.js\");\n\nvar _formaturl = __webpack_require__(/*! ./utils/format-url */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/format-url.js\");\n\nvar _detectdomainlocale = __webpack_require__(/*! ../../../client/detect-domain-locale */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/client/detect-domain-locale.js\");\n\nvar _parsepath = __webpack_require__(/*! ./utils/parse-path */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/parse-path.js\");\n\nvar _addlocale = __webpack_require__(/*! ../../../client/add-locale */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/client/add-locale.js\");\n\nvar _removelocale = __webpack_require__(/*! ../../../client/remove-locale */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/client/remove-locale.js\");\n\nvar _removebasepath = __webpack_require__(/*! ../../../client/remove-base-path */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/client/remove-base-path.js\");\n\nvar _addbasepath = __webpack_require__(/*! ../../../client/add-base-path */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/client/add-base-path.js\");\n\nvar _hasbasepath = __webpack_require__(/*! ../../../client/has-base-path */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/client/has-base-path.js\");\n\nvar _isapiroute = __webpack_require__(/*! ../../../lib/is-api-route */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/lib/is-api-route.js\");\n\nvar _getnextpathnameinfo = __webpack_require__(/*! ./utils/get-next-pathname-info */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/get-next-pathname-info.js\");\n\nvar _formatnextpathnameinfo = __webpack_require__(/*! ./utils/format-next-pathname-info */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/format-next-pathname-info.js\");\n\nvar _comparestates = __webpack_require__(/*! ./utils/compare-states */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/compare-states.js\");\n\nvar _islocalurl = __webpack_require__(/*! ./utils/is-local-url */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/is-local-url.js\");\n\nvar _isbot = __webpack_require__(/*! ./utils/is-bot */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/is-bot.js\");\n\nvar _omit = __webpack_require__(/*! ./utils/omit */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/omit.js\");\n\nvar _resolvehref = __webpack_require__(/*! ./utils/resolve-href */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/resolve-href.js\");\n\nvar _interpolateas = __webpack_require__(/*! ./utils/interpolate-as */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/interpolate-as.js\");\n\nvar _handlesmoothscroll = __webpack_require__(/*! ./utils/handle-smooth-scroll */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/utils/handle-smooth-scroll.js\");\n\nfunction buildCancellationError() {\n  return Object.assign(new Error(\"Route Cancelled\"), {\n    cancelled: true\n  });\n}\n\nfunction _matchesMiddleware(_x) {\n  return _matchesMiddleware2.apply(this, arguments);\n}\n\nfunction _matchesMiddleware2() {\n  _matchesMiddleware2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(options) {\n    var matchers, _ref6, asPathname, cleanedAs, asWithBasePathAndLocale;\n\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return Promise.resolve(options.router.pageLoader.getMiddleware());\n\n          case 2:\n            matchers = _context8.sent;\n\n            if (matchers) {\n              _context8.next = 5;\n              break;\n            }\n\n            return _context8.abrupt(\"return\", false);\n\n          case 5:\n            _ref6 = (0, _parsepath.parsePath)(options.asPath), asPathname = _ref6.pathname; // remove basePath first since path prefix has to be in the order of `/${basePath}/${locale}`\n\n            cleanedAs = (0, _hasbasepath.hasBasePath)(asPathname) ? (0, _removebasepath.removeBasePath)(asPathname) : asPathname;\n            asWithBasePathAndLocale = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(cleanedAs, options.locale)); // Check only path match on client. Matching \"has\" should be done on server\n            // where we can access more info such as headers, HttpOnly cookie, etc.\n\n            return _context8.abrupt(\"return\", matchers.some(function (m) {\n              return new RegExp(m.regexp).test(asWithBasePathAndLocale);\n            }));\n\n          case 9:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _matchesMiddleware2.apply(this, arguments);\n}\n\nfunction stripOrigin(url) {\n  var origin = (0, _utils.getLocationOrigin)();\n  return url.startsWith(origin) ? url.substring(origin.length) : url;\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  var _ref = (0, _resolvehref.resolveHref)(router, url, true),\n      _ref2 = _slicedToArray(_ref, 2),\n      resolvedHref = _ref2[0],\n      resolvedAs = _ref2[1];\n\n  var origin = (0, _utils.getLocationOrigin)();\n  var hrefWasAbsolute = resolvedHref.startsWith(origin);\n  var asWasAbsolute = resolvedAs && resolvedAs.startsWith(origin);\n  resolvedHref = stripOrigin(resolvedHref);\n  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;\n  var preparedUrl = hrefWasAbsolute ? resolvedHref : (0, _addbasepath.addBasePath)(resolvedHref);\n  var preparedAs = as ? stripOrigin((0, _resolvehref.resolveHref)(router, as)) : resolvedAs || resolvedHref;\n  return {\n    url: preparedUrl,\n    as: asWasAbsolute ? preparedAs : (0, _addbasepath.addBasePath)(preparedAs)\n  };\n}\n\nfunction resolveDynamicRoute(pathname, pages) {\n  var cleanPathname = (0, _removetrailingslash.removeTrailingSlash)((0, _denormalizepagepath.denormalizePagePath)(pathname));\n\n  if (cleanPathname === \"/404\" || cleanPathname === \"/_error\") {\n    return pathname;\n  } // handle resolving href for dynamic routes\n\n\n  if (!pages.includes(cleanPathname)) {\n    // eslint-disable-next-line array-callback-return\n    pages.some(function (page) {\n      if ((0, _isdynamic.isDynamicRoute)(page) && (0, _routeregex.getRouteRegex)(page).re.test(cleanPathname)) {\n        pathname = page;\n        return true;\n      }\n    });\n  }\n\n  return (0, _removetrailingslash.removeTrailingSlash)(pathname);\n}\n\nfunction getMiddlewareData(source, response, options) {\n  var nextConfig = {\n    basePath: options.router.basePath,\n    i18n: {\n      locales: options.router.locales\n    },\n    trailingSlash: Boolean(false)\n  };\n  var rewriteHeader = response.headers.get(\"x-nextjs-rewrite\");\n  var rewriteTarget = rewriteHeader || response.headers.get(\"x-nextjs-matched-path\");\n  var matchedPath = response.headers.get(\"x-matched-path\");\n\n  if (matchedPath && !rewriteTarget && !matchedPath.includes(\"__next_data_catchall\") && !matchedPath.includes(\"/_error\") && !matchedPath.includes(\"/404\")) {\n    // leverage x-matched-path to detect next.config.js rewrites\n    rewriteTarget = matchedPath;\n  }\n\n  if (rewriteTarget) {\n    if (rewriteTarget.startsWith(\"/\") || undefined) {\n      var parsedRewriteTarget = (0, _parserelativeurl.parseRelativeUrl)(rewriteTarget);\n      var pathnameInfo = (0, _getnextpathnameinfo.getNextPathnameInfo)(parsedRewriteTarget.pathname, {\n        nextConfig: nextConfig,\n        parseData: true\n      });\n      var fsPathname = (0, _removetrailingslash.removeTrailingSlash)(pathnameInfo.pathname);\n      return Promise.all([options.router.pageLoader.getPageList(), (0, _routeloader.getClientBuildManifest)()]).then(function (param) {\n        var _param = _slicedToArray(param, 2),\n            pages = _param[0],\n            rewrites = _param[1].__rewrites;\n\n        var as = (0, _addlocale.addLocale)(pathnameInfo.pathname, pathnameInfo.locale);\n\n        if ((0, _isdynamic.isDynamicRoute)(as) || !rewriteHeader && pages.includes((0, _normalizelocalepath.normalizeLocalePath)((0, _removebasepath.removeBasePath)(as), options.router.locales).pathname)) {\n          var parsedSource = (0, _getnextpathnameinfo.getNextPathnameInfo)((0, _parserelativeurl.parseRelativeUrl)(source).pathname, {\n            nextConfig:  false ? 0 : nextConfig,\n            parseData: true\n          });\n          as = (0, _addbasepath.addBasePath)(parsedSource.pathname);\n          parsedRewriteTarget.pathname = as;\n        }\n\n        if (false) { var result; } else if (!pages.includes(fsPathname)) {\n          var resolvedPathname = resolveDynamicRoute(fsPathname, pages);\n\n          if (resolvedPathname !== fsPathname) {\n            fsPathname = resolvedPathname;\n          }\n        }\n\n        var resolvedHref = !pages.includes(fsPathname) ? resolveDynamicRoute((0, _normalizelocalepath.normalizeLocalePath)((0, _removebasepath.removeBasePath)(parsedRewriteTarget.pathname), options.router.locales).pathname, pages) : fsPathname;\n\n        if ((0, _isdynamic.isDynamicRoute)(resolvedHref)) {\n          var matches = (0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(resolvedHref))(as);\n          Object.assign(parsedRewriteTarget.query, matches || {});\n        }\n\n        return {\n          type: \"rewrite\",\n          parsedAs: parsedRewriteTarget,\n          resolvedHref: resolvedHref\n        };\n      });\n    }\n\n    var src = (0, _parsepath.parsePath)(source);\n    var pathname = (0, _formatnextpathnameinfo.formatNextPathnameInfo)(_objectSpread(_objectSpread({}, (0, _getnextpathnameinfo.getNextPathnameInfo)(src.pathname, {\n      nextConfig: nextConfig,\n      parseData: true\n    })), {}, {\n      defaultLocale: options.router.defaultLocale,\n      buildId: \"\"\n    }));\n    return Promise.resolve({\n      type: \"redirect-external\",\n      destination: \"\" + pathname + src.query + src.hash\n    });\n  }\n\n  var redirectTarget = response.headers.get(\"x-nextjs-redirect\");\n\n  if (redirectTarget) {\n    if (redirectTarget.startsWith(\"/\")) {\n      var _src = (0, _parsepath.parsePath)(redirectTarget);\n\n      var _pathname = (0, _formatnextpathnameinfo.formatNextPathnameInfo)(_objectSpread(_objectSpread({}, (0, _getnextpathnameinfo.getNextPathnameInfo)(_src.pathname, {\n        nextConfig: nextConfig,\n        parseData: true\n      })), {}, {\n        defaultLocale: options.router.defaultLocale,\n        buildId: \"\"\n      }));\n\n      return Promise.resolve({\n        type: \"redirect-internal\",\n        newAs: \"\" + _pathname + _src.query + _src.hash,\n        newUrl: \"\" + _pathname + _src.query + _src.hash\n      });\n    }\n\n    return Promise.resolve({\n      type: \"redirect-external\",\n      destination: redirectTarget\n    });\n  }\n\n  return Promise.resolve({\n    type: \"next\"\n  });\n}\n\nfunction withMiddlewareEffects(_x2) {\n  return _withMiddlewareEffects.apply(this, arguments);\n}\n\nfunction _withMiddlewareEffects() {\n  _withMiddlewareEffects = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(options) {\n    var matches, data, effect;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return _matchesMiddleware(options);\n\n          case 2:\n            matches = _context9.sent;\n\n            if (!(!matches || !options.fetchData)) {\n              _context9.next = 5;\n              break;\n            }\n\n            return _context9.abrupt(\"return\", null);\n\n          case 5:\n            _context9.prev = 5;\n            _context9.next = 8;\n            return options.fetchData();\n\n          case 8:\n            data = _context9.sent;\n            _context9.next = 11;\n            return getMiddlewareData(data.dataHref, data.response, options);\n\n          case 11:\n            effect = _context9.sent;\n            return _context9.abrupt(\"return\", {\n              dataHref: data.dataHref,\n              json: data.json,\n              response: data.response,\n              text: data.text,\n              cacheKey: data.cacheKey,\n              effect: effect\n            });\n\n          case 15:\n            _context9.prev = 15;\n            _context9.t0 = _context9[\"catch\"](5);\n            return _context9.abrupt(\"return\", null);\n\n          case 18:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[5, 15]]);\n  }));\n  return _withMiddlewareEffects.apply(this, arguments);\n}\n\nvar manualScrollRestoration =  false && 0;\nvar SSG_DATA_NOT_FOUND = Symbol(\"SSG_DATA_NOT_FOUND\");\n\nfunction fetchRetry(url, attempts, options) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` won’t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: \"same-origin\",\n    method: options.method || \"GET\",\n    headers: Object.assign({}, options.headers, {\n      \"x-nextjs-data\": \"1\"\n    })\n  }).then(function (response) {\n    return !response.ok && attempts > 1 && response.status >= 500 ? fetchRetry(url, attempts - 1, options) : response;\n  });\n}\n\nfunction tryToParseAsJSON(text) {\n  try {\n    return JSON.parse(text);\n  } catch (error) {\n    return null;\n  }\n}\n\nfunction fetchNextData(param) {\n  var dataHref = param.dataHref,\n      inflightCache = param.inflightCache,\n      isPrefetch = param.isPrefetch,\n      hasMiddleware = param.hasMiddleware,\n      isServerRender = param.isServerRender,\n      parseJSON = param.parseJSON,\n      persistCache = param.persistCache,\n      isBackground = param.isBackground,\n      unstable_skipClientCache = param.unstable_skipClientCache;\n\n  var _URL = new URL(dataHref, window.location.href),\n      cacheKey = _URL.href;\n\n  var _params_method;\n\n  var getData = function getData(params) {\n    return fetchRetry(dataHref, isServerRender ? 3 : 1, {\n      headers: Object.assign({}, isPrefetch ? {\n        purpose: \"prefetch\"\n      } : {}, isPrefetch && hasMiddleware ? {\n        \"x-middleware-prefetch\": \"1\"\n      } : {}),\n      method: (_params_method = params == null ? void 0 : params.method) != null ? _params_method : \"GET\"\n    }).then(function (response) {\n      if (response.ok && (params == null ? void 0 : params.method) === \"HEAD\") {\n        return {\n          dataHref: dataHref,\n          response: response,\n          text: \"\",\n          json: {},\n          cacheKey: cacheKey\n        };\n      }\n\n      return response.text().then(function (text) {\n        if (!response.ok) {\n          /**\n          * When the data response is a redirect because of a middleware\n          * we do not consider it an error. The headers must bring the\n          * mapped location.\n          * TODO: Change the status code in the handler.\n          */\n          if (hasMiddleware && [301, 302, 307, 308].includes(response.status)) {\n            return {\n              dataHref: dataHref,\n              response: response,\n              text: text,\n              json: {},\n              cacheKey: cacheKey\n            };\n          }\n\n          if (response.status === 404) {\n            var _tryToParseAsJSON;\n\n            if ((_tryToParseAsJSON = tryToParseAsJSON(text)) == null ? void 0 : _tryToParseAsJSON.notFound) {\n              return {\n                dataHref: dataHref,\n                json: {\n                  notFound: SSG_DATA_NOT_FOUND\n                },\n                response: response,\n                text: text,\n                cacheKey: cacheKey\n              };\n            }\n          }\n\n          var error = new Error(\"Failed to load static props\");\n          /**\n          * We should only trigger a server-side transition if this was\n          * caused on a client-side transition. Otherwise, we'd get into\n          * an infinite loop.\n          */\n\n          if (!isServerRender) {\n            (0, _routeloader.markAssetError)(error);\n          }\n\n          throw error;\n        }\n\n        return {\n          dataHref: dataHref,\n          json: parseJSON ? tryToParseAsJSON(text) : null,\n          response: response,\n          text: text,\n          cacheKey: cacheKey\n        };\n      });\n    }).then(function (data) {\n      if (!persistCache || true || 0) {\n        delete inflightCache[cacheKey];\n      }\n\n      return data;\n    })[\"catch\"](function (err) {\n      if (!unstable_skipClientCache) {\n        delete inflightCache[cacheKey];\n      }\n\n      if ( // chrome\n      err.message === \"Failed to fetch\" || // firefox\n      err.message === \"NetworkError when attempting to fetch resource.\" || // safari\n      err.message === \"Load failed\") {\n        (0, _routeloader.markAssetError)(err);\n      }\n\n      throw err;\n    });\n  }; // when skipping client cache we wait to update\n  // inflight cache until successful data response\n  // this allows racing click event with fetching newer data\n  // without blocking navigation when stale data is available\n\n\n  if (unstable_skipClientCache && persistCache) {\n    return getData({}).then(function (data) {\n      inflightCache[cacheKey] = Promise.resolve(data);\n      return data;\n    });\n  }\n\n  if (inflightCache[cacheKey] !== undefined) {\n    return inflightCache[cacheKey];\n  }\n\n  return inflightCache[cacheKey] = getData(isBackground ? {\n    method: \"HEAD\"\n  } : {});\n}\n\nfunction _createKey() {\n  return Math.random().toString(36).slice(2, 10);\n}\n\nfunction handleHardNavigation(param) {\n  var url = param.url,\n      router = param.router; // ensure we don't trigger a hard navigation to the same\n  // URL as this can end up with an infinite refresh\n\n  if (url === (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(router.asPath, router.locale))) {\n    throw new Error(\"Invariant: attempted to hard navigate to the same URL \" + url + \" \" + location.href);\n  }\n\n  window.location.href = url;\n}\n\nvar getCancelledHandler = function getCancelledHandler(param) {\n  var route = param.route,\n      router = param.router;\n  var cancelled = false;\n\n  var cancel = router.clc = function () {\n    cancelled = true;\n  };\n\n  var handleCancelled = function handleCancelled() {\n    if (cancelled) {\n      var error = new Error('Abort fetching component for route: \"' + route + '\"');\n      error.cancelled = true;\n      throw error;\n    }\n\n    if (cancel === router.clc) {\n      router.clc = null;\n    }\n  };\n\n  return handleCancelled;\n};\n\nvar Router = /*#__PURE__*/function () {\n  function Router(pathname, query, as, _ref3) {\n    var _this = this;\n\n    var initialProps = _ref3.initialProps,\n        pageLoader = _ref3.pageLoader,\n        App = _ref3.App,\n        wrapApp = _ref3.wrapApp,\n        Component = _ref3.Component,\n        err = _ref3.err,\n        subscription = _ref3.subscription,\n        isFallback = _ref3.isFallback,\n        locale = _ref3.locale,\n        locales = _ref3.locales,\n        defaultLocale = _ref3.defaultLocale,\n        domainLocales = _ref3.domainLocales,\n        isPreview = _ref3.isPreview;\n\n    _classCallCheck(this, Router);\n\n    // Server Data Cache (full data requests)\n    this.sdc = {}; // Server Background Cache (HEAD requests)\n\n    this.sbc = {};\n    this.isFirstPopStateEvent = true;\n    this._key = _createKey();\n\n    this.onPopState = function (e) {\n      var isFirstPopStateEvent = _this.isFirstPopStateEvent;\n      _this.isFirstPopStateEvent = false;\n      var state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        var _pathname2 = _this.pathname,\n            _query = _this.query;\n\n        _this.changeState(\"replaceState\", (0, _formaturl.formatWithValidation)({\n          pathname: (0, _addbasepath.addBasePath)(_pathname2),\n          query: _query\n        }), (0, _utils.getURL)());\n\n        return;\n      } // __NA is used to identify if the history entry can be handled by the app-router.\n\n\n      if (state.__NA) {\n        window.location.reload();\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      } // Safari fires popstateevent when reopening the browser.\n\n\n      if (isFirstPopStateEvent && _this.locale === state.options.locale && state.as === _this.asPath) {\n        return;\n      }\n\n      var forcedScroll;\n      var url = state.url,\n          as = state.as,\n          options = state.options,\n          key = state.key;\n\n      if (false) { var v; }\n\n      _this._key = key;\n\n      var _ref4 = (0, _parserelativeurl.parseRelativeUrl)(url),\n          pathname = _ref4.pathname; // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n\n      if (_this.isSsr && as === (0, _addbasepath.addBasePath)(_this.asPath) && pathname === (0, _addbasepath.addBasePath)(_this.pathname)) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (_this._bps && !_this._bps(state)) {\n        return;\n      }\n\n      _this.change(\"replaceState\", url, as, Object.assign({}, options, {\n        shallow: options.shallow && _this._shallow,\n        locale: options.locale || _this.defaultLocale,\n        // @ts-ignore internal value not exposed on types\n        _h: 0\n      }), forcedScroll);\n    }; // represents the current component key\n\n\n    var route = (0, _removetrailingslash.removeTrailingSlash)(pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname !== \"/_error\") {\n      this.components[route] = {\n        Component: Component,\n        initial: true,\n        props: initialProps,\n        err: err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n\n    this.components[\"/_app\"] = {\n      Component: App,\n      styleSheets: []\n    };\n\n    if (true) {\n      var _require = __webpack_require__(/*! ../../lib/bloom-filter */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/bloom-filter.js\"),\n          BloomFilter = _require.BloomFilter;\n\n      var staticFilterData = {\"numItems\":0,\"errorRate\":0.01,\"numBits\":0,\"numHashes\":null,\"bitArray\":[]};\n      var dynamicFilterData = {\"numItems\":0,\"errorRate\":0.01,\"numBits\":0,\"numHashes\":null,\"bitArray\":[]};\n\n      if (staticFilterData == null ? void 0 : staticFilterData.numHashes) {\n        this._bfl_s = new BloomFilter(staticFilterData.numItems, staticFilterData.errorRate);\n\n        this._bfl_s[\"import\"](staticFilterData);\n      }\n\n      if (dynamicFilterData == null ? void 0 : dynamicFilterData.numHashes) {\n        this._bfl_d = new BloomFilter(dynamicFilterData.numItems, dynamicFilterData.errorRate);\n\n        this._bfl_d[\"import\"](dynamicFilterData);\n      }\n    } // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    var autoExportDynamic = (0, _isdynamic.isDynamicRoute)(pathname) && self.__NEXT_DATA__.autoExport;\n\n    this.basePath =  false || \"\";\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isLocaleDomain = false;\n    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || self.__NEXT_DATA__.appGip && !self.__NEXT_DATA__.gsp || !autoExportDynamic && !self.location.search && !false);\n\n    if (false) {}\n\n    this.state = {\n      route: route,\n      pathname: pathname,\n      query: query,\n      asPath: autoExportDynamic ? pathname : as,\n      isPreview: !!isPreview,\n      locale:  false ? 0 : undefined,\n      isFallback: isFallback\n    };\n    this._initialMatchesMiddlewarePromise = Promise.resolve(false);\n\n    if (true) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (!as.startsWith(\"//\")) {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        var options = {\n          locale: locale\n        };\n        var asPath = (0, _utils.getURL)();\n        this._initialMatchesMiddlewarePromise = _matchesMiddleware({\n          router: this,\n          locale: locale,\n          asPath: asPath\n        }).then(function (matches) {\n          options._shouldResolveHref = as !== pathname;\n\n          _this.changeState(\"replaceState\", matches ? asPath : (0, _formaturl.formatWithValidation)({\n            pathname: (0, _addbasepath.addBasePath)(pathname),\n            query: query\n          }), asPath, options);\n\n          return matches;\n        });\n      }\n\n      window.addEventListener(\"popstate\", this.onPopState); // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n\n      if (false) {}\n    }\n  }\n\n  _createClass(Router, [{\n    key: \"reload\",\n    value: function reload() {\n      window.location.reload();\n    }\n    /**\n    * Go back in history\n    */\n\n  }, {\n    key: \"back\",\n    value: function back() {\n      window.history.back();\n    }\n    /**\n    * Go forward in history\n    */\n\n  }, {\n    key: \"forward\",\n    value: function forward() {\n      window.history.forward();\n    }\n    /**\n    * Performs a `pushState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n\n  }, {\n    key: \"push\",\n    value: function push(url, as, options) {\n      if (options === void 0) options = {};\n\n      if (false) {}\n\n      var _prepareUrlAs = prepareUrlAs(this, url, as);\n\n      url = _prepareUrlAs.url;\n      as = _prepareUrlAs.as;\n      return this.change(\"pushState\", url, as, options);\n    }\n    /**\n    * Performs a `replaceState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n\n  }, {\n    key: \"replace\",\n    value: function replace(url, as, options) {\n      if (options === void 0) options = {};\n\n      var _prepareUrlAs2 = prepareUrlAs(this, url, as);\n\n      url = _prepareUrlAs2.url;\n      as = _prepareUrlAs2.as;\n      return this.change(\"replaceState\", url, as, options);\n    }\n  }, {\n    key: \"_bfl\",\n    value: function () {\n      var _bfl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(as, resolvedAs, locale, skipNavigate) {\n        var matchesBflStatic, matchesBflDynamic, _i, _arr, curAs, asNoSlash, asNoSlashLocale, _this__bfl_s, _this__bfl_s1, _i2, _arr2, normalizedAS, curAsParts, i, _this__bfl_d, currentPart;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (false) {}\n\n                matchesBflStatic = false;\n                matchesBflDynamic = false;\n                _i = 0, _arr = [as, resolvedAs];\n\n              case 4:\n                if (!(_i < _arr.length)) {\n                  _context.next = 35;\n                  break;\n                }\n\n                curAs = _arr[_i];\n\n                if (!curAs) {\n                  _context.next = 32;\n                  break;\n                }\n\n                asNoSlash = (0, _removetrailingslash.removeTrailingSlash)(new URL(curAs, \"http://n\").pathname);\n                asNoSlashLocale = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(asNoSlash, locale || this.locale));\n\n                if (!(asNoSlash !== (0, _removetrailingslash.removeTrailingSlash)(new URL(this.asPath, \"http://n\").pathname))) {\n                  _context.next = 32;\n                  break;\n                }\n\n                matchesBflStatic = matchesBflStatic || !!((_this__bfl_s = this._bfl_s) == null ? void 0 : _this__bfl_s.contains(asNoSlash)) || !!((_this__bfl_s1 = this._bfl_s) == null ? void 0 : _this__bfl_s1.contains(asNoSlashLocale));\n                _i2 = 0, _arr2 = [asNoSlash, asNoSlashLocale];\n\n              case 12:\n                if (!(_i2 < _arr2.length)) {\n                  _context.next = 27;\n                  break;\n                }\n\n                normalizedAS = _arr2[_i2];\n                // if any sub-path of as matches a dynamic filter path\n                // it should be hard navigated\n                curAsParts = normalizedAS.split(\"/\");\n                i = 0;\n\n              case 16:\n                if (!(!matchesBflDynamic && i < curAsParts.length + 1)) {\n                  _context.next = 24;\n                  break;\n                }\n\n                currentPart = curAsParts.slice(0, i).join(\"/\");\n\n                if (!(currentPart && ((_this__bfl_d = this._bfl_d) == null ? void 0 : _this__bfl_d.contains(currentPart)))) {\n                  _context.next = 21;\n                  break;\n                }\n\n                matchesBflDynamic = true;\n                return _context.abrupt(\"break\", 24);\n\n              case 21:\n                i++;\n                _context.next = 16;\n                break;\n\n              case 24:\n                _i2++;\n                _context.next = 12;\n                break;\n\n              case 27:\n                if (!(matchesBflStatic || matchesBflDynamic)) {\n                  _context.next = 32;\n                  break;\n                }\n\n                if (!skipNavigate) {\n                  _context.next = 30;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", true);\n\n              case 30:\n                handleHardNavigation({\n                  url: (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(as, locale || this.locale, this.defaultLocale)),\n                  router: this\n                });\n                return _context.abrupt(\"return\", new Promise(function () {}));\n\n              case 32:\n                _i++;\n                _context.next = 4;\n                break;\n\n              case 35:\n                return _context.abrupt(\"return\", false);\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _bfl(_x3, _x4, _x5, _x6) {\n        return _bfl2.apply(this, arguments);\n      }\n\n      return _bfl;\n    }()\n  }, {\n    key: \"change\",\n    value: function () {\n      var _change = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(method, url, as, options, forcedScroll) {\n        var _this_components_pathname, isQueryUpdating, shouldResolveHref, nextState, readyStateChange, isSsr, prevLocale, parsedAs, localePathResult, didNavigate, _this_locales, detectedDomain, asNoBasePath, _options$shallow, shallow, _options$scroll, scroll, routeProps, cleanedAs, localeChange, parsed, pathname, query, pages, rewrites, _yield$Promise$all, _yield$Promise$all2, resolvedAs, route, parsedAsPathname, isMiddlewareRewrite, isMiddlewareMatch, rewritesResult, routeMatch, asPathname, routeRegex, shouldInterpolate, interpolatedAs, missingParams, isErrorRoute, _self___NEXT_DATA___props, _self___NEXT_DATA___props_pageProps, _routeInfo_props, routeInfo, cleanedParsedPathname, prefixedAs, rewriteAs, localeResult, _routeRegex, curRouteMatch, component, scripts, destination, parsedHref, _prepareUrlAs3, newUrl, newAs, notFoundRoute, _routeInfo_route, isValidShallowRoute, _options_scroll, shouldScroll, resetScroll, upcomingScrollState, upcomingRouterState, _self___NEXT_DATA___props1, _self___NEXT_DATA___props_pageProps1, _routeInfo_props1, canSkipUpdating, hashRegex;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if ((0, _islocalurl.isLocalURL)(url)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                handleHardNavigation({\n                  url: url,\n                  router: this\n                });\n                return _context2.abrupt(\"return\", false);\n\n              case 3:\n                // WARNING: `_h` is an internal option for handing Next.js client-side\n                // hydration. Your app should _never_ use this property. It may change at\n                // any time without notice.\n                isQueryUpdating = options._h === 1;\n\n                if (!(!isQueryUpdating && !options.shallow)) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 7;\n                return this._bfl(as, undefined, options.locale);\n\n              case 7:\n                shouldResolveHref = isQueryUpdating || options._shouldResolveHref || (0, _parsepath.parsePath)(url).pathname === (0, _parsepath.parsePath)(as).pathname;\n                nextState = _objectSpread({}, this.state); // for static pages with query params in the URL we delay\n                // marking the router ready until after the query is updated\n                // or a navigation has occurred\n\n                readyStateChange = this.isReady !== true;\n                this.isReady = true;\n                isSsr = this.isSsr;\n\n                if (!isQueryUpdating) {\n                  this.isSsr = false;\n                } // if a route transition is already in progress before\n                // the query updating is triggered ignore query updating\n\n\n                if (!(isQueryUpdating && this.clc)) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 15:\n                prevLocale = nextState.locale;\n\n                if (true) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                nextState.locale = options.locale === false ? this.defaultLocale : options.locale || nextState.locale;\n\n                if (typeof options.locale === \"undefined\") {\n                  options.locale = nextState.locale;\n                }\n\n                parsedAs = (0, _parserelativeurl.parseRelativeUrl)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as);\n                localePathResult = (0, _normalizelocalepath.normalizeLocalePath)(parsedAs.pathname, this.locales);\n\n                if (localePathResult.detectedLocale) {\n                  nextState.locale = localePathResult.detectedLocale;\n                  parsedAs.pathname = (0, _addbasepath.addBasePath)(parsedAs.pathname);\n                  as = (0, _formaturl.formatWithValidation)(parsedAs);\n                  url = (0, _addbasepath.addBasePath)((0, _normalizelocalepath.normalizeLocalePath)((0, _hasbasepath.hasBasePath)(url) ? (0, _removebasepath.removeBasePath)(url) : url, this.locales).pathname);\n                }\n\n                didNavigate = false; // we need to wrap this in the env check again since regenerator runtime\n                // moves this on its own due to the return\n\n                if (false) {}\n\n                detectedDomain = (0, _detectdomainlocale.detectDomainLocale)(this.domainLocales, undefined, nextState.locale); // we need to wrap this in the env check again since regenerator runtime\n                // moves this on its own due to the return\n\n                if (false) {}\n\n                if (!didNavigate) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", new Promise(function () {}));\n\n              case 28:\n                // marking route changes as a navigation start entry\n                if (_utils.ST) {\n                  performance.mark(\"routeChange\");\n                }\n\n                _options$shallow = options.shallow, shallow = _options$shallow === void 0 ? false : _options$shallow, _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll;\n                routeProps = {\n                  shallow: shallow\n                };\n\n                if (this._inFlightRoute && this.clc) {\n                  if (!isSsr) {\n                    Router.events.emit(\"routeChangeError\", buildCancellationError(), this._inFlightRoute, routeProps);\n                  }\n\n                  this.clc();\n                  this.clc = null;\n                }\n\n                as = (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as, options.locale, this.defaultLocale));\n                cleanedAs = (0, _removelocale.removeLocale)((0, _hasbasepath.hasBasePath)(as) ? (0, _removebasepath.removeBasePath)(as) : as, nextState.locale);\n                this._inFlightRoute = as;\n                localeChange = prevLocale !== nextState.locale; // If the url change is only related to a hash change\n                // We should not proceed. We should only change the state.\n\n                if (!(!isQueryUpdating && this.onlyAHashChange(cleanedAs) && !localeChange)) {\n                  _context2.next = 52;\n                  break;\n                }\n\n                nextState.asPath = cleanedAs;\n                Router.events.emit(\"hashChangeStart\", as, routeProps); // TODO: do we need the resolved href when only a hash change?\n\n                this.changeState(method, url, as, _objectSpread(_objectSpread({}, options), {}, {\n                  scroll: false\n                }));\n\n                if (scroll) {\n                  this.scrollToHash(cleanedAs);\n                }\n\n                _context2.prev = 41;\n                _context2.next = 44;\n                return this.set(nextState, this.components[nextState.route], null);\n\n              case 44:\n                _context2.next = 50;\n                break;\n\n              case 46:\n                _context2.prev = 46;\n                _context2.t0 = _context2[\"catch\"](41);\n\n                if ((0, _iserror[\"default\"])(_context2.t0) && _context2.t0.cancelled) {\n                  Router.events.emit(\"routeChangeError\", _context2.t0, cleanedAs, routeProps);\n                }\n\n                throw _context2.t0;\n\n              case 50:\n                Router.events.emit(\"hashChangeComplete\", as, routeProps);\n                return _context2.abrupt(\"return\", true);\n\n              case 52:\n                parsed = (0, _parserelativeurl.parseRelativeUrl)(url);\n                pathname = parsed.pathname, query = parsed.query; // if we detected the path as app route during prefetching\n                // trigger hard navigation\n\n                if (!((_this_components_pathname = this.components[pathname]) == null ? void 0 : _this_components_pathname.__appRouter)) {\n                  _context2.next = 57;\n                  break;\n                }\n\n                handleHardNavigation({\n                  url: as,\n                  router: this\n                });\n                return _context2.abrupt(\"return\", new Promise(function () {}));\n\n              case 57:\n                _context2.prev = 57;\n                _context2.next = 60;\n                return Promise.all([this.pageLoader.getPageList(), (0, _routeloader.getClientBuildManifest)(), this.pageLoader.getMiddleware()]);\n\n              case 60:\n                _yield$Promise$all = _context2.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                pages = _yield$Promise$all2[0];\n                rewrites = _yield$Promise$all2[1].__rewrites;\n                _context2.next = 70;\n                break;\n\n              case 66:\n                _context2.prev = 66;\n                _context2.t1 = _context2[\"catch\"](57);\n                // If we fail to resolve the page list or client-build manifest, we must\n                // do a server-side transition:\n                handleHardNavigation({\n                  url: as,\n                  router: this\n                });\n                return _context2.abrupt(\"return\", false);\n\n              case 70:\n                // If asked to change the current URL we should reload the current page\n                // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n                // We also need to set the method = replaceState always\n                // as this should not go into the history (That's how browsers work)\n                // We should compare the new asPath to the current asPath, not the url\n                if (!this.urlIsNew(cleanedAs) && !localeChange) {\n                  method = \"replaceState\";\n                } // we need to resolve the as value using rewrites for dynamic SSG\n                // pages to allow building the data URL correctly\n\n\n                resolvedAs = as; // url and as should always be prefixed with basePath by this\n                // point by either next/link or router.push/replace so strip the\n                // basePath from the pathname to match the pages dir 1-to-1\n\n                pathname = pathname ? (0, _removetrailingslash.removeTrailingSlash)((0, _removebasepath.removeBasePath)(pathname)) : pathname;\n                route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n                parsedAsPathname = as.startsWith(\"/\") && (0, _parserelativeurl.parseRelativeUrl)(as).pathname;\n                isMiddlewareRewrite = !!(parsedAsPathname && route !== parsedAsPathname && (!(0, _isdynamic.isDynamicRoute)(route) || !(0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(route))(parsedAsPathname))); // we don't attempt resolve asPath when we need to execute\n                // middleware as the resolving will occur server-side\n\n                _context2.t2 = !options.shallow;\n\n                if (!_context2.t2) {\n                  _context2.next = 81;\n                  break;\n                }\n\n                _context2.next = 80;\n                return _matchesMiddleware({\n                  asPath: as,\n                  locale: nextState.locale,\n                  router: this\n                });\n\n              case 80:\n                _context2.t2 = _context2.sent;\n\n              case 81:\n                isMiddlewareMatch = _context2.t2;\n\n                if (isQueryUpdating && isMiddlewareMatch) {\n                  shouldResolveHref = false;\n                }\n\n                if (!(shouldResolveHref && pathname !== \"/_error\")) {\n                  _context2.next = 96;\n                  break;\n                }\n\n                options._shouldResolveHref = true;\n\n                if (true) {\n                  _context2.next = 94;\n                  break;\n                }\n\n                rewritesResult = (0, _resolverewrites[\"default\"])((0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(cleanedAs, nextState.locale), true), pages, rewrites, query, function (p) {\n                  return resolveDynamicRoute(p, pages);\n                }, this.locales);\n\n                if (!rewritesResult.externalDest) {\n                  _context2.next = 90;\n                  break;\n                }\n\n                handleHardNavigation({\n                  url: as,\n                  router: this\n                });\n                return _context2.abrupt(\"return\", true);\n\n              case 90:\n                if (!isMiddlewareMatch) {\n                  resolvedAs = rewritesResult.asPath;\n                }\n\n                if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n                  // if this directly matches a page we need to update the href to\n                  // allow the correct page chunk to be loaded\n                  pathname = rewritesResult.resolvedHref;\n                  parsed.pathname = (0, _addbasepath.addBasePath)(pathname);\n\n                  if (!isMiddlewareMatch) {\n                    url = (0, _formaturl.formatWithValidation)(parsed);\n                  }\n                }\n\n                _context2.next = 96;\n                break;\n\n              case 94:\n                parsed.pathname = resolveDynamicRoute(pathname, pages);\n\n                if (parsed.pathname !== pathname) {\n                  pathname = parsed.pathname;\n                  parsed.pathname = (0, _addbasepath.addBasePath)(pathname);\n\n                  if (!isMiddlewareMatch) {\n                    url = (0, _formaturl.formatWithValidation)(parsed);\n                  }\n                }\n\n              case 96:\n                if ((0, _islocalurl.isLocalURL)(as)) {\n                  _context2.next = 101;\n                  break;\n                }\n\n                if (false) {}\n\n                throw new Error('Invalid href: \"' + url + '\" and as: \"' + as + '\", received relative href and external as' + \"\\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as\");\n\n              case 99:\n                handleHardNavigation({\n                  url: as,\n                  router: this\n                });\n                return _context2.abrupt(\"return\", false);\n\n              case 101:\n                resolvedAs = (0, _removelocale.removeLocale)((0, _removebasepath.removeBasePath)(resolvedAs), nextState.locale);\n                route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n                routeMatch = false;\n\n                if (!(0, _isdynamic.isDynamicRoute)(route)) {\n                  _context2.next = 119;\n                  break;\n                }\n\n                parsedAs = (0, _parserelativeurl.parseRelativeUrl)(resolvedAs);\n                asPathname = parsedAs.pathname;\n                routeRegex = (0, _routeregex.getRouteRegex)(route);\n                routeMatch = (0, _routematcher.getRouteMatcher)(routeRegex)(asPathname);\n                shouldInterpolate = route === asPathname;\n                interpolatedAs = shouldInterpolate ? (0, _interpolateas.interpolateAs)(route, asPathname, query) : {};\n\n                if (!(!routeMatch || shouldInterpolate && !interpolatedAs.result)) {\n                  _context2.next = 118;\n                  break;\n                }\n\n                missingParams = Object.keys(routeRegex.groups).filter(function (param) {\n                  return !query[param] && !routeRegex.groups[param].optional;\n                });\n\n                if (!(missingParams.length > 0 && !isMiddlewareMatch)) {\n                  _context2.next = 116;\n                  break;\n                }\n\n                if (true) {\n                  console.warn(\"\" + (shouldInterpolate ? \"Interpolating href\" : \"Mismatching `as` and `href`\") + \" failed to manually provide \" + (\"the params: \" + missingParams.join(\", \") + \" in the `href`'s `query`\"));\n                }\n\n                throw new Error((shouldInterpolate ? \"The provided `href` (\" + url + \") value is missing query values (\" + missingParams.join(\", \") + \") to be interpolated properly. \" : \"The provided `as` value (\" + asPathname + \") is incompatible with the `href` value (\" + route + \"). \") + (\"Read more: https://nextjs.org/docs/messages/\" + (shouldInterpolate ? \"href-interpolation-failed\" : \"incompatible-href-as\")));\n\n              case 116:\n                _context2.next = 119;\n                break;\n\n              case 118:\n                if (shouldInterpolate) {\n                  as = (0, _formaturl.formatWithValidation)(Object.assign({}, parsedAs, {\n                    pathname: interpolatedAs.result,\n                    query: (0, _omit.omit)(query, interpolatedAs.params)\n                  }));\n                } else {\n                  // Merge params into `query`, overwriting any specified in search\n                  Object.assign(query, routeMatch);\n                }\n\n              case 119:\n                if (!isQueryUpdating) {\n                  Router.events.emit(\"routeChangeStart\", as, routeProps);\n                }\n\n                isErrorRoute = this.pathname === \"/404\" || this.pathname === \"/_error\";\n                _context2.prev = 121;\n                _context2.next = 124;\n                return this.getRouteInfo({\n                  route: route,\n                  pathname: pathname,\n                  query: query,\n                  as: as,\n                  resolvedAs: resolvedAs,\n                  routeProps: routeProps,\n                  locale: nextState.locale,\n                  isPreview: nextState.isPreview,\n                  hasMiddleware: isMiddlewareMatch,\n                  unstable_skipClientCache: options.unstable_skipClientCache,\n                  isQueryUpdating: isQueryUpdating && !this.isFallback,\n                  isMiddlewareRewrite: isMiddlewareRewrite\n                });\n\n              case 124:\n                routeInfo = _context2.sent;\n\n                if (!(!isQueryUpdating && !options.shallow)) {\n                  _context2.next = 128;\n                  break;\n                }\n\n                _context2.next = 128;\n                return this._bfl(as, \"resolvedAs\" in routeInfo ? routeInfo.resolvedAs : undefined, nextState.locale);\n\n              case 128:\n                if (\"route\" in routeInfo && isMiddlewareMatch) {\n                  pathname = routeInfo.route || route;\n                  route = pathname;\n\n                  if (!routeProps.shallow) {\n                    query = Object.assign({}, routeInfo.query || {}, query);\n                  }\n\n                  cleanedParsedPathname = (0, _hasbasepath.hasBasePath)(parsed.pathname) ? (0, _removebasepath.removeBasePath)(parsed.pathname) : parsed.pathname;\n\n                  if (routeMatch && pathname !== cleanedParsedPathname) {\n                    Object.keys(routeMatch).forEach(function (key) {\n                      if (routeMatch && query[key] === routeMatch[key]) {\n                        delete query[key];\n                      }\n                    });\n                  }\n\n                  if ((0, _isdynamic.isDynamicRoute)(pathname)) {\n                    prefixedAs = !routeProps.shallow && routeInfo.resolvedAs ? routeInfo.resolvedAs : (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(new URL(as, location.href).pathname, nextState.locale), true);\n                    rewriteAs = prefixedAs;\n\n                    if ((0, _hasbasepath.hasBasePath)(rewriteAs)) {\n                      rewriteAs = (0, _removebasepath.removeBasePath)(rewriteAs);\n                    }\n\n                    if (false) {}\n\n                    _routeRegex = (0, _routeregex.getRouteRegex)(pathname);\n                    curRouteMatch = (0, _routematcher.getRouteMatcher)(_routeRegex)(new URL(rewriteAs, location.href).pathname);\n\n                    if (curRouteMatch) {\n                      Object.assign(query, curRouteMatch);\n                    }\n                  }\n                } // If the routeInfo brings a redirect we simply apply it.\n\n\n                if (!(\"type\" in routeInfo)) {\n                  _context2.next = 136;\n                  break;\n                }\n\n                if (!(routeInfo.type === \"redirect-internal\")) {\n                  _context2.next = 134;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.change(method, routeInfo.newUrl, routeInfo.newAs, options));\n\n              case 134:\n                handleHardNavigation({\n                  url: routeInfo.destination,\n                  router: this\n                });\n                return _context2.abrupt(\"return\", new Promise(function () {}));\n\n              case 136:\n                component = routeInfo.Component;\n\n                if (component && component.unstable_scriptLoader) {\n                  scripts = [].concat(component.unstable_scriptLoader());\n                  scripts.forEach(function (script) {\n                    (0, _script.handleClientScriptLoad)(script.props);\n                  });\n                } // handle redirect on client-transition\n\n\n                if (!((routeInfo.__N_SSG || routeInfo.__N_SSP) && routeInfo.props)) {\n                  _context2.next = 165;\n                  break;\n                }\n\n                if (!(routeInfo.props.pageProps && routeInfo.props.pageProps.__N_REDIRECT)) {\n                  _context2.next = 149;\n                  break;\n                }\n\n                // Use the destination from redirect without adding locale\n                options.locale = false;\n                destination = routeInfo.props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt\n                // client-navigation if it is falling back to hard navigation if\n                // it's not\n\n                if (!(destination.startsWith(\"/\") && routeInfo.props.pageProps.__N_REDIRECT_BASE_PATH !== false)) {\n                  _context2.next = 147;\n                  break;\n                }\n\n                parsedHref = (0, _parserelativeurl.parseRelativeUrl)(destination);\n                parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);\n                _prepareUrlAs3 = prepareUrlAs(this, destination, destination), newUrl = _prepareUrlAs3.url, newAs = _prepareUrlAs3.as;\n                return _context2.abrupt(\"return\", this.change(method, newUrl, newAs, options));\n\n              case 147:\n                handleHardNavigation({\n                  url: destination,\n                  router: this\n                });\n                return _context2.abrupt(\"return\", new Promise(function () {}));\n\n              case 149:\n                nextState.isPreview = !!routeInfo.props.__N_PREVIEW; // handle SSG data 404\n\n                if (!(routeInfo.props.notFound === SSG_DATA_NOT_FOUND)) {\n                  _context2.next = 165;\n                  break;\n                }\n\n                _context2.prev = 151;\n                _context2.next = 154;\n                return this.fetchComponent(\"/404\");\n\n              case 154:\n                notFoundRoute = \"/404\";\n                _context2.next = 160;\n                break;\n\n              case 157:\n                _context2.prev = 157;\n                _context2.t3 = _context2[\"catch\"](151);\n                notFoundRoute = \"/_error\";\n\n              case 160:\n                _context2.next = 162;\n                return this.getRouteInfo({\n                  route: notFoundRoute,\n                  pathname: notFoundRoute,\n                  query: query,\n                  as: as,\n                  resolvedAs: resolvedAs,\n                  routeProps: {\n                    shallow: false\n                  },\n                  locale: nextState.locale,\n                  isPreview: nextState.isPreview,\n                  isNotFound: true\n                });\n\n              case 162:\n                routeInfo = _context2.sent;\n\n                if (!(\"type\" in routeInfo)) {\n                  _context2.next = 165;\n                  break;\n                }\n\n                throw new Error(\"Unexpected middleware effect on /404\");\n\n              case 165:\n                if (isQueryUpdating && this.pathname === \"/_error\" && ((_self___NEXT_DATA___props = self.__NEXT_DATA__.props) == null ? void 0 : (_self___NEXT_DATA___props_pageProps = _self___NEXT_DATA___props.pageProps) == null ? void 0 : _self___NEXT_DATA___props_pageProps.statusCode) === 500 && ((_routeInfo_props = routeInfo.props) == null ? void 0 : _routeInfo_props.pageProps)) {\n                  // ensure statusCode is still correct for static 500 page\n                  // when updating query information\n                  routeInfo.props.pageProps.statusCode = 500;\n                }\n\n                // shallow routing is only allowed for same page URL changes.\n                isValidShallowRoute = options.shallow && nextState.route === ((_routeInfo_route = routeInfo.route) != null ? _routeInfo_route : route);\n                shouldScroll = (_options_scroll = options.scroll) != null ? _options_scroll : !isQueryUpdating && !isValidShallowRoute;\n                resetScroll = shouldScroll ? {\n                  x: 0,\n                  y: 0\n                } : null;\n                upcomingScrollState = forcedScroll != null ? forcedScroll : resetScroll; // the new state that the router gonna set\n\n                upcomingRouterState = _objectSpread(_objectSpread({}, nextState), {}, {\n                  route: route,\n                  pathname: pathname,\n                  query: query,\n                  asPath: cleanedAs,\n                  isFallback: false\n                }); // When the page being rendered is the 404 page, we should only update the\n                // query parameters. Route changes here might add the basePath when it\n                // wasn't originally present. This is also why this block is before the\n                // below `changeState` call which updates the browser's history (changing\n                // the URL).\n\n                if (!(isQueryUpdating && isErrorRoute)) {\n                  _context2.next = 188;\n                  break;\n                }\n\n                _context2.next = 174;\n                return this.getRouteInfo({\n                  route: this.pathname,\n                  pathname: this.pathname,\n                  query: query,\n                  as: as,\n                  resolvedAs: resolvedAs,\n                  routeProps: {\n                    shallow: false\n                  },\n                  locale: nextState.locale,\n                  isPreview: nextState.isPreview,\n                  isQueryUpdating: isQueryUpdating && !this.isFallback\n                });\n\n              case 174:\n                routeInfo = _context2.sent;\n\n                if (!(\"type\" in routeInfo)) {\n                  _context2.next = 177;\n                  break;\n                }\n\n                throw new Error(\"Unexpected middleware effect on \" + this.pathname);\n\n              case 177:\n                if (this.pathname === \"/_error\" && ((_self___NEXT_DATA___props1 = self.__NEXT_DATA__.props) == null ? void 0 : (_self___NEXT_DATA___props_pageProps1 = _self___NEXT_DATA___props1.pageProps) == null ? void 0 : _self___NEXT_DATA___props_pageProps1.statusCode) === 500 && ((_routeInfo_props1 = routeInfo.props) == null ? void 0 : _routeInfo_props1.pageProps)) {\n                  // ensure statusCode is still correct for static 500 page\n                  // when updating query information\n                  routeInfo.props.pageProps.statusCode = 500;\n                }\n\n                _context2.prev = 178;\n                _context2.next = 181;\n                return this.set(upcomingRouterState, routeInfo, upcomingScrollState);\n\n              case 181:\n                _context2.next = 187;\n                break;\n\n              case 183:\n                _context2.prev = 183;\n                _context2.t4 = _context2[\"catch\"](178);\n\n                if ((0, _iserror[\"default\"])(_context2.t4) && _context2.t4.cancelled) {\n                  Router.events.emit(\"routeChangeError\", _context2.t4, cleanedAs, routeProps);\n                }\n\n                throw _context2.t4;\n\n              case 187:\n                return _context2.abrupt(\"return\", true);\n\n              case 188:\n                Router.events.emit(\"beforeHistoryChange\", as, routeProps);\n                this.changeState(method, url, as, options); // for query updates we can skip it if the state is unchanged and we don't\n                // need to scroll\n                // https://github.com/vercel/next.js/issues/37139\n\n                canSkipUpdating = isQueryUpdating && !upcomingScrollState && !readyStateChange && !localeChange && (0, _comparestates.compareRouterStates)(upcomingRouterState, this.state);\n\n                if (canSkipUpdating) {\n                  _context2.next = 211;\n                  break;\n                }\n\n                _context2.prev = 192;\n                _context2.next = 195;\n                return this.set(upcomingRouterState, routeInfo, upcomingScrollState);\n\n              case 195:\n                _context2.next = 204;\n                break;\n\n              case 197:\n                _context2.prev = 197;\n                _context2.t5 = _context2[\"catch\"](192);\n\n                if (!_context2.t5.cancelled) {\n                  _context2.next = 203;\n                  break;\n                }\n\n                routeInfo.error = routeInfo.error || _context2.t5;\n                _context2.next = 204;\n                break;\n\n              case 203:\n                throw _context2.t5;\n\n              case 204:\n                if (!routeInfo.error) {\n                  _context2.next = 207;\n                  break;\n                }\n\n                if (!isQueryUpdating) {\n                  Router.events.emit(\"routeChangeError\", routeInfo.error, cleanedAs, routeProps);\n                }\n\n                throw routeInfo.error;\n\n              case 207:\n                if (false) {}\n\n                if (!isQueryUpdating) {\n                  Router.events.emit(\"routeChangeComplete\", as, routeProps);\n                } // A hash mark # is the optional last part of a URL\n\n\n                hashRegex = /#.+$/;\n\n                if (shouldScroll && hashRegex.test(as)) {\n                  this.scrollToHash(as);\n                }\n\n              case 211:\n                return _context2.abrupt(\"return\", true);\n\n              case 214:\n                _context2.prev = 214;\n                _context2.t6 = _context2[\"catch\"](121);\n\n                if (!((0, _iserror[\"default\"])(_context2.t6) && _context2.t6.cancelled)) {\n                  _context2.next = 218;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 218:\n                throw _context2.t6;\n\n              case 219:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[41, 46], [57, 66], [121, 214], [151, 157], [178, 183], [192, 197]]);\n      }));\n\n      function change(_x7, _x8, _x9, _x10, _x11) {\n        return _change.apply(this, arguments);\n      }\n\n      return change;\n    }()\n  }, {\n    key: \"changeState\",\n    value: function changeState(method, url, as, options) {\n      if (options === void 0) options = {};\n\n      if (true) {\n        if (typeof window.history === \"undefined\") {\n          console.error(\"Warning: window.history is not available.\");\n          return;\n        }\n\n        if (typeof window.history[method] === \"undefined\") {\n          console.error(\"Warning: window.history.\" + method + \" is not available\");\n          return;\n        }\n      }\n\n      if (method !== \"pushState\" || (0, _utils.getURL)() !== as) {\n        this._shallow = options.shallow;\n        window.history[method]({\n          url: url,\n          as: as,\n          options: options,\n          __N: true,\n          key: this._key = method !== \"pushState\" ? this._key : _createKey()\n        }, // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n        \"\", as);\n      }\n    }\n  }, {\n    key: \"handleRouteInfoError\",\n    value: function () {\n      var _handleRouteInfoError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(err, pathname, query, as, routeProps, loadErrorFail) {\n        var props, _yield$this$fetchComp, Component, styleSheets, routeInfo;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                console.error(err);\n\n                if (!err.cancelled) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw err;\n\n              case 3:\n                if (!((0, _routeloader.isAssetError)(err) || loadErrorFail)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                Router.events.emit(\"routeChangeError\", err, as, routeProps); // If we can't load the page it could be one of following reasons\n                //  1. Page doesn't exists\n                //  2. Page does exist in a different zone\n                //  3. Internal error while loading the page\n                // So, doing a hard reload is the proper way to deal with this.\n\n                handleHardNavigation({\n                  url: as,\n                  router: this\n                }); // Changing the URL doesn't block executing the current code path.\n                // So let's throw a cancellation error stop the routing logic.\n\n                throw buildCancellationError();\n\n              case 7:\n                _context3.prev = 7;\n                _context3.next = 10;\n                return this.fetchComponent(\"/_error\");\n\n              case 10:\n                _yield$this$fetchComp = _context3.sent;\n                Component = _yield$this$fetchComp.page;\n                styleSheets = _yield$this$fetchComp.styleSheets;\n                routeInfo = {\n                  props: props,\n                  Component: Component,\n                  styleSheets: styleSheets,\n                  err: err,\n                  error: err\n                };\n\n                if (routeInfo.props) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                _context3.prev = 15;\n                _context3.next = 18;\n                return this.getInitialProps(Component, {\n                  err: err,\n                  pathname: pathname,\n                  query: query\n                });\n\n              case 18:\n                routeInfo.props = _context3.sent;\n                _context3.next = 25;\n                break;\n\n              case 21:\n                _context3.prev = 21;\n                _context3.t0 = _context3[\"catch\"](15);\n                console.error(\"Error in error page `getInitialProps`: \", _context3.t0);\n                routeInfo.props = {};\n\n              case 25:\n                return _context3.abrupt(\"return\", routeInfo);\n\n              case 28:\n                _context3.prev = 28;\n                _context3.t1 = _context3[\"catch\"](7);\n                return _context3.abrupt(\"return\", this.handleRouteInfoError((0, _iserror[\"default\"])(_context3.t1) ? _context3.t1 : new Error(_context3.t1 + \"\"), pathname, query, as, routeProps, true));\n\n              case 31:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[7, 28], [15, 21]]);\n      }));\n\n      function handleRouteInfoError(_x12, _x13, _x14, _x15, _x16, _x17) {\n        return _handleRouteInfoError.apply(this, arguments);\n      }\n\n      return handleRouteInfoError;\n    }()\n  }, {\n    key: \"getRouteInfo\",\n    value: function () {\n      var _getRouteInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(param) {\n        var _this2 = this;\n\n        var requestedRoute, pathname, query, as, resolvedAs, routeProps, locale, hasMiddleware, isPreview, unstable_skipClientCache, isQueryUpdating, isMiddlewareRewrite, isNotFound, route, _data_effect, _data_effect1, _data_effect2, _data_response, handleCancelled, existingInfo, cachedRouteInfo, isBackground, fetchNextDataParams, data, resolvedRoute, pages, routeInfo, _require2, isValidElementType, wasBailedPrefetch, shouldFetchData, _yield$this$_getData, props, cacheKey;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                requestedRoute = param.route, pathname = param.pathname, query = param.query, as = param.as, resolvedAs = param.resolvedAs, routeProps = param.routeProps, locale = param.locale, hasMiddleware = param.hasMiddleware, isPreview = param.isPreview, unstable_skipClientCache = param.unstable_skipClientCache, isQueryUpdating = param.isQueryUpdating, isMiddlewareRewrite = param.isMiddlewareRewrite, isNotFound = param.isNotFound;\n                /**\n                * This `route` binding can change if there's a rewrite\n                * so we keep a reference to the original requested route\n                * so we can store the cache for it and avoid re-requesting every time\n                * for shallow routing purposes.\n                */\n\n                route = requestedRoute;\n                _context5.prev = 2;\n                handleCancelled = getCancelledHandler({\n                  route: route,\n                  router: this\n                });\n                existingInfo = this.components[route];\n\n                if (!(routeProps.shallow && existingInfo && this.route === route)) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", existingInfo);\n\n              case 7:\n                if (hasMiddleware) {\n                  existingInfo = undefined;\n                }\n\n                cachedRouteInfo = existingInfo && !(\"initial\" in existingInfo) && false ? 0 : undefined;\n                isBackground = isQueryUpdating;\n                fetchNextDataParams = {\n                  dataHref: this.pageLoader.getDataHref({\n                    href: (0, _formaturl.formatWithValidation)({\n                      pathname: pathname,\n                      query: query\n                    }),\n                    skipInterpolation: true,\n                    asPath: isNotFound ? \"/404\" : resolvedAs,\n                    locale: locale\n                  }),\n                  hasMiddleware: true,\n                  isServerRender: this.isSsr,\n                  parseJSON: true,\n                  inflightCache: isBackground ? this.sbc : this.sdc,\n                  persistCache: !isPreview,\n                  isPrefetch: false,\n                  unstable_skipClientCache: unstable_skipClientCache,\n                  isBackground: isBackground\n                };\n\n                if (!(isQueryUpdating && !isMiddlewareRewrite)) {\n                  _context5.next = 15;\n                  break;\n                }\n\n                _context5.t0 = null;\n                _context5.next = 18;\n                break;\n\n              case 15:\n                _context5.next = 17;\n                return withMiddlewareEffects({\n                  fetchData: function fetchData() {\n                    return fetchNextData(fetchNextDataParams);\n                  },\n                  asPath: isNotFound ? \"/404\" : resolvedAs,\n                  locale: locale,\n                  router: this\n                })[\"catch\"](function (err) {\n                  // we don't hard error during query updating\n                  // as it's un-necessary and doesn't need to be fatal\n                  // unless it is a fallback route and the props can't\n                  // be loaded\n                  if (isQueryUpdating) {\n                    return null;\n                  }\n\n                  throw err;\n                });\n\n              case 17:\n                _context5.t0 = _context5.sent;\n\n              case 18:\n                data = _context5.t0;\n\n                // when rendering error routes we don't apply middleware\n                // effects\n                if (data && (pathname === \"/_error\" || pathname === \"/404\")) {\n                  data.effect = undefined;\n                }\n\n                if (isQueryUpdating) {\n                  if (!data) {\n                    data = {\n                      json: self.__NEXT_DATA__.props\n                    };\n                  } else {\n                    data.json = self.__NEXT_DATA__.props;\n                  }\n                }\n\n                handleCancelled();\n\n                if (!((data == null ? void 0 : (_data_effect = data.effect) == null ? void 0 : _data_effect.type) === \"redirect-internal\" || (data == null ? void 0 : (_data_effect1 = data.effect) == null ? void 0 : _data_effect1.type) === \"redirect-external\")) {\n                  _context5.next = 24;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", data.effect);\n\n              case 24:\n                if (!((data == null ? void 0 : (_data_effect2 = data.effect) == null ? void 0 : _data_effect2.type) === \"rewrite\")) {\n                  _context5.next = 37;\n                  break;\n                }\n\n                resolvedRoute = (0, _removetrailingslash.removeTrailingSlash)(data.effect.resolvedHref);\n                _context5.next = 28;\n                return this.pageLoader.getPageList();\n\n              case 28:\n                pages = _context5.sent;\n\n                if (!(!isQueryUpdating || pages.includes(resolvedRoute))) {\n                  _context5.next = 37;\n                  break;\n                }\n\n                route = resolvedRoute;\n                pathname = data.effect.resolvedHref;\n                query = _objectSpread(_objectSpread({}, query), data.effect.parsedAs.query);\n                resolvedAs = (0, _removebasepath.removeBasePath)((0, _normalizelocalepath.normalizeLocalePath)(data.effect.parsedAs.pathname, this.locales).pathname); // Check again the cache with the new destination.\n\n                existingInfo = this.components[route];\n\n                if (!(routeProps.shallow && existingInfo && this.route === route && !hasMiddleware)) {\n                  _context5.next = 37;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", _objectSpread(_objectSpread({}, existingInfo), {}, {\n                  route: route\n                }));\n\n              case 37:\n                if (!(0, _isapiroute.isAPIRoute)(route)) {\n                  _context5.next = 40;\n                  break;\n                }\n\n                handleHardNavigation({\n                  url: as,\n                  router: this\n                });\n                return _context5.abrupt(\"return\", new Promise(function () {}));\n\n              case 40:\n                _context5.t1 = cachedRouteInfo;\n\n                if (_context5.t1) {\n                  _context5.next = 45;\n                  break;\n                }\n\n                _context5.next = 44;\n                return this.fetchComponent(route).then(function (res) {\n                  return {\n                    Component: res.page,\n                    styleSheets: res.styleSheets,\n                    __N_SSG: res.mod.__N_SSG,\n                    __N_SSP: res.mod.__N_SSP\n                  };\n                });\n\n              case 44:\n                _context5.t1 = _context5.sent;\n\n              case 45:\n                routeInfo = _context5.t1;\n\n                if (false) {}\n\n                _require2 = __webpack_require__(/*! next/dist/compiled/react-is */ \"../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/compiled/react-is/index.js\"), isValidElementType = _require2.isValidElementType;\n\n                if (isValidElementType(routeInfo.Component)) {\n                  _context5.next = 50;\n                  break;\n                }\n\n                throw new Error('The default export is not a React Component in page: \"' + pathname + '\"');\n\n              case 50:\n                wasBailedPrefetch = data == null ? void 0 : (_data_response = data.response) == null ? void 0 : _data_response.headers.get(\"x-middleware-skip\");\n                shouldFetchData = routeInfo.__N_SSG || routeInfo.__N_SSP; // For non-SSG prefetches that bailed before sending data\n                // we clear the cache to fetch full response\n\n                if (wasBailedPrefetch && (data == null ? void 0 : data.dataHref)) {\n                  delete this.sdc[data.dataHref];\n                }\n\n                _context5.next = 55;\n                return this._getData( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                  var dataHref, fetched;\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          if (!shouldFetchData) {\n                            _context4.next = 8;\n                            break;\n                          }\n\n                          if (!((data == null ? void 0 : data.json) && !wasBailedPrefetch)) {\n                            _context4.next = 3;\n                            break;\n                          }\n\n                          return _context4.abrupt(\"return\", {\n                            cacheKey: data.cacheKey,\n                            props: data.json\n                          });\n\n                        case 3:\n                          dataHref = (data == null ? void 0 : data.dataHref) ? data.dataHref : _this2.pageLoader.getDataHref({\n                            href: (0, _formaturl.formatWithValidation)({\n                              pathname: pathname,\n                              query: query\n                            }),\n                            asPath: resolvedAs,\n                            locale: locale\n                          });\n                          _context4.next = 6;\n                          return fetchNextData({\n                            dataHref: dataHref,\n                            isServerRender: _this2.isSsr,\n                            parseJSON: true,\n                            inflightCache: wasBailedPrefetch ? {} : _this2.sdc,\n                            persistCache: !isPreview,\n                            isPrefetch: false,\n                            unstable_skipClientCache: unstable_skipClientCache\n                          });\n\n                        case 6:\n                          fetched = _context4.sent;\n                          return _context4.abrupt(\"return\", {\n                            cacheKey: fetched.cacheKey,\n                            props: fetched.json || {}\n                          });\n\n                        case 8:\n                          _context4.t0 = {};\n                          _context4.next = 11;\n                          return _this2.getInitialProps(routeInfo.Component, // we provide AppTree later so this needs to be `any`\n                          {\n                            pathname: pathname,\n                            query: query,\n                            asPath: as,\n                            locale: locale,\n                            locales: _this2.locales,\n                            defaultLocale: _this2.defaultLocale\n                          });\n\n                        case 11:\n                          _context4.t1 = _context4.sent;\n                          return _context4.abrupt(\"return\", {\n                            headers: _context4.t0,\n                            props: _context4.t1\n                          });\n\n                        case 13:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                })));\n\n              case 55:\n                _yield$this$_getData = _context5.sent;\n                props = _yield$this$_getData.props;\n                cacheKey = _yield$this$_getData.cacheKey;\n\n                // Only bust the data cache for SSP routes although\n                // middleware can skip cache per request with\n                // x-middleware-cache: no-cache as well\n                if (routeInfo.__N_SSP && fetchNextDataParams.dataHref && cacheKey) {\n                  delete this.sdc[cacheKey];\n                } // we kick off a HEAD request in the background\n                // when a non-prefetch request is made to signal revalidation\n\n\n                if (!this.isPreview && routeInfo.__N_SSG && false && 0) {}\n\n                props.pageProps = Object.assign({}, props.pageProps);\n                routeInfo.props = props;\n                routeInfo.route = route;\n                routeInfo.query = query;\n                routeInfo.resolvedAs = resolvedAs;\n                this.components[route] = routeInfo;\n                return _context5.abrupt(\"return\", routeInfo);\n\n              case 69:\n                _context5.prev = 69;\n                _context5.t2 = _context5[\"catch\"](2);\n                return _context5.abrupt(\"return\", this.handleRouteInfoError((0, _iserror.getProperError)(_context5.t2), pathname, query, as, routeProps));\n\n              case 72:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[2, 69]]);\n      }));\n\n      function getRouteInfo(_x18) {\n        return _getRouteInfo.apply(this, arguments);\n      }\n\n      return getRouteInfo;\n    }()\n  }, {\n    key: \"set\",\n    value: function set(state, data, resetScroll) {\n      this.state = state;\n      return this.sub(data, this.components[\"/_app\"].Component, resetScroll);\n    }\n    /**\n    * Callback to execute before replacing router state\n    * @param cb callback to be executed\n    */\n\n  }, {\n    key: \"beforePopState\",\n    value: function beforePopState(cb) {\n      this._bps = cb;\n    }\n  }, {\n    key: \"onlyAHashChange\",\n    value: function onlyAHashChange(as) {\n      if (!this.asPath) return false;\n\n      var _this$asPath$split = this.asPath.split(\"#\"),\n          _this$asPath$split2 = _slicedToArray(_this$asPath$split, 2),\n          oldUrlNoHash = _this$asPath$split2[0],\n          oldHash = _this$asPath$split2[1];\n\n      var _as$split = as.split(\"#\"),\n          _as$split2 = _slicedToArray(_as$split, 2),\n          newUrlNoHash = _as$split2[0],\n          newHash = _as$split2[1]; // Makes sure we scroll to the provided hash if the url/hash are the same\n\n\n      if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n        return true;\n      } // If the urls are change, there's more than a hash change\n\n\n      if (oldUrlNoHash !== newUrlNoHash) {\n        return false;\n      } // If the hash has changed, then it's a hash only change.\n      // This check is necessary to handle both the enter and\n      // leave hash === '' cases. The identity case falls through\n      // and is treated as a next reload.\n\n\n      return oldHash !== newHash;\n    }\n  }, {\n    key: \"scrollToHash\",\n    value: function scrollToHash(as) {\n      var _as$split3 = as.split(\"#\"),\n          _as$split4 = _slicedToArray(_as$split3, 2),\n          _as$split4$ = _as$split4[1],\n          hash = _as$split4$ === void 0 ? \"\" : _as$split4$; // Scroll to top if the hash is just `#` with no value or `#top`\n      // To mirror browsers\n\n\n      if (hash === \"\" || hash === \"top\") {\n        (0, _handlesmoothscroll.handleSmoothScroll)(function () {\n          return window.scrollTo(0, 0);\n        });\n        return;\n      } // Decode hash to make non-latin anchor works.\n\n\n      var rawHash = decodeURIComponent(hash); // First we check if the element by id is found\n\n      var idEl = document.getElementById(rawHash);\n\n      if (idEl) {\n        (0, _handlesmoothscroll.handleSmoothScroll)(function () {\n          return idEl.scrollIntoView();\n        });\n        return;\n      } // If there's no element with the id, we check the `name` property\n      // To mirror browsers\n\n\n      var nameEl = document.getElementsByName(rawHash)[0];\n\n      if (nameEl) {\n        (0, _handlesmoothscroll.handleSmoothScroll)(function () {\n          return nameEl.scrollIntoView();\n        });\n      }\n    }\n  }, {\n    key: \"urlIsNew\",\n    value: function urlIsNew(asPath) {\n      return this.asPath !== asPath;\n    }\n    /**\n    * Prefetch page code, you may wait for the data during page rendering.\n    * This feature only works in production!\n    * @param url the href of prefetched page\n    * @param asPath the as path of the prefetched page\n    */\n\n  }, {\n    key: \"prefetch\",\n    value: function () {\n      var _prefetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(url, asPath, options) {\n        var _this3 = this;\n\n        var parsed, urlPathname, pathname, query, originalPathname, parsedAs, localePathResult, pages, resolvedAs, locale, isMiddlewareMatch, rewrites, _yield, rewritesResult, data, route;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (asPath === void 0) asPath = url;\n                if (options === void 0) options = {}; // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n                if (false) {}\n\n                return _context6.abrupt(\"return\");\n\n              case 4:\n                if (!( true && (0, _isbot.isBot)(window.navigator.userAgent))) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 6:\n                parsed = (0, _parserelativeurl.parseRelativeUrl)(url);\n                urlPathname = parsed.pathname;\n                pathname = parsed.pathname, query = parsed.query;\n                originalPathname = pathname;\n\n                if (false) {}\n\n                _context6.next = 13;\n                return this.pageLoader.getPageList();\n\n              case 13:\n                pages = _context6.sent;\n                resolvedAs = asPath;\n                locale = typeof options.locale !== \"undefined\" ? options.locale || undefined : this.locale;\n                _context6.next = 18;\n                return _matchesMiddleware({\n                  asPath: asPath,\n                  locale: locale,\n                  router: this\n                });\n\n              case 18:\n                isMiddlewareMatch = _context6.sent;\n\n                if (true) {\n                  _context6.next = 29;\n                  break;\n                }\n\n                _context6.next = 22;\n                return (0, _routeloader.getClientBuildManifest)();\n\n              case 22:\n                _yield = _context6.sent;\n                rewrites = _yield.__rewrites;\n                rewritesResult = (0, _resolverewrites[\"default\"])((0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(asPath, this.locale), true), pages, rewrites, parsed.query, function (p) {\n                  return resolveDynamicRoute(p, pages);\n                }, this.locales);\n\n                if (!rewritesResult.externalDest) {\n                  _context6.next = 27;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 27:\n                if (!isMiddlewareMatch) {\n                  resolvedAs = (0, _removelocale.removeLocale)((0, _removebasepath.removeBasePath)(rewritesResult.asPath), this.locale);\n                }\n\n                if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {\n                  // if this directly matches a page we need to update the href to\n                  // allow the correct page chunk to be loaded\n                  pathname = rewritesResult.resolvedHref;\n                  parsed.pathname = pathname;\n\n                  if (!isMiddlewareMatch) {\n                    url = (0, _formaturl.formatWithValidation)(parsed);\n                  }\n                }\n\n              case 29:\n                parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);\n\n                if ((0, _isdynamic.isDynamicRoute)(parsed.pathname)) {\n                  pathname = parsed.pathname;\n                  parsed.pathname = pathname;\n                  Object.assign(query, (0, _routematcher.getRouteMatcher)((0, _routeregex.getRouteRegex)(parsed.pathname))((0, _parsepath.parsePath)(asPath).pathname) || {});\n\n                  if (!isMiddlewareMatch) {\n                    url = (0, _formaturl.formatWithValidation)(parsed);\n                  }\n                }\n\n                if (true) {\n                  _context6.next = 35;\n                  break;\n                }\n\n                _context6.t0 = null;\n                _context6.next = 38;\n                break;\n\n              case 35:\n                _context6.next = 37;\n                return withMiddlewareEffects({\n                  fetchData: function fetchData() {\n                    return fetchNextData({\n                      dataHref: _this3.pageLoader.getDataHref({\n                        href: (0, _formaturl.formatWithValidation)({\n                          pathname: originalPathname,\n                          query: query\n                        }),\n                        skipInterpolation: true,\n                        asPath: resolvedAs,\n                        locale: locale\n                      }),\n                      hasMiddleware: true,\n                      isServerRender: _this3.isSsr,\n                      parseJSON: true,\n                      inflightCache: _this3.sdc,\n                      persistCache: !_this3.isPreview,\n                      isPrefetch: true\n                    });\n                  },\n                  asPath: asPath,\n                  locale: locale,\n                  router: this\n                });\n\n              case 37:\n                _context6.t0 = _context6.sent;\n\n              case 38:\n                data = _context6.t0;\n\n                /**\n                * If there was a rewrite we apply the effects of the rewrite on the\n                * current parameters for the prefetch.\n                */\n                if ((data == null ? void 0 : data.effect.type) === \"rewrite\") {\n                  parsed.pathname = data.effect.resolvedHref;\n                  pathname = data.effect.resolvedHref;\n                  query = _objectSpread(_objectSpread({}, query), data.effect.parsedAs.query);\n                  resolvedAs = data.effect.parsedAs.pathname;\n                  url = (0, _formaturl.formatWithValidation)(parsed);\n                }\n                /**\n                * If there is a redirect to an external destination then we don't have\n                * to prefetch content as it will be unused.\n                */\n\n\n                if (!((data == null ? void 0 : data.effect.type) === \"redirect-external\")) {\n                  _context6.next = 42;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\");\n\n              case 42:\n                route = (0, _removetrailingslash.removeTrailingSlash)(pathname);\n                _context6.next = 45;\n                return this._bfl(asPath, resolvedAs, options.locale, true);\n\n              case 45:\n                if (!_context6.sent) {\n                  _context6.next = 47;\n                  break;\n                }\n\n                this.components[urlPathname] = {\n                  __appRouter: true\n                };\n\n              case 47:\n                _context6.next = 49;\n                return Promise.all([this.pageLoader._isSsg(route).then(function (isSsg) {\n                  return isSsg ? fetchNextData({\n                    dataHref: (data == null ? void 0 : data.json) ? data == null ? void 0 : data.dataHref : _this3.pageLoader.getDataHref({\n                      href: url,\n                      asPath: resolvedAs,\n                      locale: locale\n                    }),\n                    isServerRender: false,\n                    parseJSON: true,\n                    inflightCache: _this3.sdc,\n                    persistCache: !_this3.isPreview,\n                    isPrefetch: true,\n                    unstable_skipClientCache: options.unstable_skipClientCache || options.priority && !!true\n                  }).then(function () {\n                    return false;\n                  })[\"catch\"](function () {\n                    return false;\n                  }) : false;\n                }), this.pageLoader[options.priority ? \"loadPage\" : \"prefetch\"](route)]);\n\n              case 49:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function prefetch(_x19, _x20, _x21) {\n        return _prefetch.apply(this, arguments);\n      }\n\n      return prefetch;\n    }()\n  }, {\n    key: \"fetchComponent\",\n    value: function () {\n      var _fetchComponent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(route) {\n        var handleCancelled, componentResult;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                handleCancelled = getCancelledHandler({\n                  route: route,\n                  router: this\n                });\n                _context7.prev = 1;\n                _context7.next = 4;\n                return this.pageLoader.loadPage(route);\n\n              case 4:\n                componentResult = _context7.sent;\n                handleCancelled();\n                return _context7.abrupt(\"return\", componentResult);\n\n              case 9:\n                _context7.prev = 9;\n                _context7.t0 = _context7[\"catch\"](1);\n                handleCancelled();\n                throw _context7.t0;\n\n              case 13:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[1, 9]]);\n      }));\n\n      function fetchComponent(_x22) {\n        return _fetchComponent.apply(this, arguments);\n      }\n\n      return fetchComponent;\n    }()\n  }, {\n    key: \"_getData\",\n    value: function _getData(fn) {\n      var _this4 = this;\n\n      var cancelled = false;\n\n      var cancel = function cancel() {\n        cancelled = true;\n      };\n\n      this.clc = cancel;\n      return fn().then(function (data) {\n        if (cancel === _this4.clc) {\n          _this4.clc = null;\n        }\n\n        if (cancelled) {\n          var err = new Error(\"Loading initial props cancelled\");\n          err.cancelled = true;\n          throw err;\n        }\n\n        return data;\n      });\n    }\n  }, {\n    key: \"_getFlightData\",\n    value: function _getFlightData(dataHref) {\n      // Do not cache RSC flight response since it's not a static resource\n      return fetchNextData({\n        dataHref: dataHref,\n        isServerRender: true,\n        parseJSON: false,\n        inflightCache: this.sdc,\n        persistCache: false,\n        isPrefetch: false\n      }).then(function (param) {\n        var text = param.text;\n        return {\n          data: text\n        };\n      });\n    }\n  }, {\n    key: \"getInitialProps\",\n    value: function getInitialProps(Component, ctx) {\n      var App = this.components[\"/_app\"].Component;\n\n      var AppTree = this._wrapApp(App);\n\n      ctx.AppTree = AppTree;\n      return (0, _utils.loadGetInitialProps)(App, {\n        AppTree: AppTree,\n        Component: Component,\n        router: this,\n        ctx: ctx\n      });\n    }\n  }, {\n    key: \"route\",\n    get: function get() {\n      return this.state.route;\n    }\n  }, {\n    key: \"pathname\",\n    get: function get() {\n      return this.state.pathname;\n    }\n  }, {\n    key: \"query\",\n    get: function get() {\n      return this.state.query;\n    }\n  }, {\n    key: \"asPath\",\n    get: function get() {\n      return this.state.asPath;\n    }\n  }, {\n    key: \"locale\",\n    get: function get() {\n      return this.state.locale;\n    }\n  }, {\n    key: \"isFallback\",\n    get: function get() {\n      return this.state.isFallback;\n    }\n  }, {\n    key: \"isPreview\",\n    get: function get() {\n      return this.state.isPreview;\n    }\n  }]);\n\n  return Router;\n}();\n\n(function () {\n  Router.events = (0, _mitt[\"default\"])();\n})();\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTMuNC40X0BiYWJlbCtjb3JlQDcuMjcuNF9yZWFjdC1kb21AMTguMi4wX3JlYWN0QDE4LjIuMF9fcmVhY3RAMTguMi4wL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9yb3V0ZXIvcm91dGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ2E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNiQSw4Q0FBNkM7RUFDekNHLEtBQUssRUFBRTtBQURrQyxDQUE3QztBQUdBLE1BQU1DLENBQU47O0FBS0EsU0FBU0csT0FBVCxDQUFpQkMsTUFBakIsRUFBeUJDLEdBQXpCLEVBQThCO0VBQzFCLEtBQUksSUFBSUMsSUFBUixJQUFnQkQsR0FBaEI7SUFBb0JULE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQk8sTUFBdEIsRUFBOEJFLElBQTlCLEVBQW9DO01BQ3BEQyxVQUFVLEVBQUUsSUFEd0M7TUFFcERDLEdBQUcsRUFBRUgsR0FBRyxDQUFDQyxJQUFEO0lBRjRDLENBQXBDO0VBQXBCO0FBSUg7O0FBQ0RILE9BQU8sQ0FBQ0wsT0FBRCxFQUFVO0VBQ2IsV0FBUyxvQkFBVztJQUNoQixPQUFPVyxNQUFQO0VBQ0gsQ0FIWTtFQUliUixpQkFBaUIsRUFBRSw2QkFBVztJQUMxQixPQUFPQSxrQkFBUDtFQUNILENBTlk7RUFPYkMsU0FBUyxFQUFFLHFCQUFXO0lBQ2xCLE9BQU9BLFVBQVA7RUFDSDtBQVRZLENBQVYsQ0FBUDs7QUFXQSxJQUFNUSx3QkFBd0IsR0FBR0MsbUJBQU8sQ0FBQyxzSkFBRCxDQUF4Qzs7QUFDQSxJQUFNQyx5QkFBeUIsR0FBR0QsbUJBQU8sQ0FBQyx3SkFBRCxDQUF6Qzs7QUFDQSxJQUFNRSxvQkFBb0IsR0FBR0YsbUJBQU8sQ0FBQyxrTkFBRCxDQUFwQzs7QUFDQSxJQUFNRyxZQUFZLEdBQUdILG1CQUFPLENBQUMsdUxBQUQsQ0FBNUI7O0FBQ0EsSUFBTUksT0FBTyxHQUFHSixtQkFBTyxDQUFDLDJL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WixPQUFPLEtBQUtTLEtBQUwsQ0FBV1AsU0FBbEI7SUFDSDs7Ozs7O0FBeUxMLENBQUMsWUFBSTtFQUNEaE4sTUFBTSxDQUFDOFAsTUFBUCxHQUFnQixDQUFDLEdBQUduUCxLQUFLLFdBQVQsR0FBaEI7QUFDSCxDQUZEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxMy40LjRfQGJhYmVsK2NvcmVANy4yNy40X3JlYWN0LWRvbUAxOC4yLjBfcmVhY3RAMTguMi4wX19yZWFjdEAxOC4yLjAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL3JvdXRlci9yb3V0ZXIuanM/ODY5YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTpuby1jb25zb2xlXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbjAgJiYgKG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgbWF0Y2hlc01pZGRsZXdhcmU6IG51bGwsXG4gICAgY3JlYXRlS2V5OiBudWxsXG59KTtcbmZ1bmN0aW9uIF9leHBvcnQodGFyZ2V0LCBhbGwpIHtcbiAgICBmb3IodmFyIG5hbWUgaW4gYWxsKU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBhbGxbbmFtZV1cbiAgICB9KTtcbn1cbl9leHBvcnQoZXhwb3J0cywge1xuICAgIGRlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUm91dGVyO1xuICAgIH0sXG4gICAgbWF0Y2hlc01pZGRsZXdhcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc01pZGRsZXdhcmU7XG4gICAgfSxcbiAgICBjcmVhdGVLZXk6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlS2V5O1xuICAgIH1cbn0pO1xuY29uc3QgX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0ID0gcmVxdWlyZShcIkBzd2MvaGVscGVycy9fL19pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdFwiKTtcbmNvbnN0IF9pbnRlcm9wX3JlcXVpcmVfd2lsZGNhcmQgPSByZXF1aXJlKFwiQHN3Yy9oZWxwZXJzL18vX2ludGVyb3BfcmVxdWlyZV93aWxkY2FyZFwiKTtcbmNvbnN0IF9yZW1vdmV0cmFpbGluZ3NsYXNoID0gcmVxdWlyZShcIi4vdXRpbHMvcmVtb3ZlLXRyYWlsaW5nLXNsYXNoXCIpO1xuY29uc3QgX3JvdXRlbG9hZGVyID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9yb3V0ZS1sb2FkZXJcIik7XG5jb25zdCBfc2NyaXB0ID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9zY3JpcHRcIik7XG5jb25zdCBfaXNlcnJvciA9IC8qI19fUFVSRV9fKi8gX2ludGVyb3BfcmVxdWlyZV93aWxkY2FyZC5fKHJlcXVpcmUoXCIuLi8uLi8uLi9saWIvaXMtZXJyb3JcIikpO1xuY29uc3QgX2Rlbm9ybWFsaXplcGFnZXBhdGggPSByZXF1aXJlKFwiLi4vcGFnZS1wYXRoL2Rlbm9ybWFsaXplLXBhZ2UtcGF0aFwiKTtcbmNvbnN0IF9ub3JtYWxpemVsb2NhbGVwYXRoID0gcmVxdWlyZShcIi4uL2kxOG4vbm9ybWFsaXplLWxvY2FsZS1wYXRoXCIpO1xuY29uc3QgX21pdHQgPSAvKiNfX1BVUkVfXyovIF9pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdC5fKHJlcXVpcmUoXCIuLi9taXR0XCIpKTtcbmNvbnN0IF91dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IF9pc2R5bmFtaWMgPSByZXF1aXJlKFwiLi91dGlscy9pcy1keW5hbWljXCIpO1xuY29uc3QgX3BhcnNlcmVsYXRpdmV1cmwgPSByZXF1aXJlKFwiLi91dGlscy9wYXJzZS1yZWxhdGl2ZS11cmxcIik7XG5jb25zdCBfcmVzb2x2ZXJld3JpdGVzID0gLyojX19QVVJFX18qLyBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQuXyhyZXF1aXJlKFwiLi91dGlscy9yZXNvbHZlLXJld3JpdGVzXCIpKTtcbmNvbnN0IF9yb3V0ZW1hdGNoZXIgPSByZXF1aXJlKFwiLi91dGlscy9yb3V0ZS1tYXRjaGVyXCIpO1xuY29uc3QgX3JvdXRlcmVnZXggPSByZXF1aXJlKFwiLi91dGlscy9yb3V0ZS1yZWdleFwiKTtcbmNvbnN0IF9mb3JtYXR1cmwgPSByZXF1aXJlKFwiLi91dGlscy9mb3JtYXQtdXJsXCIpO1xuY29uc3QgX2RldGVjdGRvbWFpbmxvY2FsZSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jbGllbnQvZGV0ZWN0LWRvbWFpbi1sb2NhbGVcIik7XG5jb25zdCBfcGFyc2VwYXRoID0gcmVxdWlyZShcIi4vdXRpbHMvcGFyc2UtcGF0aFwiKTtcbmNvbnN0IF9hZGRsb2NhbGUgPSByZXF1aXJlKFwiLi4vLi4vLi4vY2xpZW50L2FkZC1sb2NhbGVcIik7XG5jb25zdCBfcmVtb3ZlbG9jYWxlID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9yZW1vdmUtbG9jYWxlXCIpO1xuY29uc3QgX3JlbW92ZWJhc2VwYXRoID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9yZW1vdmUtYmFzZS1wYXRoXCIpO1xuY29uc3QgX2FkZGJhc2VwYXRoID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9hZGQtYmFzZS1wYXRoXCIpO1xuY29uc3QgX2hhc2Jhc2VwYXRoID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9oYXMtYmFzZS1wYXRoXCIpO1xuY29uc3QgX2lzYXBpcm91dGUgPSByZXF1aXJlKFwiLi4vLi4vLi4vbGliL2lzLWFwaS1yb3V0ZVwiKTtcbmNvbnN0IF9nZXRuZXh0cGF0aG5hbWVpbmZvID0gcmVxdWlyZShcIi4vdXRpbHMvZ2V0LW5leHQtcGF0aG5hbWUtaW5mb1wiKTtcbmNvbnN0IF9mb3JtYXRuZXh0cGF0aG5hbWVpbmZvID0gcmVxdWlyZShcIi4vdXRpbHMvZm9ybWF0LW5leHQtcGF0aG5hbWUtaW5mb1wiKTtcbmNvbnN0IF9jb21wYXJlc3RhdGVzID0gcmVxdWlyZShcIi4vdXRpbHMvY29tcGFyZS1zdGF0ZXNcIik7XG5jb25zdCBfaXNsb2NhbHVybCA9IHJlcXVpcmUoXCIuL3V0aWxzL2lzLWxvY2FsLXVybFwiKTtcbmNvbnN0IF9pc2JvdCA9IHJlcXVpcmUoXCIuL3V0aWxzL2lzLWJvdFwiKTtcbmNvbnN0IF9vbWl0ID0gcmVxdWlyZShcIi4vdXRpbHMvb21pdFwiKTtcbmNvbnN0IF9yZXNvbHZlaHJlZiA9IHJlcXVpcmUoXCIuL3V0aWxzL3Jlc29sdmUtaHJlZlwiKTtcbmNvbnN0IF9pbnRlcnBvbGF0ZWFzID0gcmVxdWlyZShcIi4vdXRpbHMvaW50ZXJwb2xhdGUtYXNcIik7XG5jb25zdCBfaGFuZGxlc21vb3Roc2Nyb2xsID0gcmVxdWlyZShcIi4vdXRpbHMvaGFuZGxlLXNtb290aC1zY3JvbGxcIik7XG5mdW5jdGlvbiBidWlsZENhbmNlbGxhdGlvbkVycm9yKCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBFcnJvcihcIlJvdXRlIENhbmNlbGxlZFwiKSwge1xuICAgICAgICBjYW5jZWxsZWQ6IHRydWVcbiAgICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIG1hdGNoZXNNaWRkbGV3YXJlKG9wdGlvbnMpIHtcbiAgICBjb25zdCBtYXRjaGVycyA9IGF3YWl0IFByb21pc2UucmVzb2x2ZShvcHRpb25zLnJvdXRlci5wYWdlTG9hZGVyLmdldE1pZGRsZXdhcmUoKSk7XG4gICAgaWYgKCFtYXRjaGVycykgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHsgcGF0aG5hbWU6IGFzUGF0aG5hbWUgIH0gPSAoMCwgX3BhcnNlcGF0aC5wYXJzZVBhdGgpKG9wdGlvbnMuYXNQYXRoKTtcbiAgICAvLyByZW1vdmUgYmFzZVBhdGggZmlyc3Qgc2luY2UgcGF0aCBwcmVmaXggaGFzIHRvIGJlIGluIHRoZSBvcmRlciBvZiBgLyR7YmFzZVBhdGh9LyR7bG9jYWxlfWBcbiAgICBjb25zdCBjbGVhbmVkQXMgPSAoMCwgX2hhc2Jhc2VwYXRoLmhhc0Jhc2VQYXRoKShhc1BhdGhuYW1lKSA/ICgwLCBfcmVtb3ZlYmFzZXBhdGgucmVtb3ZlQmFzZVBhdGgpKGFzUGF0aG5hbWUpIDogYXNQYXRobmFtZTtcbiAgICBjb25zdCBhc1dpdGhCYXNlUGF0aEFuZExvY2FsZSA9ICgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKCgwLCBfYWRkbG9jYWxlLmFkZExvY2FsZSkoY2xlYW5lZEFzLCBvcHRpb25zLmxvY2FsZSkpO1xuICAgIC8vIENoZWNrIG9ubHkgcGF0aCBtYXRjaCBvbiBjbGllbnQuIE1hdGNoaW5nIFwiaGFzXCIgc2hvdWxkIGJlIGRvbmUgb24gc2VydmVyXG4gICAgLy8gd2hlcmUgd2UgY2FuIGFjY2VzcyBtb3JlIGluZm8gc3VjaCBhcyBoZWFkZXJzLCBIdHRwT25seSBjb29raWUsIGV0Yy5cbiAgICByZXR1cm4gbWF0Y2hlcnMuc29tZSgobSk9Pm5ldyBSZWdFeHAobS5yZWdleHApLnRlc3QoYXNXaXRoQmFzZVBhdGhBbmRMb2NhbGUpKTtcbn1cbmZ1bmN0aW9uIHN0cmlwT3JpZ2luKHVybCkge1xuICAgIGNvbnN0IG9yaWdpbiA9ICgwLCBfdXRpbHMuZ2V0TG9jYXRpb25PcmlnaW4pKCk7XG4gICAgcmV0dXJuIHVybC5zdGFydHNXaXRoKG9yaWdpbikgPyB1cmwuc3Vic3RyaW5nKG9yaWdpbi5sZW5ndGgpIDogdXJsO1xufVxuZnVuY3Rpb24gcHJlcGFyZVVybEFzKHJvdXRlciwgdXJsLCBhcykge1xuICAgIC8vIElmIHVybCBhbmQgYXMgcHJvdmlkZWQgYXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uLFxuICAgIC8vIHdlJ2xsIGZvcm1hdCB0aGVtIGludG8gdGhlIHN0cmluZyB2ZXJzaW9uIGhlcmUuXG4gICAgbGV0IFtyZXNvbHZlZEhyZWYsIHJlc29sdmVkQXNdID0gKDAsIF9yZXNvbHZlaHJlZi5yZXNvbHZlSHJlZikocm91dGVyLCB1cmwsIHRydWUpO1xuICAgIGNvbnN0IG9yaWdpbiA9ICgwLCBfdXRpbHMuZ2V0TG9jYXRpb25PcmlnaW4pKCk7XG4gICAgY29uc3QgaHJlZldhc0Fic29sdXRlID0gcmVzb2x2ZWRIcmVmLnN0YXJ0c1dpdGgob3JpZ2luKTtcbiAgICBjb25zdCBhc1dhc0Fic29sdXRlID0gcmVzb2x2ZWRBcyAmJiByZXNvbHZlZEFzLnN0YXJ0c1dpdGgob3JpZ2luKTtcbiAgICByZXNvbHZlZEhyZWYgPSBzdHJpcE9yaWdpbihyZXNvbHZlZEhyZWYpO1xuICAgIHJlc29sdmVkQXMgPSByZXNvbHZlZEFzID8gc3RyaXBPcmlnaW4ocmVzb2x2ZWRBcykgOiByZXNvbHZlZEFzO1xuICAgIGNvbnN0IHByZXBhcmVkVXJsID0gaHJlZldhc0Fic29sdXRlID8gcmVzb2x2ZWRIcmVmIDogKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkocmVzb2x2ZWRIcmVmKTtcbiAgICBjb25zdCBwcmVwYXJlZEFzID0gYXMgPyBzdHJpcE9yaWdpbigoMCwgX3Jlc29sdmVocmVmLnJlc29sdmVIcmVmKShyb3V0ZXIsIGFzKSkgOiByZXNvbHZlZEFzIHx8IHJlc29sdmVkSHJlZjtcbiAgICByZXR1cm4ge1xuICAgICAgICB1cmw6IHByZXBhcmVkVXJsLFxuICAgICAgICBhczogYXNXYXNBYnNvbHV0ZSA/IHByZXBhcmVkQXMgOiAoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKShwcmVwYXJlZEFzKVxuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlRHluYW1pY1JvdXRlKHBhdGhuYW1lLCBwYWdlcykge1xuICAgIGNvbnN0IGNsZWFuUGF0aG5hbWUgPSAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkoKDAsIF9kZW5vcm1hbGl6ZXBhZ2VwYXRoLmRlbm9ybWFsaXplUGFnZVBhdGgpKHBhdGhuYW1lKSk7XG4gICAgaWYgKGNsZWFuUGF0aG5hbWUgPT09IFwiLzQwNFwiIHx8IGNsZWFuUGF0aG5hbWUgPT09IFwiL19lcnJvclwiKSB7XG4gICAgICAgIHJldHVybiBwYXRobmFtZTtcbiAgICB9XG4gICAgLy8gaGFuZGxlIHJlc29sdmluZyBocmVmIGZvciBkeW5hbWljIHJvdXRlc1xuICAgIGlmICghcGFnZXMuaW5jbHVkZXMoY2xlYW5QYXRobmFtZSkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuICAgICAgICBwYWdlcy5zb21lKChwYWdlKT0+e1xuICAgICAgICAgICAgaWYgKCgwLCBfaXNkeW5hbWljLmlzRHluYW1pY1JvdXRlKShwYWdlKSAmJiAoMCwgX3JvdXRlcmVnZXguZ2V0Um91dGVSZWdleCkocGFnZSkucmUudGVzdChjbGVhblBhdGhuYW1lKSkge1xuICAgICAgICAgICAgICAgIHBhdGhuYW1lID0gcGFnZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkocGF0aG5hbWUpO1xufVxuZnVuY3Rpb24gZ2V0TWlkZGxld2FyZURhdGEoc291cmNlLCByZXNwb25zZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IG5leHRDb25maWcgPSB7XG4gICAgICAgIGJhc2VQYXRoOiBvcHRpb25zLnJvdXRlci5iYXNlUGF0aCxcbiAgICAgICAgaTE4bjoge1xuICAgICAgICAgICAgbG9jYWxlczogb3B0aW9ucy5yb3V0ZXIubG9jYWxlc1xuICAgICAgICB9LFxuICAgICAgICB0cmFpbGluZ1NsYXNoOiBCb29sZWFuKHByb2Nlc3MuZW52Ll9fTkVYVF9UUkFJTElOR19TTEFTSClcbiAgICB9O1xuICAgIGNvbnN0IHJld3JpdGVIZWFkZXIgPSByZXNwb25zZS5oZWFkZXJzLmdldChcIngtbmV4dGpzLXJld3JpdGVcIik7XG4gICAgbGV0IHJld3JpdGVUYXJnZXQgPSByZXdyaXRlSGVhZGVyIHx8IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwieC1uZXh0anMtbWF0Y2hlZC1wYXRoXCIpO1xuICAgIGNvbnN0IG1hdGNoZWRQYXRoID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJ4LW1hdGNoZWQtcGF0aFwiKTtcbiAgICBpZiAobWF0Y2hlZFBhdGggJiYgIXJld3JpdGVUYXJnZXQgJiYgIW1hdGNoZWRQYXRoLmluY2x1ZGVzKFwiX19uZXh0X2RhdGFfY2F0Y2hhbGxcIikgJiYgIW1hdGNoZWRQYXRoLmluY2x1ZGVzKFwiL19lcnJvclwiKSAmJiAhbWF0Y2hlZFBhdGguaW5jbHVkZXMoXCIvNDA0XCIpKSB7XG4gICAgICAgIC8vIGxldmVyYWdlIHgtbWF0Y2hlZC1wYXRoIHRvIGRldGVjdCBuZXh0LmNvbmZpZy5qcyByZXdyaXRlc1xuICAgICAgICByZXdyaXRlVGFyZ2V0ID0gbWF0Y2hlZFBhdGg7XG4gICAgfVxuICAgIGlmIChyZXdyaXRlVGFyZ2V0KSB7XG4gICAgICAgIGlmIChyZXdyaXRlVGFyZ2V0LnN0YXJ0c1dpdGgoXCIvXCIpIHx8IHByb2Nlc3MuZW52Ll9fTkVYVF9FWFRFUk5BTF9NSURETEVXQVJFX1JFV1JJVEVfUkVTT0xWRSkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkUmV3cml0ZVRhcmdldCA9ICgwLCBfcGFyc2VyZWxhdGl2ZXVybC5wYXJzZVJlbGF0aXZlVXJsKShyZXdyaXRlVGFyZ2V0KTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGhuYW1lSW5mbyA9ICgwLCBfZ2V0bmV4dHBhdGhuYW1laW5mby5nZXROZXh0UGF0aG5hbWVJbmZvKShwYXJzZWRSZXdyaXRlVGFyZ2V0LnBhdGhuYW1lLCB7XG4gICAgICAgICAgICAgICAgbmV4dENvbmZpZyxcbiAgICAgICAgICAgICAgICBwYXJzZURhdGE6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IGZzUGF0aG5hbWUgPSAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkocGF0aG5hbWVJbmZvLnBhdGhuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5yb3V0ZXIucGFnZUxvYWRlci5nZXRQYWdlTGlzdCgpLFxuICAgICAgICAgICAgICAgICgwLCBfcm91dGVsb2FkZXIuZ2V0Q2xpZW50QnVpbGRNYW5pZmVzdCkoKVxuICAgICAgICAgICAgXSkudGhlbigocGFyYW0pPT57XG4gICAgICAgICAgICAgICAgbGV0IFtwYWdlcywgeyBfX3Jld3JpdGVzOiByZXdyaXRlcyAgfV0gPSBwYXJhbTtcbiAgICAgICAgICAgICAgICBsZXQgYXMgPSAoMCwgX2FkZGxvY2FsZS5hZGRMb2NhbGUpKHBhdGhuYW1lSW5mby5wYXRobmFtZSwgcGF0aG5hbWVJbmZvLmxvY2FsZSk7XG4gICAgICAgICAgICAgICAgaWYgKCgwLCBfaXNkeW5hbWljLmlzRHluYW1pY1JvdXRlKShhcykgfHwgIXJld3JpdGVIZWFkZXIgJiYgcGFnZXMuaW5jbHVkZXMoKDAsIF9ub3JtYWxpemVsb2NhbGVwYXRoLm5vcm1hbGl6ZUxvY2FsZVBhdGgpKCgwLCBfcmVtb3ZlYmFzZXBhdGgucmVtb3ZlQmFzZVBhdGgpKGFzKSwgb3B0aW9ucy5yb3V0ZXIubG9jYWxlcykucGF0aG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlZFNvdXJjZSA9ICgwLCBfZ2V0bmV4dHBhdGhuYW1laW5mby5nZXROZXh0UGF0aG5hbWVJbmZvKSgoMCwgX3BhcnNlcmVsYXRpdmV1cmwucGFyc2VSZWxhdGl2ZVVybCkoc291cmNlKS5wYXRobmFtZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dENvbmZpZzogcHJvY2Vzcy5lbnYuX19ORVhUX0hBU19SRVdSSVRFUyA/IHVuZGVmaW5lZCA6IG5leHRDb25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZURhdGE6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGFzID0gKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkocGFyc2VkU291cmNlLnBhdGhuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkUmV3cml0ZVRhcmdldC5wYXRobmFtZSA9IGFzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0hBU19SRVdSSVRFUykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSAoMCwgX3Jlc29sdmVyZXdyaXRlcy5kZWZhdWx0KShhcywgcGFnZXMsIHJld3JpdGVzLCBwYXJzZWRSZXdyaXRlVGFyZ2V0LnF1ZXJ5LCAocGF0aCk9PnJlc29sdmVEeW5hbWljUm91dGUocGF0aCwgcGFnZXMpLCBvcHRpb25zLnJvdXRlci5sb2NhbGVzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5tYXRjaGVkUGFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkUmV3cml0ZVRhcmdldC5wYXRobmFtZSA9IHJlc3VsdC5wYXJzZWRBcy5wYXRobmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzID0gcGFyc2VkUmV3cml0ZVRhcmdldC5wYXRobmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocGFyc2VkUmV3cml0ZVRhcmdldC5xdWVyeSwgcmVzdWx0LnBhcnNlZEFzLnF1ZXJ5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXBhZ2VzLmluY2x1ZGVzKGZzUGF0aG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkUGF0aG5hbWUgPSByZXNvbHZlRHluYW1pY1JvdXRlKGZzUGF0aG5hbWUsIHBhZ2VzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc29sdmVkUGF0aG5hbWUgIT09IGZzUGF0aG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZzUGF0aG5hbWUgPSByZXNvbHZlZFBhdGhuYW1lO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkSHJlZiA9ICFwYWdlcy5pbmNsdWRlcyhmc1BhdGhuYW1lKSA/IHJlc29sdmVEeW5hbWljUm91dGUoKDAsIF9ub3JtYWxpemVsb2NhbGVwYXRoLm5vcm1hbGl6ZUxvY2FsZVBhdGgpKCgwLCBfcmVtb3ZlYmFzZXBhdGgucmVtb3ZlQmFzZVBhdGgpKHBhcnNlZFJld3JpdGVUYXJnZXQucGF0aG5hbWUpLCBvcHRpb25zLnJvdXRlci5sb2NhbGVzKS5wYXRobmFtZSwgcGFnZXMpIDogZnNQYXRobmFtZTtcbiAgICAgICAgICAgICAgICBpZiAoKDAsIF9pc2R5bmFtaWMuaXNEeW5hbWljUm91dGUpKHJlc29sdmVkSHJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlcyA9ICgwLCBfcm91dGVtYXRjaGVyLmdldFJvdXRlTWF0Y2hlcikoKDAsIF9yb3V0ZXJlZ2V4LmdldFJvdXRlUmVnZXgpKHJlc29sdmVkSHJlZikpKGFzKTtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihwYXJzZWRSZXdyaXRlVGFyZ2V0LnF1ZXJ5LCBtYXRjaGVzIHx8IHt9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZXdyaXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZEFzOiBwYXJzZWRSZXdyaXRlVGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZEhyZWZcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3JjID0gKDAsIF9wYXJzZXBhdGgucGFyc2VQYXRoKShzb3VyY2UpO1xuICAgICAgICBjb25zdCBwYXRobmFtZSA9ICgwLCBfZm9ybWF0bmV4dHBhdGhuYW1laW5mby5mb3JtYXROZXh0UGF0aG5hbWVJbmZvKSh7XG4gICAgICAgICAgICAuLi4oMCwgX2dldG5leHRwYXRobmFtZWluZm8uZ2V0TmV4dFBhdGhuYW1lSW5mbykoc3JjLnBhdGhuYW1lLCB7XG4gICAgICAgICAgICAgICAgbmV4dENvbmZpZyxcbiAgICAgICAgICAgICAgICBwYXJzZURhdGE6IHRydWVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZGVmYXVsdExvY2FsZTogb3B0aW9ucy5yb3V0ZXIuZGVmYXVsdExvY2FsZSxcbiAgICAgICAgICAgIGJ1aWxkSWQ6IFwiXCJcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgICAgdHlwZTogXCJyZWRpcmVjdC1leHRlcm5hbFwiLFxuICAgICAgICAgICAgZGVzdGluYXRpb246IFwiXCIgKyBwYXRobmFtZSArIHNyYy5xdWVyeSArIHNyYy5oYXNoXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCByZWRpcmVjdFRhcmdldCA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwieC1uZXh0anMtcmVkaXJlY3RcIik7XG4gICAgaWYgKHJlZGlyZWN0VGFyZ2V0KSB7XG4gICAgICAgIGlmIChyZWRpcmVjdFRhcmdldC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgICAgICAgY29uc3Qgc3JjID0gKDAsIF9wYXJzZXBhdGgucGFyc2VQYXRoKShyZWRpcmVjdFRhcmdldCk7XG4gICAgICAgICAgICBjb25zdCBwYXRobmFtZSA9ICgwLCBfZm9ybWF0bmV4dHBhdGhuYW1laW5mby5mb3JtYXROZXh0UGF0aG5hbWVJbmZvKSh7XG4gICAgICAgICAgICAgICAgLi4uKDAsIF9nZXRuZXh0cGF0aG5hbWVpbmZvLmdldE5leHRQYXRobmFtZUluZm8pKHNyYy5wYXRobmFtZSwge1xuICAgICAgICAgICAgICAgICAgICBuZXh0Q29uZmlnLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZURhdGE6IHRydWVcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0TG9jYWxlOiBvcHRpb25zLnJvdXRlci5kZWZhdWx0TG9jYWxlLFxuICAgICAgICAgICAgICAgIGJ1aWxkSWQ6IFwiXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJyZWRpcmVjdC1pbnRlcm5hbFwiLFxuICAgICAgICAgICAgICAgIG5ld0FzOiBcIlwiICsgcGF0aG5hbWUgKyBzcmMucXVlcnkgKyBzcmMuaGFzaCxcbiAgICAgICAgICAgICAgICBuZXdVcmw6IFwiXCIgKyBwYXRobmFtZSArIHNyYy5xdWVyeSArIHNyYy5oYXNoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtcbiAgICAgICAgICAgIHR5cGU6IFwicmVkaXJlY3QtZXh0ZXJuYWxcIixcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uOiByZWRpcmVjdFRhcmdldFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIHR5cGU6IFwibmV4dFwiXG4gICAgfSk7XG59XG5hc3luYyBmdW5jdGlvbiB3aXRoTWlkZGxld2FyZUVmZmVjdHMob3B0aW9ucykge1xuICAgIGNvbnN0IG1hdGNoZXMgPSBhd2FpdCBtYXRjaGVzTWlkZGxld2FyZShvcHRpb25zKTtcbiAgICBpZiAoIW1hdGNoZXMgfHwgIW9wdGlvbnMuZmV0Y2hEYXRhKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgb3B0aW9ucy5mZXRjaERhdGEoKTtcbiAgICAgICAgY29uc3QgZWZmZWN0ID0gYXdhaXQgZ2V0TWlkZGxld2FyZURhdGEoZGF0YS5kYXRhSHJlZiwgZGF0YS5yZXNwb25zZSwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhSHJlZjogZGF0YS5kYXRhSHJlZixcbiAgICAgICAgICAgIGpzb246IGRhdGEuanNvbixcbiAgICAgICAgICAgIHJlc3BvbnNlOiBkYXRhLnJlc3BvbnNlLFxuICAgICAgICAgICAgdGV4dDogZGF0YS50ZXh0LFxuICAgICAgICAgICAgY2FjaGVLZXk6IGRhdGEuY2FjaGVLZXksXG4gICAgICAgICAgICBlZmZlY3RcbiAgICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8qKlxuICAgICAqIFRPRE86IFJldmlzaXQgdGhpcyBpbiB0aGUgZnV0dXJlLlxuICAgICAqIEZvciBub3cgd2Ugd2lsbCBub3QgY29uc2lkZXIgbWlkZGxld2FyZSBkYXRhIGVycm9ycyB0byBiZSBmYXRhbC5cbiAgICAgKiBtYXliZSB3ZSBzaG91bGQgcmV2aXNpdCBpbiB0aGUgZnV0dXJlLlxuICAgICAqLyByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5jb25zdCBtYW51YWxTY3JvbGxSZXN0b3JhdGlvbiA9IHByb2Nlc3MuZW52Ll9fTkVYVF9TQ1JPTExfUkVTVE9SQVRJT04gJiYgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBcInNjcm9sbFJlc3RvcmF0aW9uXCIgaW4gd2luZG93Lmhpc3RvcnkgJiYgISFmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgICBsZXQgdiA9IFwiX19uZXh0XCI7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZXF1ZW5jZXNcbiAgICAgICAgcmV0dXJuIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0odiwgdiksIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0odiksIHRydWU7XG4gICAgfSBjYXRjaCAobikge31cbn0oKTtcbmNvbnN0IFNTR19EQVRBX05PVF9GT1VORCA9IFN5bWJvbChcIlNTR19EQVRBX05PVF9GT1VORFwiKTtcbmZ1bmN0aW9uIGZldGNoUmV0cnkodXJsLCBhdHRlbXB0cywgb3B0aW9ucykge1xuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgICAgLy8gQ29va2llcyBhcmUgcmVxdWlyZWQgdG8gYmUgcHJlc2VudCBmb3IgTmV4dC5qcycgU1NHIFwiUHJldmlldyBNb2RlXCIuXG4gICAgICAgIC8vIENvb2tpZXMgbWF5IGFsc28gYmUgcmVxdWlyZWQgZm9yIGBnZXRTZXJ2ZXJTaWRlUHJvcHNgLlxuICAgICAgICAvL1xuICAgICAgICAvLyA+IGBmZXRjaGAgd29u4oCZdCBzZW5kIGNvb2tpZXMsIHVubGVzcyB5b3Ugc2V0IHRoZSBjcmVkZW50aWFscyBpbml0XG4gICAgICAgIC8vID4gb3B0aW9uLlxuICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmV0Y2hfQVBJL1VzaW5nX0ZldGNoXG4gICAgICAgIC8vXG4gICAgICAgIC8vID4gRm9yIG1heGltdW0gYnJvd3NlciBjb21wYXRpYmlsaXR5IHdoZW4gaXQgY29tZXMgdG8gc2VuZGluZyAmXG4gICAgICAgIC8vID4gcmVjZWl2aW5nIGNvb2tpZXMsIGFsd2F5cyBzdXBwbHkgdGhlIGBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJ2BcbiAgICAgICAgLy8gPiBvcHRpb24gaW5zdGVhZCBvZiByZWx5aW5nIG9uIHRoZSBkZWZhdWx0LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ2l0aHViL2ZldGNoI2NhdmVhdHNcbiAgICAgICAgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIixcbiAgICAgICAgbWV0aG9kOiBvcHRpb25zLm1ldGhvZCB8fCBcIkdFVFwiLFxuICAgICAgICBoZWFkZXJzOiBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmhlYWRlcnMsIHtcbiAgICAgICAgICAgIFwieC1uZXh0anMtZGF0YVwiOiBcIjFcIlxuICAgICAgICB9KVxuICAgIH0pLnRoZW4oKHJlc3BvbnNlKT0+e1xuICAgICAgICByZXR1cm4gIXJlc3BvbnNlLm9rICYmIGF0dGVtcHRzID4gMSAmJiByZXNwb25zZS5zdGF0dXMgPj0gNTAwID8gZmV0Y2hSZXRyeSh1cmwsIGF0dGVtcHRzIC0gMSwgb3B0aW9ucykgOiByZXNwb25zZTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRyeVRvUGFyc2VBc0pTT04odGV4dCkge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHRleHQpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGZldGNoTmV4dERhdGEocGFyYW0pIHtcbiAgICBsZXQgeyBkYXRhSHJlZiAsIGluZmxpZ2h0Q2FjaGUgLCBpc1ByZWZldGNoICwgaGFzTWlkZGxld2FyZSAsIGlzU2VydmVyUmVuZGVyICwgcGFyc2VKU09OICwgcGVyc2lzdENhY2hlICwgaXNCYWNrZ3JvdW5kICwgdW5zdGFibGVfc2tpcENsaWVudENhY2hlICB9ID0gcGFyYW07XG4gICAgY29uc3QgeyBocmVmOiBjYWNoZUtleSAgfSA9IG5ldyBVUkwoZGF0YUhyZWYsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICB2YXIgX3BhcmFtc19tZXRob2Q7XG4gICAgY29uc3QgZ2V0RGF0YSA9IChwYXJhbXMpPT57XG4gICAgICAgIHJldHVybiBmZXRjaFJldHJ5KGRhdGFIcmVmLCBpc1NlcnZlclJlbmRlciA/IDMgOiAxLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiBPYmplY3QuYXNzaWduKHt9LCBpc1ByZWZldGNoID8ge1xuICAgICAgICAgICAgICAgIHB1cnBvc2U6IFwicHJlZmV0Y2hcIlxuICAgICAgICAgICAgfSA6IHt9LCBpc1ByZWZldGNoICYmIGhhc01pZGRsZXdhcmUgPyB7XG4gICAgICAgICAgICAgICAgXCJ4LW1pZGRsZXdhcmUtcHJlZmV0Y2hcIjogXCIxXCJcbiAgICAgICAgICAgIH0gOiB7fSksXG4gICAgICAgICAgICBtZXRob2Q6IChfcGFyYW1zX21ldGhvZCA9IHBhcmFtcyA9PSBudWxsID8gdm9pZCAwIDogcGFyYW1zLm1ldGhvZCkgIT0gbnVsbCA/IF9wYXJhbXNfbWV0aG9kIDogXCJHRVRcIlxuICAgICAgICB9KS50aGVuKChyZXNwb25zZSk9PntcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5vayAmJiAocGFyYW1zID09IG51bGwgPyB2b2lkIDAgOiBwYXJhbXMubWV0aG9kKSA9PT0gXCJIRUFEXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhSHJlZixcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIGpzb246IHt9LFxuICAgICAgICAgICAgICAgICAgICBjYWNoZUtleVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpLnRoZW4oKHRleHQpPT57XG4gICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFdoZW4gdGhlIGRhdGEgcmVzcG9uc2UgaXMgYSByZWRpcmVjdCBiZWNhdXNlIG9mIGEgbWlkZGxld2FyZVxuICAgICAgICAgICAgICogd2UgZG8gbm90IGNvbnNpZGVyIGl0IGFuIGVycm9yLiBUaGUgaGVhZGVycyBtdXN0IGJyaW5nIHRoZVxuICAgICAgICAgICAgICogbWFwcGVkIGxvY2F0aW9uLlxuICAgICAgICAgICAgICogVE9ETzogQ2hhbmdlIHRoZSBzdGF0dXMgY29kZSBpbiB0aGUgaGFuZGxlci5cbiAgICAgICAgICAgICAqLyBpZiAoaGFzTWlkZGxld2FyZSAmJiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAzMDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAzMDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAzMDcsXG4gICAgICAgICAgICAgICAgICAgICAgICAzMDhcbiAgICAgICAgICAgICAgICAgICAgXS5pbmNsdWRlcyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFIcmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbjoge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVLZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3RyeVRvUGFyc2VBc0pTT047XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKF90cnlUb1BhcnNlQXNKU09OID0gdHJ5VG9QYXJzZUFzSlNPTih0ZXh0KSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90cnlUb1BhcnNlQXNKU09OLm5vdEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUhyZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEZvdW5kOiBTU0dfREFUQV9OT1RfRk9VTkRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlS2V5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihcIkZhaWxlZCB0byBsb2FkIHN0YXRpYyBwcm9wc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBXZSBzaG91bGQgb25seSB0cmlnZ2VyIGEgc2VydmVyLXNpZGUgdHJhbnNpdGlvbiBpZiB0aGlzIHdhc1xuICAgICAgICAgICAgICogY2F1c2VkIG9uIGEgY2xpZW50LXNpZGUgdHJhbnNpdGlvbi4gT3RoZXJ3aXNlLCB3ZSdkIGdldCBpbnRvXG4gICAgICAgICAgICAgKiBhbiBpbmZpbml0ZSBsb29wLlxuICAgICAgICAgICAgICovIGlmICghaXNTZXJ2ZXJSZW5kZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfcm91dGVsb2FkZXIubWFya0Fzc2V0RXJyb3IpKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YUhyZWYsXG4gICAgICAgICAgICAgICAgICAgIGpzb246IHBhcnNlSlNPTiA/IHRyeVRvUGFyc2VBc0pTT04odGV4dCkgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVLZXlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRoZW4oKGRhdGEpPT57XG4gICAgICAgICAgICBpZiAoIXBlcnNpc3RDYWNoZSB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgfHwgZGF0YS5yZXNwb25zZS5oZWFkZXJzLmdldChcIngtbWlkZGxld2FyZS1jYWNoZVwiKSA9PT0gXCJuby1jYWNoZVwiKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGluZmxpZ2h0Q2FjaGVbY2FjaGVLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0pLmNhdGNoKChlcnIpPT57XG4gICAgICAgICAgICBpZiAoIXVuc3RhYmxlX3NraXBDbGllbnRDYWNoZSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBpbmZsaWdodENhY2hlW2NhY2hlS2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgvLyBjaHJvbWVcbiAgICAgICAgICAgIGVyci5tZXNzYWdlID09PSBcIkZhaWxlZCB0byBmZXRjaFwiIHx8IC8vIGZpcmVmb3hcbiAgICAgICAgICAgIGVyci5tZXNzYWdlID09PSBcIk5ldHdvcmtFcnJvciB3aGVuIGF0dGVtcHRpbmcgdG8gZmV0Y2ggcmVzb3VyY2UuXCIgfHwgLy8gc2FmYXJpXG4gICAgICAgICAgICBlcnIubWVzc2FnZSA9PT0gXCJMb2FkIGZhaWxlZFwiKSB7XG4gICAgICAgICAgICAgICAgKDAsIF9yb3V0ZWxvYWRlci5tYXJrQXNzZXRFcnJvcikoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyB3aGVuIHNraXBwaW5nIGNsaWVudCBjYWNoZSB3ZSB3YWl0IHRvIHVwZGF0ZVxuICAgIC8vIGluZmxpZ2h0IGNhY2hlIHVudGlsIHN1Y2Nlc3NmdWwgZGF0YSByZXNwb25zZVxuICAgIC8vIHRoaXMgYWxsb3dzIHJhY2luZyBjbGljayBldmVudCB3aXRoIGZldGNoaW5nIG5ld2VyIGRhdGFcbiAgICAvLyB3aXRob3V0IGJsb2NraW5nIG5hdmlnYXRpb24gd2hlbiBzdGFsZSBkYXRhIGlzIGF2YWlsYWJsZVxuICAgIGlmICh1bnN0YWJsZV9za2lwQ2xpZW50Q2FjaGUgJiYgcGVyc2lzdENhY2hlKSB7XG4gICAgICAgIHJldHVybiBnZXREYXRhKHt9KS50aGVuKChkYXRhKT0+e1xuICAgICAgICAgICAgaW5mbGlnaHRDYWNoZVtjYWNoZUtleV0gPSBQcm9taXNlLnJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbmZsaWdodENhY2hlW2NhY2hlS2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBpbmZsaWdodENhY2hlW2NhY2hlS2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIGluZmxpZ2h0Q2FjaGVbY2FjaGVLZXldID0gZ2V0RGF0YShpc0JhY2tncm91bmQgPyB7XG4gICAgICAgIG1ldGhvZDogXCJIRUFEXCJcbiAgICB9IDoge30pO1xufVxuZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyLCAxMCk7XG59XG5mdW5jdGlvbiBoYW5kbGVIYXJkTmF2aWdhdGlvbihwYXJhbSkge1xuICAgIGxldCB7IHVybCAsIHJvdXRlciAgfSA9IHBhcmFtO1xuICAgIC8vIGVuc3VyZSB3ZSBkb24ndCB0cmlnZ2VyIGEgaGFyZCBuYXZpZ2F0aW9uIHRvIHRoZSBzYW1lXG4gICAgLy8gVVJMIGFzIHRoaXMgY2FuIGVuZCB1cCB3aXRoIGFuIGluZmluaXRlIHJlZnJlc2hcbiAgICBpZiAodXJsID09PSAoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKSgoMCwgX2FkZGxvY2FsZS5hZGRMb2NhbGUpKHJvdXRlci5hc1BhdGgsIHJvdXRlci5sb2NhbGUpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhcmlhbnQ6IGF0dGVtcHRlZCB0byBoYXJkIG5hdmlnYXRlIHRvIHRoZSBzYW1lIFVSTCBcIiArIHVybCArIFwiIFwiICsgbG9jYXRpb24uaHJlZik7XG4gICAgfVxuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xufVxuY29uc3QgZ2V0Q2FuY2VsbGVkSGFuZGxlciA9IChwYXJhbSk9PntcbiAgICBsZXQgeyByb3V0ZSAsIHJvdXRlciAgfSA9IHBhcmFtO1xuICAgIGxldCBjYW5jZWxsZWQgPSBmYWxzZTtcbiAgICBjb25zdCBjYW5jZWwgPSByb3V0ZXIuY2xjID0gKCk9PntcbiAgICAgICAgY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZUNhbmNlbGxlZCA9ICgpPT57XG4gICAgICAgIGlmIChjYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdBYm9ydCBmZXRjaGluZyBjb21wb25lbnQgZm9yIHJvdXRlOiBcIicgKyByb3V0ZSArICdcIicpO1xuICAgICAgICAgICAgZXJyb3IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYW5jZWwgPT09IHJvdXRlci5jbGMpIHtcbiAgICAgICAgICAgIHJvdXRlci5jbGMgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gaGFuZGxlQ2FuY2VsbGVkO1xufTtcbmNsYXNzIFJvdXRlciB7XG4gICAgcmVsb2FkKCkge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBHbyBiYWNrIGluIGhpc3RvcnlcbiAgICovIGJhY2soKSB7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgICB9XG4gICAgLyoqXG4gICAqIEdvIGZvcndhcmQgaW4gaGlzdG9yeVxuICAgKi8gZm9yd2FyZCgpIHtcbiAgICAgICAgd2luZG93Lmhpc3RvcnkuZm9yd2FyZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICogUGVyZm9ybXMgYSBgcHVzaFN0YXRlYCB3aXRoIGFyZ3VtZW50c1xuICAgKiBAcGFyYW0gdXJsIG9mIHRoZSByb3V0ZVxuICAgKiBAcGFyYW0gYXMgbWFza3MgYHVybGAgZm9yIHRoZSBicm93c2VyXG4gICAqIEBwYXJhbSBvcHRpb25zIG9iamVjdCB5b3UgY2FuIGRlZmluZSBgc2hhbGxvd2AgYW5kIG90aGVyIG9wdGlvbnNcbiAgICovIHB1c2godXJsLCBhcywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSBvcHRpb25zID0ge307XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfU0NST0xMX1JFU1RPUkFUSU9OKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgaW4gdGhlIGZ1dHVyZSB3aGVuIHdlIHVwZGF0ZSBoaXN0b3J5IGJlZm9yZSByb3V0ZSBjaGFuZ2VcbiAgICAgICAgICAgIC8vIGlzIGNvbXBsZXRlLCBhcyB0aGUgcG9wc3RhdGUgZXZlbnQgc2hvdWxkIGhhbmRsZSB0aGlzIGNhcHR1cmUuXG4gICAgICAgICAgICBpZiAobWFudWFsU2Nyb2xsUmVzdG9yYXRpb24pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTbmFwc2hvdCBzY3JvbGwgcG9zaXRpb24gcmlnaHQgYmVmb3JlIG5hdmlnYXRpbmcgdG8gYSBuZXcgcGFnZTpcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcIl9fbmV4dF9zY3JvbGxfXCIgKyB0aGlzLl9rZXksIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHNlbGYucGFnZVhPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBzZWxmLnBhZ2VZT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICh7IHVybCAsIGFzICB9ID0gcHJlcGFyZVVybEFzKHRoaXMsIHVybCwgYXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlKFwicHVzaFN0YXRlXCIsIHVybCwgYXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICogUGVyZm9ybXMgYSBgcmVwbGFjZVN0YXRlYCB3aXRoIGFyZ3VtZW50c1xuICAgKiBAcGFyYW0gdXJsIG9mIHRoZSByb3V0ZVxuICAgKiBAcGFyYW0gYXMgbWFza3MgYHVybGAgZm9yIHRoZSBicm93c2VyXG4gICAqIEBwYXJhbSBvcHRpb25zIG9iamVjdCB5b3UgY2FuIGRlZmluZSBgc2hhbGxvd2AgYW5kIG90aGVyIG9wdGlvbnNcbiAgICovIHJlcGxhY2UodXJsLCBhcywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSBvcHRpb25zID0ge307XG4gICAgICAgICh7IHVybCAsIGFzICB9ID0gcHJlcGFyZVVybEFzKHRoaXMsIHVybCwgYXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhbmdlKFwicmVwbGFjZVN0YXRlXCIsIHVybCwgYXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBhc3luYyBfYmZsKGFzLCByZXNvbHZlZEFzLCBsb2NhbGUsIHNraXBOYXZpZ2F0ZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0NMSUVOVF9ST1VURVJfRklMVEVSX0VOQUJMRUQpIHtcbiAgICAgICAgICAgIGxldCBtYXRjaGVzQmZsU3RhdGljID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgbWF0Y2hlc0JmbER5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY3VyQXMgb2YgW1xuICAgICAgICAgICAgICAgIGFzLFxuICAgICAgICAgICAgICAgIHJlc29sdmVkQXNcbiAgICAgICAgICAgIF0pe1xuICAgICAgICAgICAgICAgIGlmIChjdXJBcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhc05vU2xhc2ggPSAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkobmV3IFVSTChjdXJBcywgXCJodHRwOi8vblwiKS5wYXRobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFzTm9TbGFzaExvY2FsZSA9ICgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKCgwLCBfYWRkbG9jYWxlLmFkZExvY2FsZSkoYXNOb1NsYXNoLCBsb2NhbGUgfHwgdGhpcy5sb2NhbGUpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFzTm9TbGFzaCAhPT0gKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKG5ldyBVUkwodGhpcy5hc1BhdGgsIFwiaHR0cDovL25cIikucGF0aG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXNfX2JmbF9zLCBfdGhpc19fYmZsX3MxO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlc0JmbFN0YXRpYyA9IG1hdGNoZXNCZmxTdGF0aWMgfHwgISEoKF90aGlzX19iZmxfcyA9IHRoaXMuX2JmbF9zKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXNfX2JmbF9zLmNvbnRhaW5zKGFzTm9TbGFzaCkpIHx8ICEhKChfdGhpc19fYmZsX3MxID0gdGhpcy5fYmZsX3MpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpc19fYmZsX3MxLmNvbnRhaW5zKGFzTm9TbGFzaExvY2FsZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBub3JtYWxpemVkQVMgb2YgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzTm9TbGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc05vU2xhc2hMb2NhbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGFueSBzdWItcGF0aCBvZiBhcyBtYXRjaGVzIGEgZHluYW1pYyBmaWx0ZXIgcGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0IHNob3VsZCBiZSBoYXJkIG5hdmlnYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1ckFzUGFydHMgPSBub3JtYWxpemVkQVMuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7ICFtYXRjaGVzQmZsRHluYW1pYyAmJiBpIDwgY3VyQXNQYXJ0cy5sZW5ndGggKyAxOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXNfX2JmbF9kO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50UGFydCA9IGN1ckFzUGFydHMuc2xpY2UoMCwgaSkuam9pbihcIi9cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UGFydCAmJiAoKF90aGlzX19iZmxfZCA9IHRoaXMuX2JmbF9kKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXNfX2JmbF9kLmNvbnRhaW5zKGN1cnJlbnRQYXJ0KSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXNCZmxEeW5hbWljID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGNsaWVudCByb3V0ZXIgZmlsdGVyIGlzIG1hdGNoZWQgdGhlbiB3ZSB0cmlnZ2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhIGhhcmQgbmF2aWdhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXNCZmxTdGF0aWMgfHwgbWF0Y2hlc0JmbER5bmFtaWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2tpcE5hdmlnYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVIYXJkTmF2aWdhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkoKDAsIF9hZGRsb2NhbGUuYWRkTG9jYWxlKShhcywgbG9jYWxlIHx8IHRoaXMubG9jYWxlLCB0aGlzLmRlZmF1bHRMb2NhbGUpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVyOiB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCgpPT57fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhc3luYyBjaGFuZ2UobWV0aG9kLCB1cmwsIGFzLCBvcHRpb25zLCBmb3JjZWRTY3JvbGwpIHtcbiAgICAgICAgdmFyIF90aGlzX2NvbXBvbmVudHNfcGF0aG5hbWU7XG4gICAgICAgIGlmICghKDAsIF9pc2xvY2FsdXJsLmlzTG9jYWxVUkwpKHVybCkpIHtcbiAgICAgICAgICAgIGhhbmRsZUhhcmROYXZpZ2F0aW9uKHtcbiAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgcm91dGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXQVJOSU5HOiBgX2hgIGlzIGFuIGludGVybmFsIG9wdGlvbiBmb3IgaGFuZGluZyBOZXh0LmpzIGNsaWVudC1zaWRlXG4gICAgICAgIC8vIGh5ZHJhdGlvbi4gWW91ciBhcHAgc2hvdWxkIF9uZXZlcl8gdXNlIHRoaXMgcHJvcGVydHkuIEl0IG1heSBjaGFuZ2UgYXRcbiAgICAgICAgLy8gYW55IHRpbWUgd2l0aG91dCBub3RpY2UuXG4gICAgICAgIGNvbnN0IGlzUXVlcnlVcGRhdGluZyA9IG9wdGlvbnMuX2ggPT09IDE7XG4gICAgICAgIGlmICghaXNRdWVyeVVwZGF0aW5nICYmICFvcHRpb25zLnNoYWxsb3cpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2JmbChhcywgdW5kZWZpbmVkLCBvcHRpb25zLmxvY2FsZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNob3VsZFJlc29sdmVIcmVmID0gaXNRdWVyeVVwZGF0aW5nIHx8IG9wdGlvbnMuX3Nob3VsZFJlc29sdmVIcmVmIHx8ICgwLCBfcGFyc2VwYXRoLnBhcnNlUGF0aCkodXJsKS5wYXRobmFtZSA9PT0gKDAsIF9wYXJzZXBhdGgucGFyc2VQYXRoKShhcykucGF0aG5hbWU7XG4gICAgICAgIGNvbnN0IG5leHRTdGF0ZSA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMuc3RhdGVcbiAgICAgICAgfTtcbiAgICAgICAgLy8gZm9yIHN0YXRpYyBwYWdlcyB3aXRoIHF1ZXJ5IHBhcmFtcyBpbiB0aGUgVVJMIHdlIGRlbGF5XG4gICAgICAgIC8vIG1hcmtpbmcgdGhlIHJvdXRlciByZWFkeSB1bnRpbCBhZnRlciB0aGUgcXVlcnkgaXMgdXBkYXRlZFxuICAgICAgICAvLyBvciBhIG5hdmlnYXRpb24gaGFzIG9jY3VycmVkXG4gICAgICAgIGNvbnN0IHJlYWR5U3RhdGVDaGFuZ2UgPSB0aGlzLmlzUmVhZHkgIT09IHRydWU7XG4gICAgICAgIHRoaXMuaXNSZWFkeSA9IHRydWU7XG4gICAgICAgIGNvbnN0IGlzU3NyID0gdGhpcy5pc1NzcjtcbiAgICAgICAgaWYgKCFpc1F1ZXJ5VXBkYXRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTc3IgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBhIHJvdXRlIHRyYW5zaXRpb24gaXMgYWxyZWFkeSBpbiBwcm9ncmVzcyBiZWZvcmVcbiAgICAgICAgLy8gdGhlIHF1ZXJ5IHVwZGF0aW5nIGlzIHRyaWdnZXJlZCBpZ25vcmUgcXVlcnkgdXBkYXRpbmdcbiAgICAgICAgaWYgKGlzUXVlcnlVcGRhdGluZyAmJiB0aGlzLmNsYykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZXZMb2NhbGUgPSBuZXh0U3RhdGUubG9jYWxlO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICAgICAgbmV4dFN0YXRlLmxvY2FsZSA9IG9wdGlvbnMubG9jYWxlID09PSBmYWxzZSA/IHRoaXMuZGVmYXVsdExvY2FsZSA6IG9wdGlvbnMubG9jYWxlIHx8IG5leHRTdGF0ZS5sb2NhbGU7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubG9jYWxlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5sb2NhbGUgPSBuZXh0U3RhdGUubG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFyc2VkQXMgPSAoMCwgX3BhcnNlcmVsYXRpdmV1cmwucGFyc2VSZWxhdGl2ZVVybCkoKDAsIF9oYXNiYXNlcGF0aC5oYXNCYXNlUGF0aCkoYXMpID8gKDAsIF9yZW1vdmViYXNlcGF0aC5yZW1vdmVCYXNlUGF0aCkoYXMpIDogYXMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxlUGF0aFJlc3VsdCA9ICgwLCBfbm9ybWFsaXplbG9jYWxlcGF0aC5ub3JtYWxpemVMb2NhbGVQYXRoKShwYXJzZWRBcy5wYXRobmFtZSwgdGhpcy5sb2NhbGVzKTtcbiAgICAgICAgICAgIGlmIChsb2NhbGVQYXRoUmVzdWx0LmRldGVjdGVkTG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgbmV4dFN0YXRlLmxvY2FsZSA9IGxvY2FsZVBhdGhSZXN1bHQuZGV0ZWN0ZWRMb2NhbGU7XG4gICAgICAgICAgICAgICAgcGFyc2VkQXMucGF0aG5hbWUgPSAoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKShwYXJzZWRBcy5wYXRobmFtZSk7XG4gICAgICAgICAgICAgICAgYXMgPSAoMCwgX2Zvcm1hdHVybC5mb3JtYXRXaXRoVmFsaWRhdGlvbikocGFyc2VkQXMpO1xuICAgICAgICAgICAgICAgIHVybCA9ICgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKCgwLCBfbm9ybWFsaXplbG9jYWxlcGF0aC5ub3JtYWxpemVMb2NhbGVQYXRoKSgoMCwgX2hhc2Jhc2VwYXRoLmhhc0Jhc2VQYXRoKSh1cmwpID8gKDAsIF9yZW1vdmViYXNlcGF0aC5yZW1vdmVCYXNlUGF0aCkodXJsKSA6IHVybCwgdGhpcy5sb2NhbGVzKS5wYXRobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZGlkTmF2aWdhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gd3JhcCB0aGlzIGluIHRoZSBlbnYgY2hlY2sgYWdhaW4gc2luY2UgcmVnZW5lcmF0b3IgcnVudGltZVxuICAgICAgICAgICAgLy8gbW92ZXMgdGhpcyBvbiBpdHMgb3duIGR1ZSB0byB0aGUgcmV0dXJuXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCkge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpc19sb2NhbGVzO1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBsb2NhbGUgaXNuJ3QgY29uZmlndXJlZCBoYXJkIG5hdmlnYXRlIHRvIHNob3cgNDA0IHBhZ2VcbiAgICAgICAgICAgICAgICBpZiAoISgoX3RoaXNfbG9jYWxlcyA9IHRoaXMubG9jYWxlcykgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzX2xvY2FsZXMuaW5jbHVkZXMobmV4dFN0YXRlLmxvY2FsZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZEFzLnBhdGhuYW1lID0gKDAsIF9hZGRsb2NhbGUuYWRkTG9jYWxlKShwYXJzZWRBcy5wYXRobmFtZSwgbmV4dFN0YXRlLmxvY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZUhhcmROYXZpZ2F0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHBhcnNlZEFzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlcjogdGhpc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3YXMgcHJldmlvdXNseSBhIHJldHVybiBidXQgd2FzIHJlbW92ZWQgaW4gZmF2b3JcbiAgICAgICAgICAgICAgICAgICAgLy8gb2YgYmV0dGVyIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3aXRoIHJlZ2VuZXJhdG9yIHJ1bnRpbWVcbiAgICAgICAgICAgICAgICAgICAgZGlkTmF2aWdhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRldGVjdGVkRG9tYWluID0gKDAsIF9kZXRlY3Rkb21haW5sb2NhbGUuZGV0ZWN0RG9tYWluTG9jYWxlKSh0aGlzLmRvbWFpbkxvY2FsZXMsIHVuZGVmaW5lZCwgbmV4dFN0YXRlLmxvY2FsZSk7XG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHdyYXAgdGhpcyBpbiB0aGUgZW52IGNoZWNrIGFnYWluIHNpbmNlIHJlZ2VuZXJhdG9yIHJ1bnRpbWVcbiAgICAgICAgICAgIC8vIG1vdmVzIHRoaXMgb24gaXRzIG93biBkdWUgdG8gdGhlIHJldHVyblxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB3ZSBhcmUgbmF2aWdhdGluZyB0byBhIGRvbWFpbiBsb2NhbGUgZW5zdXJlIHdlIHJlZGlyZWN0IHRvIHRoZVxuICAgICAgICAgICAgICAgIC8vIGNvcnJlY3QgZG9tYWluXG4gICAgICAgICAgICAgICAgaWYgKCFkaWROYXZpZ2F0ZSAmJiBkZXRlY3RlZERvbWFpbiAmJiB0aGlzLmlzTG9jYWxlRG9tYWluICYmIHNlbGYubG9jYXRpb24uaG9zdG5hbWUgIT09IGRldGVjdGVkRG9tYWluLmRvbWFpbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhc05vQmFzZVBhdGggPSAoMCwgX3JlbW92ZWJhc2VwYXRoLnJlbW92ZUJhc2VQYXRoKShhcyk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZUhhcmROYXZpZ2F0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXCJodHRwXCIgKyAoZGV0ZWN0ZWREb21haW4uaHR0cCA/IFwiXCIgOiBcInNcIikgKyBcIjovL1wiICsgZGV0ZWN0ZWREb21haW4uZG9tYWluICsgKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkoXCJcIiArIChuZXh0U3RhdGUubG9jYWxlID09PSBkZXRlY3RlZERvbWFpbi5kZWZhdWx0TG9jYWxlID8gXCJcIiA6IFwiL1wiICsgbmV4dFN0YXRlLmxvY2FsZSkgKyAoYXNOb0Jhc2VQYXRoID09PSBcIi9cIiA/IFwiXCIgOiBhc05vQmFzZVBhdGgpIHx8IFwiL1wiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlcjogdGhpc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3YXMgcHJldmlvdXNseSBhIHJldHVybiBidXQgd2FzIHJlbW92ZWQgaW4gZmF2b3JcbiAgICAgICAgICAgICAgICAgICAgLy8gb2YgYmV0dGVyIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3aXRoIHJlZ2VuZXJhdG9yIHJ1bnRpbWVcbiAgICAgICAgICAgICAgICAgICAgZGlkTmF2aWdhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkaWROYXZpZ2F0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKT0+e30pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIG1hcmtpbmcgcm91dGUgY2hhbmdlcyBhcyBhIG5hdmlnYXRpb24gc3RhcnQgZW50cnlcbiAgICAgICAgaWYgKF91dGlscy5TVCkge1xuICAgICAgICAgICAgcGVyZm9ybWFuY2UubWFyayhcInJvdXRlQ2hhbmdlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgc2hhbGxvdyA9ZmFsc2UgLCBzY3JvbGwgPXRydWUgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCByb3V0ZVByb3BzID0ge1xuICAgICAgICAgICAgc2hhbGxvd1xuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5faW5GbGlnaHRSb3V0ZSAmJiB0aGlzLmNsYykge1xuICAgICAgICAgICAgaWYgKCFpc1Nzcikge1xuICAgICAgICAgICAgICAgIFJvdXRlci5ldmVudHMuZW1pdChcInJvdXRlQ2hhbmdlRXJyb3JcIiwgYnVpbGRDYW5jZWxsYXRpb25FcnJvcigpLCB0aGlzLl9pbkZsaWdodFJvdXRlLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2xjKCk7XG4gICAgICAgICAgICB0aGlzLmNsYyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYXMgPSAoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKSgoMCwgX2FkZGxvY2FsZS5hZGRMb2NhbGUpKCgwLCBfaGFzYmFzZXBhdGguaGFzQmFzZVBhdGgpKGFzKSA/ICgwLCBfcmVtb3ZlYmFzZXBhdGgucmVtb3ZlQmFzZVBhdGgpKGFzKSA6IGFzLCBvcHRpb25zLmxvY2FsZSwgdGhpcy5kZWZhdWx0TG9jYWxlKSk7XG4gICAgICAgIGNvbnN0IGNsZWFuZWRBcyA9ICgwLCBfcmVtb3ZlbG9jYWxlLnJlbW92ZUxvY2FsZSkoKDAsIF9oYXNiYXNlcGF0aC5oYXNCYXNlUGF0aCkoYXMpID8gKDAsIF9yZW1vdmViYXNlcGF0aC5yZW1vdmVCYXNlUGF0aCkoYXMpIDogYXMsIG5leHRTdGF0ZS5sb2NhbGUpO1xuICAgICAgICB0aGlzLl9pbkZsaWdodFJvdXRlID0gYXM7XG4gICAgICAgIGNvbnN0IGxvY2FsZUNoYW5nZSA9IHByZXZMb2NhbGUgIT09IG5leHRTdGF0ZS5sb2NhbGU7XG4gICAgICAgIC8vIElmIHRoZSB1cmwgY2hhbmdlIGlzIG9ubHkgcmVsYXRlZCB0byBhIGhhc2ggY2hhbmdlXG4gICAgICAgIC8vIFdlIHNob3VsZCBub3QgcHJvY2VlZC4gV2Ugc2hvdWxkIG9ubHkgY2hhbmdlIHRoZSBzdGF0ZS5cbiAgICAgICAgaWYgKCFpc1F1ZXJ5VXBkYXRpbmcgJiYgdGhpcy5vbmx5QUhhc2hDaGFuZ2UoY2xlYW5lZEFzKSAmJiAhbG9jYWxlQ2hhbmdlKSB7XG4gICAgICAgICAgICBuZXh0U3RhdGUuYXNQYXRoID0gY2xlYW5lZEFzO1xuICAgICAgICAgICAgUm91dGVyLmV2ZW50cy5lbWl0KFwiaGFzaENoYW5nZVN0YXJ0XCIsIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgIC8vIFRPRE86IGRvIHdlIG5lZWQgdGhlIHJlc29sdmVkIGhyZWYgd2hlbiBvbmx5IGEgaGFzaCBjaGFuZ2U/XG4gICAgICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKG1ldGhvZCwgdXJsLCBhcywge1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgc2Nyb2xsOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUb0hhc2goY2xlYW5lZEFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXQobmV4dFN0YXRlLCB0aGlzLmNvbXBvbmVudHNbbmV4dFN0YXRlLnJvdXRlXSwgbnVsbCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoKDAsIF9pc2Vycm9yLmRlZmF1bHQpKGVycikgJiYgZXJyLmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoXCJyb3V0ZUNoYW5nZUVycm9yXCIsIGVyciwgY2xlYW5lZEFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgUm91dGVyLmV2ZW50cy5lbWl0KFwiaGFzaENoYW5nZUNvbXBsZXRlXCIsIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBwYXJzZWQgPSAoMCwgX3BhcnNlcmVsYXRpdmV1cmwucGFyc2VSZWxhdGl2ZVVybCkodXJsKTtcbiAgICAgICAgbGV0IHsgcGF0aG5hbWUgLCBxdWVyeSAgfSA9IHBhcnNlZDtcbiAgICAgICAgLy8gaWYgd2UgZGV0ZWN0ZWQgdGhlIHBhdGggYXMgYXBwIHJvdXRlIGR1cmluZyBwcmVmZXRjaGluZ1xuICAgICAgICAvLyB0cmlnZ2VyIGhhcmQgbmF2aWdhdGlvblxuICAgICAgICBpZiAoKF90aGlzX2NvbXBvbmVudHNfcGF0aG5hbWUgPSB0aGlzLmNvbXBvbmVudHNbcGF0aG5hbWVdKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXNfY29tcG9uZW50c19wYXRobmFtZS5fX2FwcFJvdXRlcikge1xuICAgICAgICAgICAgaGFuZGxlSGFyZE5hdmlnYXRpb24oe1xuICAgICAgICAgICAgICAgIHVybDogYXMsXG4gICAgICAgICAgICAgICAgcm91dGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKT0+e30pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoZSBidWlsZCBtYW5pZmVzdCBuZWVkcyB0byBiZSBsb2FkZWQgYmVmb3JlIGF1dG8tc3RhdGljIGR5bmFtaWMgcGFnZXNcbiAgICAgICAgLy8gZ2V0IHRoZWlyIHF1ZXJ5IHBhcmFtZXRlcnMgdG8gYWxsb3cgZW5zdXJpbmcgdGhleSBjYW4gYmUgcGFyc2VkIHByb3Blcmx5XG4gICAgICAgIC8vIHdoZW4gcmV3cml0dGVuIHRvXG4gICAgICAgIGxldCBwYWdlcywgcmV3cml0ZXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBbcGFnZXMsIHsgX19yZXdyaXRlczogcmV3cml0ZXMgIH1dID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgICAgIHRoaXMucGFnZUxvYWRlci5nZXRQYWdlTGlzdCgpLFxuICAgICAgICAgICAgICAgICgwLCBfcm91dGVsb2FkZXIuZ2V0Q2xpZW50QnVpbGRNYW5pZmVzdCkoKSxcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VMb2FkZXIuZ2V0TWlkZGxld2FyZSgpXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBmYWlsIHRvIHJlc29sdmUgdGhlIHBhZ2UgbGlzdCBvciBjbGllbnQtYnVpbGQgbWFuaWZlc3QsIHdlIG11c3RcbiAgICAgICAgICAgIC8vIGRvIGEgc2VydmVyLXNpZGUgdHJhbnNpdGlvbjpcbiAgICAgICAgICAgIGhhbmRsZUhhcmROYXZpZ2F0aW9uKHtcbiAgICAgICAgICAgICAgICB1cmw6IGFzLFxuICAgICAgICAgICAgICAgIHJvdXRlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgYXNrZWQgdG8gY2hhbmdlIHRoZSBjdXJyZW50IFVSTCB3ZSBzaG91bGQgcmVsb2FkIHRoZSBjdXJyZW50IHBhZ2VcbiAgICAgICAgLy8gKG5vdCBsb2NhdGlvbi5yZWxvYWQoKSBidXQgcmVsb2FkIGdldEluaXRpYWxQcm9wcyBhbmQgb3RoZXIgTmV4dC5qcyBzdHVmZnMpXG4gICAgICAgIC8vIFdlIGFsc28gbmVlZCB0byBzZXQgdGhlIG1ldGhvZCA9IHJlcGxhY2VTdGF0ZSBhbHdheXNcbiAgICAgICAgLy8gYXMgdGhpcyBzaG91bGQgbm90IGdvIGludG8gdGhlIGhpc3RvcnkgKFRoYXQncyBob3cgYnJvd3NlcnMgd29yaylcbiAgICAgICAgLy8gV2Ugc2hvdWxkIGNvbXBhcmUgdGhlIG5ldyBhc1BhdGggdG8gdGhlIGN1cnJlbnQgYXNQYXRoLCBub3QgdGhlIHVybFxuICAgICAgICBpZiAoIXRoaXMudXJsSXNOZXcoY2xlYW5lZEFzKSAmJiAhbG9jYWxlQ2hhbmdlKSB7XG4gICAgICAgICAgICBtZXRob2QgPSBcInJlcGxhY2VTdGF0ZVwiO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gcmVzb2x2ZSB0aGUgYXMgdmFsdWUgdXNpbmcgcmV3cml0ZXMgZm9yIGR5bmFtaWMgU1NHXG4gICAgICAgIC8vIHBhZ2VzIHRvIGFsbG93IGJ1aWxkaW5nIHRoZSBkYXRhIFVSTCBjb3JyZWN0bHlcbiAgICAgICAgbGV0IHJlc29sdmVkQXMgPSBhcztcbiAgICAgICAgLy8gdXJsIGFuZCBhcyBzaG91bGQgYWx3YXlzIGJlIHByZWZpeGVkIHdpdGggYmFzZVBhdGggYnkgdGhpc1xuICAgICAgICAvLyBwb2ludCBieSBlaXRoZXIgbmV4dC9saW5rIG9yIHJvdXRlci5wdXNoL3JlcGxhY2Ugc28gc3RyaXAgdGhlXG4gICAgICAgIC8vIGJhc2VQYXRoIGZyb20gdGhlIHBhdGhuYW1lIHRvIG1hdGNoIHRoZSBwYWdlcyBkaXIgMS10by0xXG4gICAgICAgIHBhdGhuYW1lID0gcGF0aG5hbWUgPyAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkoKDAsIF9yZW1vdmViYXNlcGF0aC5yZW1vdmVCYXNlUGF0aCkocGF0aG5hbWUpKSA6IHBhdGhuYW1lO1xuICAgICAgICBsZXQgcm91dGUgPSAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkocGF0aG5hbWUpO1xuICAgICAgICBjb25zdCBwYXJzZWRBc1BhdGhuYW1lID0gYXMuc3RhcnRzV2l0aChcIi9cIikgJiYgKDAsIF9wYXJzZXJlbGF0aXZldXJsLnBhcnNlUmVsYXRpdmVVcmwpKGFzKS5wYXRobmFtZTtcbiAgICAgICAgY29uc3QgaXNNaWRkbGV3YXJlUmV3cml0ZSA9ICEhKHBhcnNlZEFzUGF0aG5hbWUgJiYgcm91dGUgIT09IHBhcnNlZEFzUGF0aG5hbWUgJiYgKCEoMCwgX2lzZHluYW1pYy5pc0R5bmFtaWNSb3V0ZSkocm91dGUpIHx8ICEoMCwgX3JvdXRlbWF0Y2hlci5nZXRSb3V0ZU1hdGNoZXIpKCgwLCBfcm91dGVyZWdleC5nZXRSb3V0ZVJlZ2V4KShyb3V0ZSkpKHBhcnNlZEFzUGF0aG5hbWUpKSk7XG4gICAgICAgIC8vIHdlIGRvbid0IGF0dGVtcHQgcmVzb2x2ZSBhc1BhdGggd2hlbiB3ZSBuZWVkIHRvIGV4ZWN1dGVcbiAgICAgICAgLy8gbWlkZGxld2FyZSBhcyB0aGUgcmVzb2x2aW5nIHdpbGwgb2NjdXIgc2VydmVyLXNpZGVcbiAgICAgICAgY29uc3QgaXNNaWRkbGV3YXJlTWF0Y2ggPSAhb3B0aW9ucy5zaGFsbG93ICYmIGF3YWl0IG1hdGNoZXNNaWRkbGV3YXJlKHtcbiAgICAgICAgICAgIGFzUGF0aDogYXMsXG4gICAgICAgICAgICBsb2NhbGU6IG5leHRTdGF0ZS5sb2NhbGUsXG4gICAgICAgICAgICByb3V0ZXI6IHRoaXNcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpc1F1ZXJ5VXBkYXRpbmcgJiYgaXNNaWRkbGV3YXJlTWF0Y2gpIHtcbiAgICAgICAgICAgIHNob3VsZFJlc29sdmVIcmVmID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZFJlc29sdmVIcmVmICYmIHBhdGhuYW1lICE9PSBcIi9fZXJyb3JcIikge1xuICAgICAgICAgICAgb3B0aW9ucy5fc2hvdWxkUmVzb2x2ZUhyZWYgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9IQVNfUkVXUklURVMgJiYgYXMuc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXdyaXRlc1Jlc3VsdCA9ICgwLCBfcmVzb2x2ZXJld3JpdGVzLmRlZmF1bHQpKCgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKCgwLCBfYWRkbG9jYWxlLmFkZExvY2FsZSkoY2xlYW5lZEFzLCBuZXh0U3RhdGUubG9jYWxlKSwgdHJ1ZSksIHBhZ2VzLCByZXdyaXRlcywgcXVlcnksIChwKT0+cmVzb2x2ZUR5bmFtaWNSb3V0ZShwLCBwYWdlcyksIHRoaXMubG9jYWxlcyk7XG4gICAgICAgICAgICAgICAgaWYgKHJld3JpdGVzUmVzdWx0LmV4dGVybmFsRGVzdCkge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVIYXJkTmF2aWdhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVyOiB0aGlzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpc01pZGRsZXdhcmVNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlZEFzID0gcmV3cml0ZXNSZXN1bHQuYXNQYXRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmV3cml0ZXNSZXN1bHQubWF0Y2hlZFBhZ2UgJiYgcmV3cml0ZXNSZXN1bHQucmVzb2x2ZWRIcmVmKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgZGlyZWN0bHkgbWF0Y2hlcyBhIHBhZ2Ugd2UgbmVlZCB0byB1cGRhdGUgdGhlIGhyZWYgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gYWxsb3cgdGhlIGNvcnJlY3QgcGFnZSBjaHVuayB0byBiZSBsb2FkZWRcbiAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWUgPSByZXdyaXRlc1Jlc3VsdC5yZXNvbHZlZEhyZWY7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZC5wYXRobmFtZSA9ICgwLCBfYWRkYmFzZXBhdGguYWRkQmFzZVBhdGgpKHBhdGhuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc01pZGRsZXdhcmVNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHBhcnNlZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnNlZC5wYXRobmFtZSA9IHJlc29sdmVEeW5hbWljUm91dGUocGF0aG5hbWUsIHBhZ2VzKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkLnBhdGhuYW1lICE9PSBwYXRobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBwYXRobmFtZSA9IHBhcnNlZC5wYXRobmFtZTtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VkLnBhdGhuYW1lID0gKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkocGF0aG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTWlkZGxld2FyZU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSAoMCwgX2Zvcm1hdHVybC5mb3JtYXRXaXRoVmFsaWRhdGlvbikocGFyc2VkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoISgwLCBfaXNsb2NhbHVybC5pc0xvY2FsVVJMKShhcykpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaHJlZjogXCInICsgdXJsICsgJ1wiIGFuZCBhczogXCInICsgYXMgKyAnXCIsIHJlY2VpdmVkIHJlbGF0aXZlIGhyZWYgYW5kIGV4dGVybmFsIGFzJyArIFwiXFxuU2VlIG1vcmUgaW5mbzogaHR0cHM6Ly9uZXh0anMub3JnL2RvY3MvbWVzc2FnZXMvaW52YWxpZC1yZWxhdGl2ZS11cmwtZXh0ZXJuYWwtYXNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYW5kbGVIYXJkTmF2aWdhdGlvbih7XG4gICAgICAgICAgICAgICAgdXJsOiBhcyxcbiAgICAgICAgICAgICAgICByb3V0ZXI6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmVkQXMgPSAoMCwgX3JlbW92ZWxvY2FsZS5yZW1vdmVMb2NhbGUpKCgwLCBfcmVtb3ZlYmFzZXBhdGgucmVtb3ZlQmFzZVBhdGgpKHJlc29sdmVkQXMpLCBuZXh0U3RhdGUubG9jYWxlKTtcbiAgICAgICAgcm91dGUgPSAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkocGF0aG5hbWUpO1xuICAgICAgICBsZXQgcm91dGVNYXRjaCA9IGZhbHNlO1xuICAgICAgICBpZiAoKDAsIF9pc2R5bmFtaWMuaXNEeW5hbWljUm91dGUpKHJvdXRlKSkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkQXMgPSAoMCwgX3BhcnNlcmVsYXRpdmV1cmwucGFyc2VSZWxhdGl2ZVVybCkocmVzb2x2ZWRBcyk7XG4gICAgICAgICAgICBjb25zdCBhc1BhdGhuYW1lID0gcGFyc2VkQXMucGF0aG5hbWU7XG4gICAgICAgICAgICBjb25zdCByb3V0ZVJlZ2V4ID0gKDAsIF9yb3V0ZXJlZ2V4LmdldFJvdXRlUmVnZXgpKHJvdXRlKTtcbiAgICAgICAgICAgIHJvdXRlTWF0Y2ggPSAoMCwgX3JvdXRlbWF0Y2hlci5nZXRSb3V0ZU1hdGNoZXIpKHJvdXRlUmVnZXgpKGFzUGF0aG5hbWUpO1xuICAgICAgICAgICAgY29uc3Qgc2hvdWxkSW50ZXJwb2xhdGUgPSByb3V0ZSA9PT0gYXNQYXRobmFtZTtcbiAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRlZEFzID0gc2hvdWxkSW50ZXJwb2xhdGUgPyAoMCwgX2ludGVycG9sYXRlYXMuaW50ZXJwb2xhdGVBcykocm91dGUsIGFzUGF0aG5hbWUsIHF1ZXJ5KSA6IHt9O1xuICAgICAgICAgICAgaWYgKCFyb3V0ZU1hdGNoIHx8IHNob3VsZEludGVycG9sYXRlICYmICFpbnRlcnBvbGF0ZWRBcy5yZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtaXNzaW5nUGFyYW1zID0gT2JqZWN0LmtleXMocm91dGVSZWdleC5ncm91cHMpLmZpbHRlcigocGFyYW0pPT4hcXVlcnlbcGFyYW1dICYmICFyb3V0ZVJlZ2V4Lmdyb3Vwc1twYXJhbV0ub3B0aW9uYWwpO1xuICAgICAgICAgICAgICAgIGlmIChtaXNzaW5nUGFyYW1zLmxlbmd0aCA+IDAgJiYgIWlzTWlkZGxld2FyZU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlwiICsgKHNob3VsZEludGVycG9sYXRlID8gXCJJbnRlcnBvbGF0aW5nIGhyZWZcIiA6IFwiTWlzbWF0Y2hpbmcgYGFzYCBhbmQgYGhyZWZgXCIpICsgXCIgZmFpbGVkIHRvIG1hbnVhbGx5IHByb3ZpZGUgXCIgKyAoXCJ0aGUgcGFyYW1zOiBcIiArIG1pc3NpbmdQYXJhbXMuam9pbihcIiwgXCIpICsgXCIgaW4gdGhlIGBocmVmYCdzIGBxdWVyeWBcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigoc2hvdWxkSW50ZXJwb2xhdGUgPyBcIlRoZSBwcm92aWRlZCBgaHJlZmAgKFwiICsgdXJsICsgXCIpIHZhbHVlIGlzIG1pc3NpbmcgcXVlcnkgdmFsdWVzIChcIiArIG1pc3NpbmdQYXJhbXMuam9pbihcIiwgXCIpICsgXCIpIHRvIGJlIGludGVycG9sYXRlZCBwcm9wZXJseS4gXCIgOiBcIlRoZSBwcm92aWRlZCBgYXNgIHZhbHVlIChcIiArIGFzUGF0aG5hbWUgKyBcIikgaXMgaW5jb21wYXRpYmxlIHdpdGggdGhlIGBocmVmYCB2YWx1ZSAoXCIgKyByb3V0ZSArIFwiKS4gXCIpICsgKFwiUmVhZCBtb3JlOiBodHRwczovL25leHRqcy5vcmcvZG9jcy9tZXNzYWdlcy9cIiArIChzaG91bGRJbnRlcnBvbGF0ZSA/IFwiaHJlZi1pbnRlcnBvbGF0aW9uLWZhaWxlZFwiIDogXCJpbmNvbXBhdGlibGUtaHJlZi1hc1wiKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hvdWxkSW50ZXJwb2xhdGUpIHtcbiAgICAgICAgICAgICAgICBhcyA9ICgwLCBfZm9ybWF0dXJsLmZvcm1hdFdpdGhWYWxpZGF0aW9uKShPYmplY3QuYXNzaWduKHt9LCBwYXJzZWRBcywge1xuICAgICAgICAgICAgICAgICAgICBwYXRobmFtZTogaW50ZXJwb2xhdGVkQXMucmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICBxdWVyeTogKDAsIF9vbWl0Lm9taXQpKHF1ZXJ5LCBpbnRlcnBvbGF0ZWRBcy5wYXJhbXMpXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBNZXJnZSBwYXJhbXMgaW50byBgcXVlcnlgLCBvdmVyd3JpdGluZyBhbnkgc3BlY2lmaWVkIGluIHNlYXJjaFxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocXVlcnksIHJvdXRlTWF0Y2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaXNRdWVyeVVwZGF0aW5nKSB7XG4gICAgICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoXCJyb3V0ZUNoYW5nZVN0YXJ0XCIsIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0Vycm9yUm91dGUgPSB0aGlzLnBhdGhuYW1lID09PSBcIi80MDRcIiB8fCB0aGlzLnBhdGhuYW1lID09PSBcIi9fZXJyb3JcIjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzLCBfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzX3BhZ2VQcm9wcywgX3JvdXRlSW5mb19wcm9wcztcbiAgICAgICAgICAgIGxldCByb3V0ZUluZm8gPSBhd2FpdCB0aGlzLmdldFJvdXRlSW5mbyh7XG4gICAgICAgICAgICAgICAgcm91dGUsXG4gICAgICAgICAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgICAgYXMsXG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRBcyxcbiAgICAgICAgICAgICAgICByb3V0ZVByb3BzLFxuICAgICAgICAgICAgICAgIGxvY2FsZTogbmV4dFN0YXRlLmxvY2FsZSxcbiAgICAgICAgICAgICAgICBpc1ByZXZpZXc6IG5leHRTdGF0ZS5pc1ByZXZpZXcsXG4gICAgICAgICAgICAgICAgaGFzTWlkZGxld2FyZTogaXNNaWRkbGV3YXJlTWF0Y2gsXG4gICAgICAgICAgICAgICAgdW5zdGFibGVfc2tpcENsaWVudENhY2hlOiBvcHRpb25zLnVuc3RhYmxlX3NraXBDbGllbnRDYWNoZSxcbiAgICAgICAgICAgICAgICBpc1F1ZXJ5VXBkYXRpbmc6IGlzUXVlcnlVcGRhdGluZyAmJiAhdGhpcy5pc0ZhbGxiYWNrLFxuICAgICAgICAgICAgICAgIGlzTWlkZGxld2FyZVJld3JpdGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKCFpc1F1ZXJ5VXBkYXRpbmcgJiYgIW9wdGlvbnMuc2hhbGxvdykge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX2JmbChhcywgXCJyZXNvbHZlZEFzXCIgaW4gcm91dGVJbmZvID8gcm91dGVJbmZvLnJlc29sdmVkQXMgOiB1bmRlZmluZWQsIG5leHRTdGF0ZS5sb2NhbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFwicm91dGVcIiBpbiByb3V0ZUluZm8gJiYgaXNNaWRkbGV3YXJlTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBwYXRobmFtZSA9IHJvdXRlSW5mby5yb3V0ZSB8fCByb3V0ZTtcbiAgICAgICAgICAgICAgICByb3V0ZSA9IHBhdGhuYW1lO1xuICAgICAgICAgICAgICAgIGlmICghcm91dGVQcm9wcy5zaGFsbG93KSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5ID0gT2JqZWN0LmFzc2lnbih7fSwgcm91dGVJbmZvLnF1ZXJ5IHx8IHt9LCBxdWVyeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNsZWFuZWRQYXJzZWRQYXRobmFtZSA9ICgwLCBfaGFzYmFzZXBhdGguaGFzQmFzZVBhdGgpKHBhcnNlZC5wYXRobmFtZSkgPyAoMCwgX3JlbW92ZWJhc2VwYXRoLnJlbW92ZUJhc2VQYXRoKShwYXJzZWQucGF0aG5hbWUpIDogcGFyc2VkLnBhdGhuYW1lO1xuICAgICAgICAgICAgICAgIGlmIChyb3V0ZU1hdGNoICYmIHBhdGhuYW1lICE9PSBjbGVhbmVkUGFyc2VkUGF0aG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMocm91dGVNYXRjaCkuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvdXRlTWF0Y2ggJiYgcXVlcnlba2V5XSA9PT0gcm91dGVNYXRjaFtrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHF1ZXJ5W2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKDAsIF9pc2R5bmFtaWMuaXNEeW5hbWljUm91dGUpKHBhdGhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVmaXhlZEFzID0gIXJvdXRlUHJvcHMuc2hhbGxvdyAmJiByb3V0ZUluZm8ucmVzb2x2ZWRBcyA/IHJvdXRlSW5mby5yZXNvbHZlZEFzIDogKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkoKDAsIF9hZGRsb2NhbGUuYWRkTG9jYWxlKShuZXcgVVJMKGFzLCBsb2NhdGlvbi5ocmVmKS5wYXRobmFtZSwgbmV4dFN0YXRlLmxvY2FsZSksIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmV3cml0ZUFzID0gcHJlZml4ZWRBcztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgwLCBfaGFzYmFzZXBhdGguaGFzQmFzZVBhdGgpKHJld3JpdGVBcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJld3JpdGVBcyA9ICgwLCBfcmVtb3ZlYmFzZXBhdGgucmVtb3ZlQmFzZVBhdGgpKHJld3JpdGVBcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsZVJlc3VsdCA9ICgwLCBfbm9ybWFsaXplbG9jYWxlcGF0aC5ub3JtYWxpemVMb2NhbGVQYXRoKShyZXdyaXRlQXMsIHRoaXMubG9jYWxlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0U3RhdGUubG9jYWxlID0gbG9jYWxlUmVzdWx0LmRldGVjdGVkTG9jYWxlIHx8IG5leHRTdGF0ZS5sb2NhbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXdyaXRlQXMgPSBsb2NhbGVSZXN1bHQucGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm91dGVSZWdleCA9ICgwLCBfcm91dGVyZWdleC5nZXRSb3V0ZVJlZ2V4KShwYXRobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1clJvdXRlTWF0Y2ggPSAoMCwgX3JvdXRlbWF0Y2hlci5nZXRSb3V0ZU1hdGNoZXIpKHJvdXRlUmVnZXgpKG5ldyBVUkwocmV3cml0ZUFzLCBsb2NhdGlvbi5ocmVmKS5wYXRobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJSb3V0ZU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHF1ZXJ5LCBjdXJSb3V0ZU1hdGNoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHRoZSByb3V0ZUluZm8gYnJpbmdzIGEgcmVkaXJlY3Qgd2Ugc2ltcGx5IGFwcGx5IGl0LlxuICAgICAgICAgICAgaWYgKFwidHlwZVwiIGluIHJvdXRlSW5mbykge1xuICAgICAgICAgICAgICAgIGlmIChyb3V0ZUluZm8udHlwZSA9PT0gXCJyZWRpcmVjdC1pbnRlcm5hbFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYW5nZShtZXRob2QsIHJvdXRlSW5mby5uZXdVcmwsIHJvdXRlSW5mby5uZXdBcywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlSGFyZE5hdmlnYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiByb3V0ZUluZm8uZGVzdGluYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZXI6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKT0+e30pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHJvdXRlSW5mby5Db21wb25lbnQ7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50ICYmIGNvbXBvbmVudC51bnN0YWJsZV9zY3JpcHRMb2FkZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JpcHRzID0gW10uY29uY2F0KGNvbXBvbmVudC51bnN0YWJsZV9zY3JpcHRMb2FkZXIoKSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0cy5mb3JFYWNoKChzY3JpcHQpPT57XG4gICAgICAgICAgICAgICAgICAgICgwLCBfc2NyaXB0LmhhbmRsZUNsaWVudFNjcmlwdExvYWQpKHNjcmlwdC5wcm9wcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBoYW5kbGUgcmVkaXJlY3Qgb24gY2xpZW50LXRyYW5zaXRpb25cbiAgICAgICAgICAgIGlmICgocm91dGVJbmZvLl9fTl9TU0cgfHwgcm91dGVJbmZvLl9fTl9TU1ApICYmIHJvdXRlSW5mby5wcm9wcykge1xuICAgICAgICAgICAgICAgIGlmIChyb3V0ZUluZm8ucHJvcHMucGFnZVByb3BzICYmIHJvdXRlSW5mby5wcm9wcy5wYWdlUHJvcHMuX19OX1JFRElSRUNUKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVzZSB0aGUgZGVzdGluYXRpb24gZnJvbSByZWRpcmVjdCB3aXRob3V0IGFkZGluZyBsb2NhbGVcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5sb2NhbGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVzdGluYXRpb24gPSByb3V0ZUluZm8ucHJvcHMucGFnZVByb3BzLl9fTl9SRURJUkVDVDtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgZGVzdGluYXRpb24gaXMgaW50ZXJuYWwgKHJlc29sdmVzIHRvIGEgcGFnZSkgYW5kIGF0dGVtcHRcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xpZW50LW5hdmlnYXRpb24gaWYgaXQgaXMgZmFsbGluZyBiYWNrIHRvIGhhcmQgbmF2aWdhdGlvbiBpZlxuICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIG5vdFxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzdGluYXRpb24uc3RhcnRzV2l0aChcIi9cIikgJiYgcm91dGVJbmZvLnByb3BzLnBhZ2VQcm9wcy5fX05fUkVESVJFQ1RfQkFTRV9QQVRIICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkSHJlZiA9ICgwLCBfcGFyc2VyZWxhdGl2ZXVybC5wYXJzZVJlbGF0aXZlVXJsKShkZXN0aW5hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZWRIcmVmLnBhdGhuYW1lID0gcmVzb2x2ZUR5bmFtaWNSb3V0ZShwYXJzZWRIcmVmLnBhdGhuYW1lLCBwYWdlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHVybDogbmV3VXJsICwgYXM6IG5ld0FzICB9ID0gcHJlcGFyZVVybEFzKHRoaXMsIGRlc3RpbmF0aW9uLCBkZXN0aW5hdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFuZ2UobWV0aG9kLCBuZXdVcmwsIG5ld0FzLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVIYXJkTmF2aWdhdGlvbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGRlc3RpbmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVyOiB0aGlzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCk9Pnt9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV4dFN0YXRlLmlzUHJldmlldyA9ICEhcm91dGVJbmZvLnByb3BzLl9fTl9QUkVWSUVXO1xuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBTU0cgZGF0YSA0MDRcbiAgICAgICAgICAgICAgICBpZiAocm91dGVJbmZvLnByb3BzLm5vdEZvdW5kID09PSBTU0dfREFUQV9OT1RfRk9VTkQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5vdEZvdW5kUm91dGU7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmZldGNoQ29tcG9uZW50KFwiLzQwNFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdEZvdW5kUm91dGUgPSBcIi80MDRcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90Rm91bmRSb3V0ZSA9IFwiL19lcnJvclwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlSW5mbyA9IGF3YWl0IHRoaXMuZ2V0Um91dGVJbmZvKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlOiBub3RGb3VuZFJvdXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWU6IG5vdEZvdW5kUm91dGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRBcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlUHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFsbG93OiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZTogbmV4dFN0YXRlLmxvY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUHJldmlldzogbmV4dFN0YXRlLmlzUHJldmlldyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTm90Rm91bmQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcInR5cGVcIiBpbiByb3V0ZUluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgbWlkZGxld2FyZSBlZmZlY3Qgb24gLzQwNFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1F1ZXJ5VXBkYXRpbmcgJiYgdGhpcy5wYXRobmFtZSA9PT0gXCIvX2Vycm9yXCIgJiYgKChfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzID0gc2VsZi5fX05FWFRfREFUQV9fLnByb3BzKSA9PSBudWxsID8gdm9pZCAwIDogKF9zZWxmX19fTkVYVF9EQVRBX19fcHJvcHNfcGFnZVByb3BzID0gX3NlbGZfX19ORVhUX0RBVEFfX19wcm9wcy5wYWdlUHJvcHMpID09IG51bGwgPyB2b2lkIDAgOiBfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzX3BhZ2VQcm9wcy5zdGF0dXNDb2RlKSA9PT0gNTAwICYmICgoX3JvdXRlSW5mb19wcm9wcyA9IHJvdXRlSW5mby5wcm9wcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9yb3V0ZUluZm9fcHJvcHMucGFnZVByb3BzKSkge1xuICAgICAgICAgICAgICAgIC8vIGVuc3VyZSBzdGF0dXNDb2RlIGlzIHN0aWxsIGNvcnJlY3QgZm9yIHN0YXRpYyA1MDAgcGFnZVxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdXBkYXRpbmcgcXVlcnkgaW5mb3JtYXRpb25cbiAgICAgICAgICAgICAgICByb3V0ZUluZm8ucHJvcHMucGFnZVByb3BzLnN0YXR1c0NvZGUgPSA1MDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX3JvdXRlSW5mb19yb3V0ZTtcbiAgICAgICAgICAgIC8vIHNoYWxsb3cgcm91dGluZyBpcyBvbmx5IGFsbG93ZWQgZm9yIHNhbWUgcGFnZSBVUkwgY2hhbmdlcy5cbiAgICAgICAgICAgIGNvbnN0IGlzVmFsaWRTaGFsbG93Um91dGUgPSBvcHRpb25zLnNoYWxsb3cgJiYgbmV4dFN0YXRlLnJvdXRlID09PSAoKF9yb3V0ZUluZm9fcm91dGUgPSByb3V0ZUluZm8ucm91dGUpICE9IG51bGwgPyBfcm91dGVJbmZvX3JvdXRlIDogcm91dGUpO1xuICAgICAgICAgICAgdmFyIF9vcHRpb25zX3Njcm9sbDtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZFNjcm9sbCA9IChfb3B0aW9uc19zY3JvbGwgPSBvcHRpb25zLnNjcm9sbCkgIT0gbnVsbCA/IF9vcHRpb25zX3Njcm9sbCA6ICFpc1F1ZXJ5VXBkYXRpbmcgJiYgIWlzVmFsaWRTaGFsbG93Um91dGU7XG4gICAgICAgICAgICBjb25zdCByZXNldFNjcm9sbCA9IHNob3VsZFNjcm9sbCA/IHtcbiAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgIHk6IDBcbiAgICAgICAgICAgIH0gOiBudWxsO1xuICAgICAgICAgICAgY29uc3QgdXBjb21pbmdTY3JvbGxTdGF0ZSA9IGZvcmNlZFNjcm9sbCAhPSBudWxsID8gZm9yY2VkU2Nyb2xsIDogcmVzZXRTY3JvbGw7XG4gICAgICAgICAgICAvLyB0aGUgbmV3IHN0YXRlIHRoYXQgdGhlIHJvdXRlciBnb25uYSBzZXRcbiAgICAgICAgICAgIGNvbnN0IHVwY29taW5nUm91dGVyU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgLi4ubmV4dFN0YXRlLFxuICAgICAgICAgICAgICAgIHJvdXRlLFxuICAgICAgICAgICAgICAgIHBhdGhuYW1lLFxuICAgICAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgICAgIGFzUGF0aDogY2xlYW5lZEFzLFxuICAgICAgICAgICAgICAgIGlzRmFsbGJhY2s6IGZhbHNlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gV2hlbiB0aGUgcGFnZSBiZWluZyByZW5kZXJlZCBpcyB0aGUgNDA0IHBhZ2UsIHdlIHNob3VsZCBvbmx5IHVwZGF0ZSB0aGVcbiAgICAgICAgICAgIC8vIHF1ZXJ5IHBhcmFtZXRlcnMuIFJvdXRlIGNoYW5nZXMgaGVyZSBtaWdodCBhZGQgdGhlIGJhc2VQYXRoIHdoZW4gaXRcbiAgICAgICAgICAgIC8vIHdhc24ndCBvcmlnaW5hbGx5IHByZXNlbnQuIFRoaXMgaXMgYWxzbyB3aHkgdGhpcyBibG9jayBpcyBiZWZvcmUgdGhlXG4gICAgICAgICAgICAvLyBiZWxvdyBgY2hhbmdlU3RhdGVgIGNhbGwgd2hpY2ggdXBkYXRlcyB0aGUgYnJvd3NlcidzIGhpc3RvcnkgKGNoYW5naW5nXG4gICAgICAgICAgICAvLyB0aGUgVVJMKS5cbiAgICAgICAgICAgIGlmIChpc1F1ZXJ5VXBkYXRpbmcgJiYgaXNFcnJvclJvdXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9zZWxmX19fTkVYVF9EQVRBX19fcHJvcHMxLCBfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzX3BhZ2VQcm9wczEsIF9yb3V0ZUluZm9fcHJvcHMxO1xuICAgICAgICAgICAgICAgIHJvdXRlSW5mbyA9IGF3YWl0IHRoaXMuZ2V0Um91dGVJbmZvKHtcbiAgICAgICAgICAgICAgICAgICAgcm91dGU6IHRoaXMucGF0aG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiB0aGlzLnBhdGhuYW1lLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgYXMsXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkQXMsXG4gICAgICAgICAgICAgICAgICAgIHJvdXRlUHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWxsb3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZTogbmV4dFN0YXRlLmxvY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgaXNQcmV2aWV3OiBuZXh0U3RhdGUuaXNQcmV2aWV3LFxuICAgICAgICAgICAgICAgICAgICBpc1F1ZXJ5VXBkYXRpbmc6IGlzUXVlcnlVcGRhdGluZyAmJiAhdGhpcy5pc0ZhbGxiYWNrXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKFwidHlwZVwiIGluIHJvdXRlSW5mbykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIG1pZGRsZXdhcmUgZWZmZWN0IG9uIFwiICsgdGhpcy5wYXRobmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhdGhuYW1lID09PSBcIi9fZXJyb3JcIiAmJiAoKF9zZWxmX19fTkVYVF9EQVRBX19fcHJvcHMxID0gc2VsZi5fX05FWFRfREFUQV9fLnByb3BzKSA9PSBudWxsID8gdm9pZCAwIDogKF9zZWxmX19fTkVYVF9EQVRBX19fcHJvcHNfcGFnZVByb3BzMSA9IF9zZWxmX19fTkVYVF9EQVRBX19fcHJvcHMxLnBhZ2VQcm9wcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9zZWxmX19fTkVYVF9EQVRBX19fcHJvcHNfcGFnZVByb3BzMS5zdGF0dXNDb2RlKSA9PT0gNTAwICYmICgoX3JvdXRlSW5mb19wcm9wczEgPSByb3V0ZUluZm8ucHJvcHMpID09IG51bGwgPyB2b2lkIDAgOiBfcm91dGVJbmZvX3Byb3BzMS5wYWdlUHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVuc3VyZSBzdGF0dXNDb2RlIGlzIHN0aWxsIGNvcnJlY3QgZm9yIHN0YXRpYyA1MDAgcGFnZVxuICAgICAgICAgICAgICAgICAgICAvLyB3aGVuIHVwZGF0aW5nIHF1ZXJ5IGluZm9ybWF0aW9uXG4gICAgICAgICAgICAgICAgICAgIHJvdXRlSW5mby5wcm9wcy5wYWdlUHJvcHMuc3RhdHVzQ29kZSA9IDUwMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXQodXBjb21pbmdSb3V0ZXJTdGF0ZSwgcm91dGVJbmZvLCB1cGNvbWluZ1Njcm9sbFN0YXRlKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCgwLCBfaXNlcnJvci5kZWZhdWx0KShlcnIpICYmIGVyci5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFJvdXRlci5ldmVudHMuZW1pdChcInJvdXRlQ2hhbmdlRXJyb3JcIiwgZXJyLCBjbGVhbmVkQXMsIHJvdXRlUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoXCJiZWZvcmVIaXN0b3J5Q2hhbmdlXCIsIGFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlU3RhdGUobWV0aG9kLCB1cmwsIGFzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIC8vIGZvciBxdWVyeSB1cGRhdGVzIHdlIGNhbiBza2lwIGl0IGlmIHRoZSBzdGF0ZSBpcyB1bmNoYW5nZWQgYW5kIHdlIGRvbid0XG4gICAgICAgICAgICAvLyBuZWVkIHRvIHNjcm9sbFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3ZlcmNlbC9uZXh0LmpzL2lzc3Vlcy8zNzEzOVxuICAgICAgICAgICAgY29uc3QgY2FuU2tpcFVwZGF0aW5nID0gaXNRdWVyeVVwZGF0aW5nICYmICF1cGNvbWluZ1Njcm9sbFN0YXRlICYmICFyZWFkeVN0YXRlQ2hhbmdlICYmICFsb2NhbGVDaGFuZ2UgJiYgKDAsIF9jb21wYXJlc3RhdGVzLmNvbXBhcmVSb3V0ZXJTdGF0ZXMpKHVwY29taW5nUm91dGVyU3RhdGUsIHRoaXMuc3RhdGUpO1xuICAgICAgICAgICAgaWYgKCFjYW5Ta2lwVXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldCh1cGNvbWluZ1JvdXRlclN0YXRlLCByb3V0ZUluZm8sIHVwY29taW5nU2Nyb2xsU3RhdGUpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuY2FuY2VsbGVkKSByb3V0ZUluZm8uZXJyb3IgPSByb3V0ZUluZm8uZXJyb3IgfHwgZTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocm91dGVJbmZvLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNRdWVyeVVwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoXCJyb3V0ZUNoYW5nZUVycm9yXCIsIHJvdXRlSW5mby5lcnJvciwgY2xlYW5lZEFzLCByb3V0ZVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyByb3V0ZUluZm8uZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0U3RhdGUubG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubGFuZyA9IG5leHRTdGF0ZS5sb2NhbGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpc1F1ZXJ5VXBkYXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgUm91dGVyLmV2ZW50cy5lbWl0KFwicm91dGVDaGFuZ2VDb21wbGV0ZVwiLCBhcywgcm91dGVQcm9wcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEEgaGFzaCBtYXJrICMgaXMgdGhlIG9wdGlvbmFsIGxhc3QgcGFydCBvZiBhIFVSTFxuICAgICAgICAgICAgICAgIGNvbnN0IGhhc2hSZWdleCA9IC8jLiskLztcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkU2Nyb2xsICYmIGhhc2hSZWdleC50ZXN0KGFzKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRvSGFzaChhcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKCgwLCBfaXNlcnJvci5kZWZhdWx0KShlcnIpICYmIGVyci5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hhbmdlU3RhdGUobWV0aG9kLCB1cmwsIGFzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuaGlzdG9yeSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJXYXJuaW5nOiB3aW5kb3cuaGlzdG9yeSBpcyBub3QgYXZhaWxhYmxlLlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5oaXN0b3J5W21ldGhvZF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiV2FybmluZzogd2luZG93Lmhpc3RvcnkuXCIgKyBtZXRob2QgKyBcIiBpcyBub3QgYXZhaWxhYmxlXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0aG9kICE9PSBcInB1c2hTdGF0ZVwiIHx8ICgwLCBfdXRpbHMuZ2V0VVJMKSgpICE9PSBhcykge1xuICAgICAgICAgICAgdGhpcy5fc2hhbGxvdyA9IG9wdGlvbnMuc2hhbGxvdztcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5W21ldGhvZF0oe1xuICAgICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgICBhcyxcbiAgICAgICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgICAgIF9fTjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBrZXk6IHRoaXMuX2tleSA9IG1ldGhvZCAhPT0gXCJwdXNoU3RhdGVcIiA/IHRoaXMuX2tleSA6IGNyZWF0ZUtleSgpXG4gICAgICAgICAgICB9LCAvLyBNb3N0IGJyb3dzZXJzIGN1cnJlbnRseSBpZ25vcmVzIHRoaXMgcGFyYW1ldGVyLCBhbHRob3VnaCB0aGV5IG1heSB1c2UgaXQgaW4gdGhlIGZ1dHVyZS5cbiAgICAgICAgICAgIC8vIFBhc3NpbmcgdGhlIGVtcHR5IHN0cmluZyBoZXJlIHNob3VsZCBiZSBzYWZlIGFnYWluc3QgZnV0dXJlIGNoYW5nZXMgdG8gdGhlIG1ldGhvZC5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IaXN0b3J5L3JlcGxhY2VTdGF0ZVxuICAgICAgICAgICAgXCJcIiwgYXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGhhbmRsZVJvdXRlSW5mb0Vycm9yKGVyciwgcGF0aG5hbWUsIHF1ZXJ5LCBhcywgcm91dGVQcm9wcywgbG9hZEVycm9yRmFpbCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIGlmIChlcnIuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAvLyBidWJibGUgdXAgY2FuY2VsbGF0aW9uIGVycm9yc1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgX3JvdXRlbG9hZGVyLmlzQXNzZXRFcnJvcikoZXJyKSB8fCBsb2FkRXJyb3JGYWlsKSB7XG4gICAgICAgICAgICBSb3V0ZXIuZXZlbnRzLmVtaXQoXCJyb3V0ZUNoYW5nZUVycm9yXCIsIGVyciwgYXMsIHJvdXRlUHJvcHMpO1xuICAgICAgICAgICAgLy8gSWYgd2UgY2FuJ3QgbG9hZCB0aGUgcGFnZSBpdCBjb3VsZCBiZSBvbmUgb2YgZm9sbG93aW5nIHJlYXNvbnNcbiAgICAgICAgICAgIC8vICAxLiBQYWdlIGRvZXNuJ3QgZXhpc3RzXG4gICAgICAgICAgICAvLyAgMi4gUGFnZSBkb2VzIGV4aXN0IGluIGEgZGlmZmVyZW50IHpvbmVcbiAgICAgICAgICAgIC8vICAzLiBJbnRlcm5hbCBlcnJvciB3aGlsZSBsb2FkaW5nIHRoZSBwYWdlXG4gICAgICAgICAgICAvLyBTbywgZG9pbmcgYSBoYXJkIHJlbG9hZCBpcyB0aGUgcHJvcGVyIHdheSB0byBkZWFsIHdpdGggdGhpcy5cbiAgICAgICAgICAgIGhhbmRsZUhhcmROYXZpZ2F0aW9uKHtcbiAgICAgICAgICAgICAgICB1cmw6IGFzLFxuICAgICAgICAgICAgICAgIHJvdXRlcjogdGhpc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBDaGFuZ2luZyB0aGUgVVJMIGRvZXNuJ3QgYmxvY2sgZXhlY3V0aW5nIHRoZSBjdXJyZW50IGNvZGUgcGF0aC5cbiAgICAgICAgICAgIC8vIFNvIGxldCdzIHRocm93IGEgY2FuY2VsbGF0aW9uIGVycm9yIHN0b3AgdGhlIHJvdXRpbmcgbG9naWMuXG4gICAgICAgICAgICB0aHJvdyBidWlsZENhbmNlbGxhdGlvbkVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBwcm9wcztcbiAgICAgICAgICAgIGNvbnN0IHsgcGFnZTogQ29tcG9uZW50ICwgc3R5bGVTaGVldHMgIH0gPSBhd2FpdCB0aGlzLmZldGNoQ29tcG9uZW50KFwiL19lcnJvclwiKTtcbiAgICAgICAgICAgIGNvbnN0IHJvdXRlSW5mbyA9IHtcbiAgICAgICAgICAgICAgICBwcm9wcyxcbiAgICAgICAgICAgICAgICBDb21wb25lbnQsXG4gICAgICAgICAgICAgICAgc3R5bGVTaGVldHMsXG4gICAgICAgICAgICAgICAgZXJyLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoIXJvdXRlSW5mby5wcm9wcykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlSW5mby5wcm9wcyA9IGF3YWl0IHRoaXMuZ2V0SW5pdGlhbFByb3BzKENvbXBvbmVudCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChnaXBFcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGVycm9yIHBhZ2UgYGdldEluaXRpYWxQcm9wc2A6IFwiLCBnaXBFcnIpO1xuICAgICAgICAgICAgICAgICAgICByb3V0ZUluZm8ucHJvcHMgPSB7fTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcm91dGVJbmZvO1xuICAgICAgICB9IGNhdGNoIChyb3V0ZUluZm9FcnIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZVJvdXRlSW5mb0Vycm9yKCgwLCBfaXNlcnJvci5kZWZhdWx0KShyb3V0ZUluZm9FcnIpID8gcm91dGVJbmZvRXJyIDogbmV3IEVycm9yKHJvdXRlSW5mb0VyciArIFwiXCIpLCBwYXRobmFtZSwgcXVlcnksIGFzLCByb3V0ZVByb3BzLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBnZXRSb3V0ZUluZm8ocGFyYW0pIHtcbiAgICAgICAgbGV0IHsgcm91dGU6IHJlcXVlc3RlZFJvdXRlICwgcGF0aG5hbWUgLCBxdWVyeSAsIGFzICwgcmVzb2x2ZWRBcyAsIHJvdXRlUHJvcHMgLCBsb2NhbGUgLCBoYXNNaWRkbGV3YXJlICwgaXNQcmV2aWV3ICwgdW5zdGFibGVfc2tpcENsaWVudENhY2hlICwgaXNRdWVyeVVwZGF0aW5nICwgaXNNaWRkbGV3YXJlUmV3cml0ZSAsIGlzTm90Rm91bmQgIH0gPSBwYXJhbTtcbiAgICAgICAgLyoqXG4gICAgICogVGhpcyBgcm91dGVgIGJpbmRpbmcgY2FuIGNoYW5nZSBpZiB0aGVyZSdzIGEgcmV3cml0ZVxuICAgICAqIHNvIHdlIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIG9yaWdpbmFsIHJlcXVlc3RlZCByb3V0ZVxuICAgICAqIHNvIHdlIGNhbiBzdG9yZSB0aGUgY2FjaGUgZm9yIGl0IGFuZCBhdm9pZCByZS1yZXF1ZXN0aW5nIGV2ZXJ5IHRpbWVcbiAgICAgKiBmb3Igc2hhbGxvdyByb3V0aW5nIHB1cnBvc2VzLlxuICAgICAqLyBsZXQgcm91dGUgPSByZXF1ZXN0ZWRSb3V0ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBfZGF0YV9lZmZlY3QsIF9kYXRhX2VmZmVjdDEsIF9kYXRhX2VmZmVjdDIsIF9kYXRhX3Jlc3BvbnNlO1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlQ2FuY2VsbGVkID0gZ2V0Q2FuY2VsbGVkSGFuZGxlcih7XG4gICAgICAgICAgICAgICAgcm91dGUsXG4gICAgICAgICAgICAgICAgcm91dGVyOiB0aGlzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBleGlzdGluZ0luZm8gPSB0aGlzLmNvbXBvbmVudHNbcm91dGVdO1xuICAgICAgICAgICAgaWYgKHJvdXRlUHJvcHMuc2hhbGxvdyAmJiBleGlzdGluZ0luZm8gJiYgdGhpcy5yb3V0ZSA9PT0gcm91dGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdJbmZvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc01pZGRsZXdhcmUpIHtcbiAgICAgICAgICAgICAgICBleGlzdGluZ0luZm8gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY2FjaGVkUm91dGVJbmZvID0gZXhpc3RpbmdJbmZvICYmICEoXCJpbml0aWFsXCIgaW4gZXhpc3RpbmdJbmZvKSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJkZXZlbG9wbWVudFwiID8gZXhpc3RpbmdJbmZvIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29uc3QgaXNCYWNrZ3JvdW5kID0gaXNRdWVyeVVwZGF0aW5nO1xuICAgICAgICAgICAgY29uc3QgZmV0Y2hOZXh0RGF0YVBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICBkYXRhSHJlZjogdGhpcy5wYWdlTG9hZGVyLmdldERhdGFIcmVmKHtcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIHNraXBJbnRlcnBvbGF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhc1BhdGg6IGlzTm90Rm91bmQgPyBcIi80MDRcIiA6IHJlc29sdmVkQXMsXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGhhc01pZGRsZXdhcmU6IHRydWUsXG4gICAgICAgICAgICAgICAgaXNTZXJ2ZXJSZW5kZXI6IHRoaXMuaXNTc3IsXG4gICAgICAgICAgICAgICAgcGFyc2VKU09OOiB0cnVlLFxuICAgICAgICAgICAgICAgIGluZmxpZ2h0Q2FjaGU6IGlzQmFja2dyb3VuZCA/IHRoaXMuc2JjIDogdGhpcy5zZGMsXG4gICAgICAgICAgICAgICAgcGVyc2lzdENhY2hlOiAhaXNQcmV2aWV3LFxuICAgICAgICAgICAgICAgIGlzUHJlZmV0Y2g6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHVuc3RhYmxlX3NraXBDbGllbnRDYWNoZSxcbiAgICAgICAgICAgICAgICBpc0JhY2tncm91bmRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsZXQgZGF0YSA9IGlzUXVlcnlVcGRhdGluZyAmJiAhaXNNaWRkbGV3YXJlUmV3cml0ZSA/IG51bGwgOiBhd2FpdCB3aXRoTWlkZGxld2FyZUVmZmVjdHMoe1xuICAgICAgICAgICAgICAgIGZldGNoRGF0YTogKCk9PmZldGNoTmV4dERhdGEoZmV0Y2hOZXh0RGF0YVBhcmFtcyksXG4gICAgICAgICAgICAgICAgYXNQYXRoOiBpc05vdEZvdW5kID8gXCIvNDA0XCIgOiByZXNvbHZlZEFzLFxuICAgICAgICAgICAgICAgIGxvY2FsZTogbG9jYWxlLFxuICAgICAgICAgICAgICAgIHJvdXRlcjogdGhpc1xuICAgICAgICAgICAgfSkuY2F0Y2goKGVycik9PntcbiAgICAgICAgICAgICAgICAvLyB3ZSBkb24ndCBoYXJkIGVycm9yIGR1cmluZyBxdWVyeSB1cGRhdGluZ1xuICAgICAgICAgICAgICAgIC8vIGFzIGl0J3MgdW4tbmVjZXNzYXJ5IGFuZCBkb2Vzbid0IG5lZWQgdG8gYmUgZmF0YWxcbiAgICAgICAgICAgICAgICAvLyB1bmxlc3MgaXQgaXMgYSBmYWxsYmFjayByb3V0ZSBhbmQgdGhlIHByb3BzIGNhbid0XG4gICAgICAgICAgICAgICAgLy8gYmUgbG9hZGVkXG4gICAgICAgICAgICAgICAgaWYgKGlzUXVlcnlVcGRhdGluZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyB3aGVuIHJlbmRlcmluZyBlcnJvciByb3V0ZXMgd2UgZG9uJ3QgYXBwbHkgbWlkZGxld2FyZVxuICAgICAgICAgICAgLy8gZWZmZWN0c1xuICAgICAgICAgICAgaWYgKGRhdGEgJiYgKHBhdGhuYW1lID09PSBcIi9fZXJyb3JcIiB8fCBwYXRobmFtZSA9PT0gXCIvNDA0XCIpKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5lZmZlY3QgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNRdWVyeVVwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqc29uOiBzZWxmLl9fTkVYVF9EQVRBX18ucHJvcHNcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLmpzb24gPSBzZWxmLl9fTkVYVF9EQVRBX18ucHJvcHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlQ2FuY2VsbGVkKCk7XG4gICAgICAgICAgICBpZiAoKGRhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IChfZGF0YV9lZmZlY3QgPSBkYXRhLmVmZmVjdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kYXRhX2VmZmVjdC50eXBlKSA9PT0gXCJyZWRpcmVjdC1pbnRlcm5hbFwiIHx8IChkYXRhID09IG51bGwgPyB2b2lkIDAgOiAoX2RhdGFfZWZmZWN0MSA9IGRhdGEuZWZmZWN0KSA9PSBudWxsID8gdm9pZCAwIDogX2RhdGFfZWZmZWN0MS50eXBlKSA9PT0gXCJyZWRpcmVjdC1leHRlcm5hbFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuZWZmZWN0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChkYXRhID09IG51bGwgPyB2b2lkIDAgOiAoX2RhdGFfZWZmZWN0MiA9IGRhdGEuZWZmZWN0KSA9PSBudWxsID8gdm9pZCAwIDogX2RhdGFfZWZmZWN0Mi50eXBlKSA9PT0gXCJyZXdyaXRlXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNvbHZlZFJvdXRlID0gKDAsIF9yZW1vdmV0cmFpbGluZ3NsYXNoLnJlbW92ZVRyYWlsaW5nU2xhc2gpKGRhdGEuZWZmZWN0LnJlc29sdmVkSHJlZik7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFnZXMgPSBhd2FpdCB0aGlzLnBhZ2VMb2FkZXIuZ2V0UGFnZUxpc3QoKTtcbiAgICAgICAgICAgICAgICAvLyBkdXJpbmcgcXVlcnkgdXBkYXRpbmcgdGhlIHBhZ2UgbXVzdCBtYXRjaCBhbHRob3VnaCBkdXJpbmdcbiAgICAgICAgICAgICAgICAvLyBjbGllbnQtdHJhbnNpdGlvbiBhIHJlZGlyZWN0IHRoYXQgZG9lc24ndCBtYXRjaCBhIHBhZ2VcbiAgICAgICAgICAgICAgICAvLyBjYW4gYmUgcmV0dXJuZWQgYW5kIHRoaXMgc2hvdWxkIHRyaWdnZXIgYSBoYXJkIG5hdmlnYXRpb25cbiAgICAgICAgICAgICAgICAvLyB3aGljaCBpcyB2YWxpZCBmb3IgaW5jcmVtZW50YWwgbWlncmF0aW9uXG4gICAgICAgICAgICAgICAgaWYgKCFpc1F1ZXJ5VXBkYXRpbmcgfHwgcGFnZXMuaW5jbHVkZXMocmVzb2x2ZWRSb3V0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcm91dGUgPSByZXNvbHZlZFJvdXRlO1xuICAgICAgICAgICAgICAgICAgICBwYXRobmFtZSA9IGRhdGEuZWZmZWN0LnJlc29sdmVkSHJlZjtcbiAgICAgICAgICAgICAgICAgICAgcXVlcnkgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5xdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRhdGEuZWZmZWN0LnBhcnNlZEFzLnF1ZXJ5XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmVkQXMgPSAoMCwgX3JlbW92ZWJhc2VwYXRoLnJlbW92ZUJhc2VQYXRoKSgoMCwgX25vcm1hbGl6ZWxvY2FsZXBhdGgubm9ybWFsaXplTG9jYWxlUGF0aCkoZGF0YS5lZmZlY3QucGFyc2VkQXMucGF0aG5hbWUsIHRoaXMubG9jYWxlcykucGF0aG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBhZ2FpbiB0aGUgY2FjaGUgd2l0aCB0aGUgbmV3IGRlc3RpbmF0aW9uLlxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZ0luZm8gPSB0aGlzLmNvbXBvbmVudHNbcm91dGVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAocm91dGVQcm9wcy5zaGFsbG93ICYmIGV4aXN0aW5nSW5mbyAmJiB0aGlzLnJvdXRlID09PSByb3V0ZSAmJiAhaGFzTWlkZGxld2FyZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIG1hdGNoIHdpdGggdGhlIGN1cnJlbnQgcm91dGUgZHVlIHRvIHJld3JpdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSBjYW4gY29weSB0aGUgZXhpc3RpbmcgaW5mb3JtYXRpb24gdG8gdGhlIHJld3JpdHRlbiBvbmUuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGVuLCB3ZSByZXR1cm4gdGhlIGluZm9ybWF0aW9uIGFsb25nIHdpdGggdGhlIG1hdGNoZWQgcm91dGUuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmV4aXN0aW5nSW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoMCwgX2lzYXBpcm91dGUuaXNBUElSb3V0ZSkocm91dGUpKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlSGFyZE5hdmlnYXRpb24oe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IGFzLFxuICAgICAgICAgICAgICAgICAgICByb3V0ZXI6IHRoaXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCk9Pnt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJvdXRlSW5mbyA9IGNhY2hlZFJvdXRlSW5mbyB8fCBhd2FpdCB0aGlzLmZldGNoQ29tcG9uZW50KHJvdXRlKS50aGVuKChyZXMpPT4oe1xuICAgICAgICAgICAgICAgICAgICBDb21wb25lbnQ6IHJlcy5wYWdlLFxuICAgICAgICAgICAgICAgICAgICBzdHlsZVNoZWV0czogcmVzLnN0eWxlU2hlZXRzLFxuICAgICAgICAgICAgICAgICAgICBfX05fU1NHOiByZXMubW9kLl9fTl9TU0csXG4gICAgICAgICAgICAgICAgICAgIF9fTl9TU1A6IHJlcy5tb2QuX19OX1NTUFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGlzVmFsaWRFbGVtZW50VHlwZSAgfSA9IHJlcXVpcmUoXCJuZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QtaXNcIik7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkRWxlbWVudFR5cGUocm91dGVJbmZvLkNvbXBvbmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgZGVmYXVsdCBleHBvcnQgaXMgbm90IGEgUmVhY3QgQ29tcG9uZW50IGluIHBhZ2U6IFwiJyArIHBhdGhuYW1lICsgJ1wiJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgd2FzQmFpbGVkUHJlZmV0Y2ggPSBkYXRhID09IG51bGwgPyB2b2lkIDAgOiAoX2RhdGFfcmVzcG9uc2UgPSBkYXRhLnJlc3BvbnNlKSA9PSBudWxsID8gdm9pZCAwIDogX2RhdGFfcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJ4LW1pZGRsZXdhcmUtc2tpcFwiKTtcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZEZldGNoRGF0YSA9IHJvdXRlSW5mby5fX05fU1NHIHx8IHJvdXRlSW5mby5fX05fU1NQO1xuICAgICAgICAgICAgLy8gRm9yIG5vbi1TU0cgcHJlZmV0Y2hlcyB0aGF0IGJhaWxlZCBiZWZvcmUgc2VuZGluZyBkYXRhXG4gICAgICAgICAgICAvLyB3ZSBjbGVhciB0aGUgY2FjaGUgdG8gZmV0Y2ggZnVsbCByZXNwb25zZVxuICAgICAgICAgICAgaWYgKHdhc0JhaWxlZFByZWZldGNoICYmIChkYXRhID09IG51bGwgPyB2b2lkIDAgOiBkYXRhLmRhdGFIcmVmKSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnNkY1tkYXRhLmRhdGFIcmVmXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgcHJvcHMgLCBjYWNoZUtleSAgfSA9IGF3YWl0IHRoaXMuX2dldERhdGEoYXN5bmMgKCk9PntcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkRmV0Y2hEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoZGF0YSA9PSBudWxsID8gdm9pZCAwIDogZGF0YS5qc29uKSAmJiAhd2FzQmFpbGVkUHJlZmV0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVLZXk6IGRhdGEuY2FjaGVLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHM6IGRhdGEuanNvblxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhSHJlZiA9IChkYXRhID09IG51bGwgPyB2b2lkIDAgOiBkYXRhLmRhdGFIcmVmKSA/IGRhdGEuZGF0YUhyZWYgOiB0aGlzLnBhZ2VMb2FkZXIuZ2V0RGF0YUhyZWYoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBhc1BhdGg6IHJlc29sdmVkQXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZldGNoZWQgPSBhd2FpdCBmZXRjaE5leHREYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFIcmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTZXJ2ZXJSZW5kZXI6IHRoaXMuaXNTc3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUpTT046IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZsaWdodENhY2hlOiB3YXNCYWlsZWRQcmVmZXRjaCA/IHt9IDogdGhpcy5zZGMsXG4gICAgICAgICAgICAgICAgICAgICAgICBwZXJzaXN0Q2FjaGU6ICFpc1ByZXZpZXcsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1ByZWZldGNoOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuc3RhYmxlX3NraXBDbGllbnRDYWNoZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlS2V5OiBmZXRjaGVkLmNhY2hlS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHM6IGZldGNoZWQuanNvbiB8fCB7fVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgcHJvcHM6IGF3YWl0IHRoaXMuZ2V0SW5pdGlhbFByb3BzKHJvdXRlSW5mby5Db21wb25lbnQsIC8vIHdlIHByb3ZpZGUgQXBwVHJlZSBsYXRlciBzbyB0aGlzIG5lZWRzIHRvIGJlIGBhbnlgXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgICAgICAgICAgICBhc1BhdGg6IGFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlczogdGhpcy5sb2NhbGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdExvY2FsZTogdGhpcy5kZWZhdWx0TG9jYWxlXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gT25seSBidXN0IHRoZSBkYXRhIGNhY2hlIGZvciBTU1Agcm91dGVzIGFsdGhvdWdoXG4gICAgICAgICAgICAvLyBtaWRkbGV3YXJlIGNhbiBza2lwIGNhY2hlIHBlciByZXF1ZXN0IHdpdGhcbiAgICAgICAgICAgIC8vIHgtbWlkZGxld2FyZS1jYWNoZTogbm8tY2FjaGUgYXMgd2VsbFxuICAgICAgICAgICAgaWYgKHJvdXRlSW5mby5fX05fU1NQICYmIGZldGNoTmV4dERhdGFQYXJhbXMuZGF0YUhyZWYgJiYgY2FjaGVLZXkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zZGNbY2FjaGVLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gd2Uga2ljayBvZmYgYSBIRUFEIHJlcXVlc3QgaW4gdGhlIGJhY2tncm91bmRcbiAgICAgICAgICAgIC8vIHdoZW4gYSBub24tcHJlZmV0Y2ggcmVxdWVzdCBpcyBtYWRlIHRvIHNpZ25hbCByZXZhbGlkYXRpb25cbiAgICAgICAgICAgIGlmICghdGhpcy5pc1ByZXZpZXcgJiYgcm91dGVJbmZvLl9fTl9TU0cgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwiZGV2ZWxvcG1lbnRcIiAmJiAhaXNRdWVyeVVwZGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgZmV0Y2hOZXh0RGF0YShPYmplY3QuYXNzaWduKHt9LCBmZXRjaE5leHREYXRhUGFyYW1zLCB7XG4gICAgICAgICAgICAgICAgICAgIGlzQmFja2dyb3VuZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcGVyc2lzdENhY2hlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaW5mbGlnaHRDYWNoZTogdGhpcy5zYmNcbiAgICAgICAgICAgICAgICB9KSkuY2F0Y2goKCk9Pnt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb3BzLnBhZ2VQcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIHByb3BzLnBhZ2VQcm9wcyk7XG4gICAgICAgICAgICByb3V0ZUluZm8ucHJvcHMgPSBwcm9wcztcbiAgICAgICAgICAgIHJvdXRlSW5mby5yb3V0ZSA9IHJvdXRlO1xuICAgICAgICAgICAgcm91dGVJbmZvLnF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgICAgICByb3V0ZUluZm8ucmVzb2x2ZWRBcyA9IHJlc29sdmVkQXM7XG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudHNbcm91dGVdID0gcm91dGVJbmZvO1xuICAgICAgICAgICAgcmV0dXJuIHJvdXRlSW5mbztcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVSb3V0ZUluZm9FcnJvcigoMCwgX2lzZXJyb3IuZ2V0UHJvcGVyRXJyb3IpKGVyciksIHBhdGhuYW1lLCBxdWVyeSwgYXMsIHJvdXRlUHJvcHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldChzdGF0ZSwgZGF0YSwgcmVzZXRTY3JvbGwpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICByZXR1cm4gdGhpcy5zdWIoZGF0YSwgdGhpcy5jb21wb25lbnRzW1wiL19hcHBcIl0uQ29tcG9uZW50LCByZXNldFNjcm9sbCk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBDYWxsYmFjayB0byBleGVjdXRlIGJlZm9yZSByZXBsYWNpbmcgcm91dGVyIHN0YXRlXG4gICAqIEBwYXJhbSBjYiBjYWxsYmFjayB0byBiZSBleGVjdXRlZFxuICAgKi8gYmVmb3JlUG9wU3RhdGUoY2IpIHtcbiAgICAgICAgdGhpcy5fYnBzID0gY2I7XG4gICAgfVxuICAgIG9ubHlBSGFzaENoYW5nZShhcykge1xuICAgICAgICBpZiAoIXRoaXMuYXNQYXRoKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IFtvbGRVcmxOb0hhc2gsIG9sZEhhc2hdID0gdGhpcy5hc1BhdGguc3BsaXQoXCIjXCIpO1xuICAgICAgICBjb25zdCBbbmV3VXJsTm9IYXNoLCBuZXdIYXNoXSA9IGFzLnNwbGl0KFwiI1wiKTtcbiAgICAgICAgLy8gTWFrZXMgc3VyZSB3ZSBzY3JvbGwgdG8gdGhlIHByb3ZpZGVkIGhhc2ggaWYgdGhlIHVybC9oYXNoIGFyZSB0aGUgc2FtZVxuICAgICAgICBpZiAobmV3SGFzaCAmJiBvbGRVcmxOb0hhc2ggPT09IG5ld1VybE5vSGFzaCAmJiBvbGRIYXNoID09PSBuZXdIYXNoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgdXJscyBhcmUgY2hhbmdlLCB0aGVyZSdzIG1vcmUgdGhhbiBhIGhhc2ggY2hhbmdlXG4gICAgICAgIGlmIChvbGRVcmxOb0hhc2ggIT09IG5ld1VybE5vSGFzaCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHRoZSBoYXNoIGhhcyBjaGFuZ2VkLCB0aGVuIGl0J3MgYSBoYXNoIG9ubHkgY2hhbmdlLlxuICAgICAgICAvLyBUaGlzIGNoZWNrIGlzIG5lY2Vzc2FyeSB0byBoYW5kbGUgYm90aCB0aGUgZW50ZXIgYW5kXG4gICAgICAgIC8vIGxlYXZlIGhhc2ggPT09ICcnIGNhc2VzLiBUaGUgaWRlbnRpdHkgY2FzZSBmYWxscyB0aHJvdWdoXG4gICAgICAgIC8vIGFuZCBpcyB0cmVhdGVkIGFzIGEgbmV4dCByZWxvYWQuXG4gICAgICAgIHJldHVybiBvbGRIYXNoICE9PSBuZXdIYXNoO1xuICAgIH1cbiAgICBzY3JvbGxUb0hhc2goYXMpIHtcbiAgICAgICAgY29uc3QgWywgaGFzaCA9IFwiXCJdID0gYXMuc3BsaXQoXCIjXCIpO1xuICAgICAgICAvLyBTY3JvbGwgdG8gdG9wIGlmIHRoZSBoYXNoIGlzIGp1c3QgYCNgIHdpdGggbm8gdmFsdWUgb3IgYCN0b3BgXG4gICAgICAgIC8vIFRvIG1pcnJvciBicm93c2Vyc1xuICAgICAgICBpZiAoaGFzaCA9PT0gXCJcIiB8fCBoYXNoID09PSBcInRvcFwiKSB7XG4gICAgICAgICAgICAoMCwgX2hhbmRsZXNtb290aHNjcm9sbC5oYW5kbGVTbW9vdGhTY3JvbGwpKCgpPT53aW5kb3cuc2Nyb2xsVG8oMCwgMCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIERlY29kZSBoYXNoIHRvIG1ha2Ugbm9uLWxhdGluIGFuY2hvciB3b3Jrcy5cbiAgICAgICAgY29uc3QgcmF3SGFzaCA9IGRlY29kZVVSSUNvbXBvbmVudChoYXNoKTtcbiAgICAgICAgLy8gRmlyc3Qgd2UgY2hlY2sgaWYgdGhlIGVsZW1lbnQgYnkgaWQgaXMgZm91bmRcbiAgICAgICAgY29uc3QgaWRFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHJhd0hhc2gpO1xuICAgICAgICBpZiAoaWRFbCkge1xuICAgICAgICAgICAgKDAsIF9oYW5kbGVzbW9vdGhzY3JvbGwuaGFuZGxlU21vb3RoU2Nyb2xsKSgoKT0+aWRFbC5zY3JvbGxJbnRvVmlldygpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIGVsZW1lbnQgd2l0aCB0aGUgaWQsIHdlIGNoZWNrIHRoZSBgbmFtZWAgcHJvcGVydHlcbiAgICAgICAgLy8gVG8gbWlycm9yIGJyb3dzZXJzXG4gICAgICAgIGNvbnN0IG5hbWVFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKHJhd0hhc2gpWzBdO1xuICAgICAgICBpZiAobmFtZUVsKSB7XG4gICAgICAgICAgICAoMCwgX2hhbmRsZXNtb290aHNjcm9sbC5oYW5kbGVTbW9vdGhTY3JvbGwpKCgpPT5uYW1lRWwuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXJsSXNOZXcoYXNQYXRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFzUGF0aCAhPT0gYXNQYXRoO1xuICAgIH1cbiAgICAvKipcbiAgICogUHJlZmV0Y2ggcGFnZSBjb2RlLCB5b3UgbWF5IHdhaXQgZm9yIHRoZSBkYXRhIGR1cmluZyBwYWdlIHJlbmRlcmluZy5cbiAgICogVGhpcyBmZWF0dXJlIG9ubHkgd29ya3MgaW4gcHJvZHVjdGlvbiFcbiAgICogQHBhcmFtIHVybCB0aGUgaHJlZiBvZiBwcmVmZXRjaGVkIHBhZ2VcbiAgICogQHBhcmFtIGFzUGF0aCB0aGUgYXMgcGF0aCBvZiB0aGUgcHJlZmV0Y2hlZCBwYWdlXG4gICAqLyBhc3luYyBwcmVmZXRjaCh1cmwsIGFzUGF0aCwgb3B0aW9ucykge1xuICAgICAgICBpZiAoYXNQYXRoID09PSB2b2lkIDApIGFzUGF0aCA9IHVybDtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgb3B0aW9ucyA9IHt9O1xuICAgICAgICAvLyBQcmVmZXRjaCBpcyBub3Qgc3VwcG9ydGVkIGluIGRldmVsb3BtZW50IG1vZGUgYmVjYXVzZSBpdCB3b3VsZCB0cmlnZ2VyIG9uLWRlbWFuZC1lbnRyaWVzXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoMCwgX2lzYm90LmlzQm90KSh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgICAgICAgIC8vIE5vIHByZWZldGNoZXMgZm9yIGJvdHMgdGhhdCByZW5kZXIgdGhlIGxpbmsgc2luY2UgdGhleSBhcmUgdHlwaWNhbGx5IG5hdmlnYXRpbmdcbiAgICAgICAgICAgIC8vIGxpbmtzIHZpYSB0aGUgZXF1aXZhbGVudCBvZiBhIGhhcmQgbmF2aWdhdGlvbiBhbmQgaGVuY2UgbmV2ZXIgdXRpbGl6ZSB0aGVzZVxuICAgICAgICAgICAgLy8gcHJlZmV0Y2hlcy5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFyc2VkID0gKDAsIF9wYXJzZXJlbGF0aXZldXJsLnBhcnNlUmVsYXRpdmVVcmwpKHVybCk7XG4gICAgICAgIGNvbnN0IHVybFBhdGhuYW1lID0gcGFyc2VkLnBhdGhuYW1lO1xuICAgICAgICBsZXQgeyBwYXRobmFtZSAsIHF1ZXJ5ICB9ID0gcGFyc2VkO1xuICAgICAgICBjb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gcGF0aG5hbWU7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5sb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcGF0aG5hbWUgPSAoMCwgX25vcm1hbGl6ZWxvY2FsZXBhdGgubm9ybWFsaXplTG9jYWxlUGF0aCkocGF0aG5hbWUsIHRoaXMubG9jYWxlcykucGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgcGFyc2VkLnBhdGhuYW1lID0gcGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgdXJsID0gKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHBhcnNlZCk7XG4gICAgICAgICAgICAgICAgbGV0IHBhcnNlZEFzID0gKDAsIF9wYXJzZXJlbGF0aXZldXJsLnBhcnNlUmVsYXRpdmVVcmwpKGFzUGF0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxlUGF0aFJlc3VsdCA9ICgwLCBfbm9ybWFsaXplbG9jYWxlcGF0aC5ub3JtYWxpemVMb2NhbGVQYXRoKShwYXJzZWRBcy5wYXRobmFtZSwgdGhpcy5sb2NhbGVzKTtcbiAgICAgICAgICAgICAgICBwYXJzZWRBcy5wYXRobmFtZSA9IGxvY2FsZVBhdGhSZXN1bHQucGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5sb2NhbGUgPSBsb2NhbGVQYXRoUmVzdWx0LmRldGVjdGVkTG9jYWxlIHx8IHRoaXMuZGVmYXVsdExvY2FsZTtcbiAgICAgICAgICAgICAgICBhc1BhdGggPSAoMCwgX2Zvcm1hdHVybC5mb3JtYXRXaXRoVmFsaWRhdGlvbikocGFyc2VkQXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhZ2VzID0gYXdhaXQgdGhpcy5wYWdlTG9hZGVyLmdldFBhZ2VMaXN0KCk7XG4gICAgICAgIGxldCByZXNvbHZlZEFzID0gYXNQYXRoO1xuICAgICAgICBjb25zdCBsb2NhbGUgPSB0eXBlb2Ygb3B0aW9ucy5sb2NhbGUgIT09IFwidW5kZWZpbmVkXCIgPyBvcHRpb25zLmxvY2FsZSB8fCB1bmRlZmluZWQgOiB0aGlzLmxvY2FsZTtcbiAgICAgICAgY29uc3QgaXNNaWRkbGV3YXJlTWF0Y2ggPSBhd2FpdCBtYXRjaGVzTWlkZGxld2FyZSh7XG4gICAgICAgICAgICBhc1BhdGg6IGFzUGF0aCxcbiAgICAgICAgICAgIGxvY2FsZTogbG9jYWxlLFxuICAgICAgICAgICAgcm91dGVyOiB0aGlzXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX0hBU19SRVdSSVRFUyAmJiBhc1BhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgICAgICAgIGxldCByZXdyaXRlcztcbiAgICAgICAgICAgICh7IF9fcmV3cml0ZXM6IHJld3JpdGVzICB9ID0gYXdhaXQgKDAsIF9yb3V0ZWxvYWRlci5nZXRDbGllbnRCdWlsZE1hbmlmZXN0KSgpKTtcbiAgICAgICAgICAgIGNvbnN0IHJld3JpdGVzUmVzdWx0ID0gKDAsIF9yZXNvbHZlcmV3cml0ZXMuZGVmYXVsdCkoKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkoKDAsIF9hZGRsb2NhbGUuYWRkTG9jYWxlKShhc1BhdGgsIHRoaXMubG9jYWxlKSwgdHJ1ZSksIHBhZ2VzLCByZXdyaXRlcywgcGFyc2VkLnF1ZXJ5LCAocCk9PnJlc29sdmVEeW5hbWljUm91dGUocCwgcGFnZXMpLCB0aGlzLmxvY2FsZXMpO1xuICAgICAgICAgICAgaWYgKHJld3JpdGVzUmVzdWx0LmV4dGVybmFsRGVzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNNaWRkbGV3YXJlTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlZEFzID0gKDAsIF9yZW1vdmVsb2NhbGUucmVtb3ZlTG9jYWxlKSgoMCwgX3JlbW92ZWJhc2VwYXRoLnJlbW92ZUJhc2VQYXRoKShyZXdyaXRlc1Jlc3VsdC5hc1BhdGgpLCB0aGlzLmxvY2FsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmV3cml0ZXNSZXN1bHQubWF0Y2hlZFBhZ2UgJiYgcmV3cml0ZXNSZXN1bHQucmVzb2x2ZWRIcmVmKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBkaXJlY3RseSBtYXRjaGVzIGEgcGFnZSB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgaHJlZiB0b1xuICAgICAgICAgICAgICAgIC8vIGFsbG93IHRoZSBjb3JyZWN0IHBhZ2UgY2h1bmsgdG8gYmUgbG9hZGVkXG4gICAgICAgICAgICAgICAgcGF0aG5hbWUgPSByZXdyaXRlc1Jlc3VsdC5yZXNvbHZlZEhyZWY7XG4gICAgICAgICAgICAgICAgcGFyc2VkLnBhdGhuYW1lID0gcGF0aG5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKCFpc01pZGRsZXdhcmVNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICB1cmwgPSAoMCwgX2Zvcm1hdHVybC5mb3JtYXRXaXRoVmFsaWRhdGlvbikocGFyc2VkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VkLnBhdGhuYW1lID0gcmVzb2x2ZUR5bmFtaWNSb3V0ZShwYXJzZWQucGF0aG5hbWUsIHBhZ2VzKTtcbiAgICAgICAgaWYgKCgwLCBfaXNkeW5hbWljLmlzRHluYW1pY1JvdXRlKShwYXJzZWQucGF0aG5hbWUpKSB7XG4gICAgICAgICAgICBwYXRobmFtZSA9IHBhcnNlZC5wYXRobmFtZTtcbiAgICAgICAgICAgIHBhcnNlZC5wYXRobmFtZSA9IHBhdGhuYW1lO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihxdWVyeSwgKDAsIF9yb3V0ZW1hdGNoZXIuZ2V0Um91dGVNYXRjaGVyKSgoMCwgX3JvdXRlcmVnZXguZ2V0Um91dGVSZWdleCkocGFyc2VkLnBhdGhuYW1lKSkoKDAsIF9wYXJzZXBhdGgucGFyc2VQYXRoKShhc1BhdGgpLnBhdGhuYW1lKSB8fCB7fSk7XG4gICAgICAgICAgICBpZiAoIWlzTWlkZGxld2FyZU1hdGNoKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHBhcnNlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IHByb2Nlc3MuZW52Ll9fTkVYVF9NSURETEVXQVJFX1BSRUZFVENIID09PSBcInN0cmljdFwiID8gbnVsbCA6IGF3YWl0IHdpdGhNaWRkbGV3YXJlRWZmZWN0cyh7XG4gICAgICAgICAgICBmZXRjaERhdGE6ICgpPT5mZXRjaE5leHREYXRhKHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YUhyZWY6IHRoaXMucGFnZUxvYWRlci5nZXREYXRhSHJlZih7XG4gICAgICAgICAgICAgICAgICAgICAgICBocmVmOiAoMCwgX2Zvcm1hdHVybC5mb3JtYXRXaXRoVmFsaWRhdGlvbikoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBvcmlnaW5hbFBhdGhuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNraXBJbnRlcnBvbGF0aW9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNQYXRoOiByZXNvbHZlZEFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlXG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBoYXNNaWRkbGV3YXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBpc1NlcnZlclJlbmRlcjogdGhpcy5pc1NzcixcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VKU09OOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBpbmZsaWdodENhY2hlOiB0aGlzLnNkYyxcbiAgICAgICAgICAgICAgICAgICAgcGVyc2lzdENhY2hlOiAhdGhpcy5pc1ByZXZpZXcsXG4gICAgICAgICAgICAgICAgICAgIGlzUHJlZmV0Y2g6IHRydWVcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGFzUGF0aDogYXNQYXRoLFxuICAgICAgICAgICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgICAgICAgICByb3V0ZXI6IHRoaXNcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAqIElmIHRoZXJlIHdhcyBhIHJld3JpdGUgd2UgYXBwbHkgdGhlIGVmZmVjdHMgb2YgdGhlIHJld3JpdGUgb24gdGhlXG4gICAgICogY3VycmVudCBwYXJhbWV0ZXJzIGZvciB0aGUgcHJlZmV0Y2guXG4gICAgICovIGlmICgoZGF0YSA9PSBudWxsID8gdm9pZCAwIDogZGF0YS5lZmZlY3QudHlwZSkgPT09IFwicmV3cml0ZVwiKSB7XG4gICAgICAgICAgICBwYXJzZWQucGF0aG5hbWUgPSBkYXRhLmVmZmVjdC5yZXNvbHZlZEhyZWY7XG4gICAgICAgICAgICBwYXRobmFtZSA9IGRhdGEuZWZmZWN0LnJlc29sdmVkSHJlZjtcbiAgICAgICAgICAgIHF1ZXJ5ID0ge1xuICAgICAgICAgICAgICAgIC4uLnF1ZXJ5LFxuICAgICAgICAgICAgICAgIC4uLmRhdGEuZWZmZWN0LnBhcnNlZEFzLnF1ZXJ5XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzb2x2ZWRBcyA9IGRhdGEuZWZmZWN0LnBhcnNlZEFzLnBhdGhuYW1lO1xuICAgICAgICAgICAgdXJsID0gKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHBhcnNlZCk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICogSWYgdGhlcmUgaXMgYSByZWRpcmVjdCB0byBhbiBleHRlcm5hbCBkZXN0aW5hdGlvbiB0aGVuIHdlIGRvbid0IGhhdmVcbiAgICAgKiB0byBwcmVmZXRjaCBjb250ZW50IGFzIGl0IHdpbGwgYmUgdW51c2VkLlxuICAgICAqLyBpZiAoKGRhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IGRhdGEuZWZmZWN0LnR5cGUpID09PSBcInJlZGlyZWN0LWV4dGVybmFsXCIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByb3V0ZSA9ICgwLCBfcmVtb3ZldHJhaWxpbmdzbGFzaC5yZW1vdmVUcmFpbGluZ1NsYXNoKShwYXRobmFtZSk7XG4gICAgICAgIGlmIChhd2FpdCB0aGlzLl9iZmwoYXNQYXRoLCByZXNvbHZlZEFzLCBvcHRpb25zLmxvY2FsZSwgdHJ1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50c1t1cmxQYXRobmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgX19hcHBSb3V0ZXI6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGhpcy5wYWdlTG9hZGVyLl9pc1NzZyhyb3V0ZSkudGhlbigoaXNTc2cpPT57XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzU3NnID8gZmV0Y2hOZXh0RGF0YSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFIcmVmOiAoZGF0YSA9PSBudWxsID8gdm9pZCAwIDogZGF0YS5qc29uKSA/IGRhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IGRhdGEuZGF0YUhyZWYgOiB0aGlzLnBhZ2VMb2FkZXIuZ2V0RGF0YUhyZWYoe1xuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogdXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNQYXRoOiByZXNvbHZlZEFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlOiBsb2NhbGVcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGlzU2VydmVyUmVuZGVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VKU09OOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBpbmZsaWdodENhY2hlOiB0aGlzLnNkYyxcbiAgICAgICAgICAgICAgICAgICAgcGVyc2lzdENhY2hlOiAhdGhpcy5pc1ByZXZpZXcsXG4gICAgICAgICAgICAgICAgICAgIGlzUHJlZmV0Y2g6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIHVuc3RhYmxlX3NraXBDbGllbnRDYWNoZTogb3B0aW9ucy51bnN0YWJsZV9za2lwQ2xpZW50Q2FjaGUgfHwgb3B0aW9ucy5wcmlvcml0eSAmJiAhIXByb2Nlc3MuZW52Ll9fTkVYVF9PUFRJTUlTVElDX0NMSUVOVF9DQUNIRVxuICAgICAgICAgICAgICAgIH0pLnRoZW4oKCk9PmZhbHNlKS5jYXRjaCgoKT0+ZmFsc2UpIDogZmFsc2U7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRoaXMucGFnZUxvYWRlcltvcHRpb25zLnByaW9yaXR5ID8gXCJsb2FkUGFnZVwiIDogXCJwcmVmZXRjaFwiXShyb3V0ZSlcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGFzeW5jIGZldGNoQ29tcG9uZW50KHJvdXRlKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZUNhbmNlbGxlZCA9IGdldENhbmNlbGxlZEhhbmRsZXIoe1xuICAgICAgICAgICAgcm91dGUsXG4gICAgICAgICAgICByb3V0ZXI6IHRoaXNcbiAgICAgICAgfSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnRSZXN1bHQgPSBhd2FpdCB0aGlzLnBhZ2VMb2FkZXIubG9hZFBhZ2Uocm91dGUpO1xuICAgICAgICAgICAgaGFuZGxlQ2FuY2VsbGVkKCk7XG4gICAgICAgICAgICByZXR1cm4gY29tcG9uZW50UmVzdWx0O1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGhhbmRsZUNhbmNlbGxlZCgpO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9nZXREYXRhKGZuKSB7XG4gICAgICAgIGxldCBjYW5jZWxsZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgY2FuY2VsID0gKCk9PntcbiAgICAgICAgICAgIGNhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2xjID0gY2FuY2VsO1xuICAgICAgICByZXR1cm4gZm4oKS50aGVuKChkYXRhKT0+e1xuICAgICAgICAgICAgaWYgKGNhbmNlbCA9PT0gdGhpcy5jbGMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsYyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKFwiTG9hZGluZyBpbml0aWFsIHByb3BzIGNhbmNlbGxlZFwiKTtcbiAgICAgICAgICAgICAgICBlcnIuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9nZXRGbGlnaHREYXRhKGRhdGFIcmVmKSB7XG4gICAgICAgIC8vIERvIG5vdCBjYWNoZSBSU0MgZmxpZ2h0IHJlc3BvbnNlIHNpbmNlIGl0J3Mgbm90IGEgc3RhdGljIHJlc291cmNlXG4gICAgICAgIHJldHVybiBmZXRjaE5leHREYXRhKHtcbiAgICAgICAgICAgIGRhdGFIcmVmLFxuICAgICAgICAgICAgaXNTZXJ2ZXJSZW5kZXI6IHRydWUsXG4gICAgICAgICAgICBwYXJzZUpTT046IGZhbHNlLFxuICAgICAgICAgICAgaW5mbGlnaHRDYWNoZTogdGhpcy5zZGMsXG4gICAgICAgICAgICBwZXJzaXN0Q2FjaGU6IGZhbHNlLFxuICAgICAgICAgICAgaXNQcmVmZXRjaDogZmFsc2VcbiAgICAgICAgfSkudGhlbigocGFyYW0pPT57XG4gICAgICAgICAgICBsZXQgeyB0ZXh0ICB9ID0gcGFyYW07XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGE6IHRleHRcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBnZXRJbml0aWFsUHJvcHMoQ29tcG9uZW50LCBjdHgpIHtcbiAgICAgICAgY29uc3QgeyBDb21wb25lbnQ6IEFwcCAgfSA9IHRoaXMuY29tcG9uZW50c1tcIi9fYXBwXCJdO1xuICAgICAgICBjb25zdCBBcHBUcmVlID0gdGhpcy5fd3JhcEFwcChBcHApO1xuICAgICAgICBjdHguQXBwVHJlZSA9IEFwcFRyZWU7XG4gICAgICAgIHJldHVybiAoMCwgX3V0aWxzLmxvYWRHZXRJbml0aWFsUHJvcHMpKEFwcCwge1xuICAgICAgICAgICAgQXBwVHJlZSxcbiAgICAgICAgICAgIENvbXBvbmVudCxcbiAgICAgICAgICAgIHJvdXRlcjogdGhpcyxcbiAgICAgICAgICAgIGN0eFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IHJvdXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5yb3V0ZTtcbiAgICB9XG4gICAgZ2V0IHBhdGhuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5wYXRobmFtZTtcbiAgICB9XG4gICAgZ2V0IHF1ZXJ5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5xdWVyeTtcbiAgICB9XG4gICAgZ2V0IGFzUGF0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuYXNQYXRoO1xuICAgIH1cbiAgICBnZXQgbG9jYWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5sb2NhbGU7XG4gICAgfVxuICAgIGdldCBpc0ZhbGxiYWNrKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5pc0ZhbGxiYWNrO1xuICAgIH1cbiAgICBnZXQgaXNQcmV2aWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5pc1ByZXZpZXc7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhdGhuYW1lLCBxdWVyeSwgYXMsIHsgaW5pdGlhbFByb3BzICwgcGFnZUxvYWRlciAsIEFwcCAsIHdyYXBBcHAgLCBDb21wb25lbnQgLCBlcnIgLCBzdWJzY3JpcHRpb24gLCBpc0ZhbGxiYWNrICwgbG9jYWxlICwgbG9jYWxlcyAsIGRlZmF1bHRMb2NhbGUgLCBkb21haW5Mb2NhbGVzICwgaXNQcmV2aWV3ICB9KXtcbiAgICAgICAgLy8gU2VydmVyIERhdGEgQ2FjaGUgKGZ1bGwgZGF0YSByZXF1ZXN0cylcbiAgICAgICAgdGhpcy5zZGMgPSB7fTtcbiAgICAgICAgLy8gU2VydmVyIEJhY2tncm91bmQgQ2FjaGUgKEhFQUQgcmVxdWVzdHMpXG4gICAgICAgIHRoaXMuc2JjID0ge307XG4gICAgICAgIHRoaXMuaXNGaXJzdFBvcFN0YXRlRXZlbnQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9rZXkgPSBjcmVhdGVLZXkoKTtcbiAgICAgICAgdGhpcy5vblBvcFN0YXRlID0gKGUpPT57XG4gICAgICAgICAgICBjb25zdCB7IGlzRmlyc3RQb3BTdGF0ZUV2ZW50ICB9ID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuaXNGaXJzdFBvcFN0YXRlRXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gZS5zdGF0ZTtcbiAgICAgICAgICAgIGlmICghc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBnZXQgc3RhdGUgYXMgdW5kZWZpbmVkIGZvciB0d28gcmVhc29ucy5cbiAgICAgICAgICAgICAgICAvLyAgMS4gV2l0aCBvbGRlciBzYWZhcmkgKDwgOCkgYW5kIG9sZGVyIGNocm9tZSAoPCAzNClcbiAgICAgICAgICAgICAgICAvLyAgMi4gV2hlbiB0aGUgVVJMIGNoYW5nZWQgd2l0aCAjXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBJbiB0aGUgYm90aCBjYXNlcywgd2UgZG9uJ3QgbmVlZCB0byBwcm9jZWVkIGFuZCBjaGFuZ2UgdGhlIHJvdXRlLlxuICAgICAgICAgICAgICAgIC8vIChhcyBpdCdzIGFscmVhZHkgY2hhbmdlZClcbiAgICAgICAgICAgICAgICAvLyBCdXQgd2UgY2FuIHNpbXBseSByZXBsYWNlIHRoZSBzdGF0ZSB3aXRoIHRoZSBuZXcgY2hhbmdlcy5cbiAgICAgICAgICAgICAgICAvLyBBY3R1YWxseSwgZm9yICgxKSB3ZSBkb24ndCBuZWVkIHRvIG5vdGhpbmcuIEJ1dCBpdCdzIGhhcmQgdG8gZGV0ZWN0IHRoYXQgZXZlbnQuXG4gICAgICAgICAgICAgICAgLy8gU28sIGRvaW5nIHRoZSBmb2xsb3dpbmcgZm9yICgxKSBkb2VzIG5vIGhhcm0uXG4gICAgICAgICAgICAgICAgY29uc3QgeyBwYXRobmFtZSAsIHF1ZXJ5ICB9ID0gdGhpcztcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVN0YXRlKFwicmVwbGFjZVN0YXRlXCIsICgwLCBfZm9ybWF0dXJsLmZvcm1hdFdpdGhWYWxpZGF0aW9uKSh7XG4gICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiAoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKShwYXRobmFtZSksXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgICAgICAgICAgfSksICgwLCBfdXRpbHMuZ2V0VVJMKSgpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBfX05BIGlzIHVzZWQgdG8gaWRlbnRpZnkgaWYgdGhlIGhpc3RvcnkgZW50cnkgY2FuIGJlIGhhbmRsZWQgYnkgdGhlIGFwcC1yb3V0ZXIuXG4gICAgICAgICAgICBpZiAoc3RhdGUuX19OQSkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0YXRlLl9fTikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNhZmFyaSBmaXJlcyBwb3BzdGF0ZWV2ZW50IHdoZW4gcmVvcGVuaW5nIHRoZSBicm93c2VyLlxuICAgICAgICAgICAgaWYgKGlzRmlyc3RQb3BTdGF0ZUV2ZW50ICYmIHRoaXMubG9jYWxlID09PSBzdGF0ZS5vcHRpb25zLmxvY2FsZSAmJiBzdGF0ZS5hcyA9PT0gdGhpcy5hc1BhdGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZm9yY2VkU2Nyb2xsO1xuICAgICAgICAgICAgY29uc3QgeyB1cmwgLCBhcyAsIG9wdGlvbnMgLCBrZXkgIH0gPSBzdGF0ZTtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfU0NST0xMX1JFU1RPUkFUSU9OKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1hbnVhbFNjcm9sbFJlc3RvcmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9rZXkgIT09IGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU25hcHNob3QgY3VycmVudCBzY3JvbGwgcG9zaXRpb246XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJfX25leHRfc2Nyb2xsX1wiICsgdGhpcy5fa2V5LCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHNlbGYucGFnZVhPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IHNlbGYucGFnZVlPZmZzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVzdG9yZSBvbGQgc2Nyb2xsIHBvc2l0aW9uOlxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2ID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcIl9fbmV4dF9zY3JvbGxfXCIgKyBrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlZFNjcm9sbCA9IEpTT04ucGFyc2Uodik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VkU2Nyb2xsID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2tleSA9IGtleTtcbiAgICAgICAgICAgIGNvbnN0IHsgcGF0aG5hbWUgIH0gPSAoMCwgX3BhcnNlcmVsYXRpdmV1cmwucGFyc2VSZWxhdGl2ZVVybCkodXJsKTtcbiAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBkb24ndCByZS1yZW5kZXIgb24gaW5pdGlhbCBsb2FkLFxuICAgICAgICAgICAgLy8gY2FuIGJlIGNhdXNlZCBieSBuYXZpZ2F0aW5nIGJhY2sgZnJvbSBhbiBleHRlcm5hbCBzaXRlXG4gICAgICAgICAgICBpZiAodGhpcy5pc1NzciAmJiBhcyA9PT0gKDAsIF9hZGRiYXNlcGF0aC5hZGRCYXNlUGF0aCkodGhpcy5hc1BhdGgpICYmIHBhdGhuYW1lID09PSAoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKSh0aGlzLnBhdGhuYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHRoZSBkb3duc3RyZWFtIGFwcGxpY2F0aW9uIHJldHVybnMgZmFsc3ksIHJldHVybi5cbiAgICAgICAgICAgIC8vIFRoZXkgd2lsbCB0aGVuIGJlIHJlc3BvbnNpYmxlIGZvciBoYW5kbGluZyB0aGUgZXZlbnQuXG4gICAgICAgICAgICBpZiAodGhpcy5fYnBzICYmICF0aGlzLl9icHMoc3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jaGFuZ2UoXCJyZXBsYWNlU3RhdGVcIiwgdXJsLCBhcywgT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAgICAgICAgICAgIHNoYWxsb3c6IG9wdGlvbnMuc2hhbGxvdyAmJiB0aGlzLl9zaGFsbG93LFxuICAgICAgICAgICAgICAgIGxvY2FsZTogb3B0aW9ucy5sb2NhbGUgfHwgdGhpcy5kZWZhdWx0TG9jYWxlLFxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgaW50ZXJuYWwgdmFsdWUgbm90IGV4cG9zZWQgb24gdHlwZXNcbiAgICAgICAgICAgICAgICBfaDogMFxuICAgICAgICAgICAgfSksIGZvcmNlZFNjcm9sbCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgY29tcG9uZW50IGtleVxuICAgICAgICBjb25zdCByb3V0ZSA9ICgwLCBfcmVtb3ZldHJhaWxpbmdzbGFzaC5yZW1vdmVUcmFpbGluZ1NsYXNoKShwYXRobmFtZSk7XG4gICAgICAgIC8vIHNldCB1cCB0aGUgY29tcG9uZW50IGNhY2hlIChieSByb3V0ZSBrZXlzKVxuICAgICAgICB0aGlzLmNvbXBvbmVudHMgPSB7fTtcbiAgICAgICAgLy8gV2Ugc2hvdWxkIG5vdCBrZWVwIHRoZSBjYWNoZSwgaWYgdGhlcmUncyBhbiBlcnJvclxuICAgICAgICAvLyBPdGhlcndpc2UsIHRoaXMgY2F1c2UgaXNzdWVzIHdoZW4gd2hlbiBnb2luZyBiYWNrIGFuZFxuICAgICAgICAvLyBjb21lIGFnYWluIHRvIHRoZSBlcnJvcmVkIHBhZ2UuXG4gICAgICAgIGlmIChwYXRobmFtZSAhPT0gXCIvX2Vycm9yXCIpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50c1tyb3V0ZV0gPSB7XG4gICAgICAgICAgICAgICAgQ29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGluaXRpYWw6IHRydWUsXG4gICAgICAgICAgICAgICAgcHJvcHM6IGluaXRpYWxQcm9wcyxcbiAgICAgICAgICAgICAgICBlcnIsXG4gICAgICAgICAgICAgICAgX19OX1NTRzogaW5pdGlhbFByb3BzICYmIGluaXRpYWxQcm9wcy5fX05fU1NHLFxuICAgICAgICAgICAgICAgIF9fTl9TU1A6IGluaXRpYWxQcm9wcyAmJiBpbml0aWFsUHJvcHMuX19OX1NTUFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbXBvbmVudHNbXCIvX2FwcFwiXSA9IHtcbiAgICAgICAgICAgIENvbXBvbmVudDogQXBwLFxuICAgICAgICAgICAgc3R5bGVTaGVldHM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfQ0xJRU5UX1JPVVRFUl9GSUxURVJfRU5BQkxFRCkge1xuICAgICAgICAgICAgY29uc3QgeyBCbG9vbUZpbHRlciAgfSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvYmxvb20tZmlsdGVyXCIpO1xuICAgICAgICAgICAgY29uc3Qgc3RhdGljRmlsdGVyRGF0YSA9IHByb2Nlc3MuZW52Ll9fTkVYVF9DTElFTlRfUk9VVEVSX1NfRklMVEVSO1xuICAgICAgICAgICAgY29uc3QgZHluYW1pY0ZpbHRlckRhdGEgPSBwcm9jZXNzLmVudi5fX05FWFRfQ0xJRU5UX1JPVVRFUl9EX0ZJTFRFUjtcbiAgICAgICAgICAgIGlmIChzdGF0aWNGaWx0ZXJEYXRhID09IG51bGwgPyB2b2lkIDAgOiBzdGF0aWNGaWx0ZXJEYXRhLm51bUhhc2hlcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2JmbF9zID0gbmV3IEJsb29tRmlsdGVyKHN0YXRpY0ZpbHRlckRhdGEubnVtSXRlbXMsIHN0YXRpY0ZpbHRlckRhdGEuZXJyb3JSYXRlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9iZmxfcy5pbXBvcnQoc3RhdGljRmlsdGVyRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZHluYW1pY0ZpbHRlckRhdGEgPT0gbnVsbCA/IHZvaWQgMCA6IGR5bmFtaWNGaWx0ZXJEYXRhLm51bUhhc2hlcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2JmbF9kID0gbmV3IEJsb29tRmlsdGVyKGR5bmFtaWNGaWx0ZXJEYXRhLm51bUl0ZW1zLCBkeW5hbWljRmlsdGVyRGF0YS5lcnJvclJhdGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2JmbF9kLmltcG9ydChkeW5hbWljRmlsdGVyRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gQmFja3dhcmRzIGNvbXBhdCBmb3IgUm91dGVyLnJvdXRlci5ldmVudHNcbiAgICAgICAgLy8gVE9ETzogU2hvdWxkIGJlIHJlbW92ZSB0aGUgZm9sbG93aW5nIG1ham9yIHZlcnNpb24gYXMgaXQgd2FzIG5ldmVyIGRvY3VtZW50ZWRcbiAgICAgICAgdGhpcy5ldmVudHMgPSBSb3V0ZXIuZXZlbnRzO1xuICAgICAgICB0aGlzLnBhZ2VMb2FkZXIgPSBwYWdlTG9hZGVyO1xuICAgICAgICAvLyBpZiBhdXRvIHByZXJlbmRlcmVkIGFuZCBkeW5hbWljIHJvdXRlIHdhaXQgdG8gdXBkYXRlIGFzUGF0aFxuICAgICAgICAvLyB1bnRpbCBhZnRlciBtb3VudCB0byBwcmV2ZW50IGh5ZHJhdGlvbiBtaXNtYXRjaFxuICAgICAgICBjb25zdCBhdXRvRXhwb3J0RHluYW1pYyA9ICgwLCBfaXNkeW5hbWljLmlzRHluYW1pY1JvdXRlKShwYXRobmFtZSkgJiYgc2VsZi5fX05FWFRfREFUQV9fLmF1dG9FeHBvcnQ7XG4gICAgICAgIHRoaXMuYmFzZVBhdGggPSBwcm9jZXNzLmVudi5fX05FWFRfUk9VVEVSX0JBU0VQQVRIIHx8IFwiXCI7XG4gICAgICAgIHRoaXMuc3ViID0gc3Vic2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmNsYyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3dyYXBBcHAgPSB3cmFwQXBwO1xuICAgICAgICAvLyBtYWtlIHN1cmUgdG8gaWdub3JlIGV4dHJhIHBvcFN0YXRlIGluIHNhZmFyaSBvbiBuYXZpZ2F0aW5nXG4gICAgICAgIC8vIGJhY2sgZnJvbSBleHRlcm5hbCBzaXRlXG4gICAgICAgIHRoaXMuaXNTc3IgPSB0cnVlO1xuICAgICAgICB0aGlzLmlzTG9jYWxlRG9tYWluID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNSZWFkeSA9ICEhKHNlbGYuX19ORVhUX0RBVEFfXy5nc3NwIHx8IHNlbGYuX19ORVhUX0RBVEFfXy5naXAgfHwgc2VsZi5fX05FWFRfREFUQV9fLmFwcEdpcCAmJiAhc2VsZi5fX05FWFRfREFUQV9fLmdzcCB8fCAhYXV0b0V4cG9ydER5bmFtaWMgJiYgIXNlbGYubG9jYXRpb24uc2VhcmNoICYmICFwcm9jZXNzLmVudi5fX05FWFRfSEFTX1JFV1JJVEVTKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgICAgIHRoaXMubG9jYWxlcyA9IGxvY2FsZXM7XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRMb2NhbGUgPSBkZWZhdWx0TG9jYWxlO1xuICAgICAgICAgICAgdGhpcy5kb21haW5Mb2NhbGVzID0gZG9tYWluTG9jYWxlcztcbiAgICAgICAgICAgIHRoaXMuaXNMb2NhbGVEb21haW4gPSAhISgwLCBfZGV0ZWN0ZG9tYWlubG9jYWxlLmRldGVjdERvbWFpbkxvY2FsZSkoZG9tYWluTG9jYWxlcywgc2VsZi5sb2NhdGlvbi5ob3N0bmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHJvdXRlLFxuICAgICAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIGFzUGF0aDogYXV0b0V4cG9ydER5bmFtaWMgPyBwYXRobmFtZSA6IGFzLFxuICAgICAgICAgICAgaXNQcmV2aWV3OiAhIWlzUHJldmlldyxcbiAgICAgICAgICAgIGxvY2FsZTogcHJvY2Vzcy5lbnYuX19ORVhUX0kxOE5fU1VQUE9SVCA/IGxvY2FsZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGlzRmFsbGJhY2tcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5faW5pdGlhbE1hdGNoZXNNaWRkbGV3YXJlUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgXCJhc1wiIGRvZXNuJ3Qgc3RhcnQgd2l0aCBkb3VibGUgc2xhc2hlcyBvciBlbHNlIGl0IGNhblxuICAgICAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3IgYXMgaXQncyBjb25zaWRlcmVkIGludmFsaWRcbiAgICAgICAgICAgIGlmICghYXMuc3RhcnRzV2l0aChcIi8vXCIpKSB7XG4gICAgICAgICAgICAgICAgLy8gaW4gb3JkZXIgZm9yIGBlLnN0YXRlYCB0byB3b3JrIG9uIHRoZSBgb25wb3BzdGF0ZWAgZXZlbnRcbiAgICAgICAgICAgICAgICAvLyB3ZSBoYXZlIHRvIHJlZ2lzdGVyIHRoZSBpbml0aWFsIHJvdXRlIHVwb24gaW5pdGlhbGl6YXRpb25cbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IGFzUGF0aCA9ICgwLCBfdXRpbHMuZ2V0VVJMKSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luaXRpYWxNYXRjaGVzTWlkZGxld2FyZVByb21pc2UgPSBtYXRjaGVzTWlkZGxld2FyZSh7XG4gICAgICAgICAgICAgICAgICAgIHJvdXRlcjogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgICAgICAgICAgICBhc1BhdGhcbiAgICAgICAgICAgICAgICB9KS50aGVuKChtYXRjaGVzKT0+e1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLl9zaG91bGRSZXNvbHZlSHJlZiA9IGFzICE9PSBwYXRobmFtZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShcInJlcGxhY2VTdGF0ZVwiLCBtYXRjaGVzID8gYXNQYXRoIDogKDAsIF9mb3JtYXR1cmwuZm9ybWF0V2l0aFZhbGlkYXRpb24pKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiAoMCwgX2FkZGJhc2VwYXRoLmFkZEJhc2VQYXRoKShwYXRobmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVxuICAgICAgICAgICAgICAgICAgICB9KSwgYXNQYXRoLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIHRoaXMub25Qb3BTdGF0ZSk7XG4gICAgICAgICAgICAvLyBlbmFibGUgY3VzdG9tIHNjcm9sbCByZXN0b3JhdGlvbiBoYW5kbGluZyB3aGVuIGF2YWlsYWJsZVxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGZhbGxiYWNrIHRvIGJyb3dzZXIncyBkZWZhdWx0IGhhbmRsaW5nXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuX19ORVhUX1NDUk9MTF9SRVNUT1JBVElPTikge1xuICAgICAgICAgICAgICAgIGlmIChtYW51YWxTY3JvbGxSZXN0b3JhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuKCgpPT57XG4gICAgUm91dGVyLmV2ZW50cyA9ICgwLCBfbWl0dC5kZWZhdWx0KSgpO1xufSkoKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsIm1hdGNoZXNNaWRkbGV3YXJlIiwiY3JlYXRlS2V5IiwiX2V4cG9ydCIsInRhcmdldCIsImFsbCIsIm5hbWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiUm91dGVyIiwiX2ludGVyb3BfcmVxdWlyZV9kZWZhdWx0IiwicmVxdWlyZSIsIl9pbnRlcm9wX3JlcXVpcmVfd2lsZGNhcmQiLCJfcmVtb3ZldHJhaWxpbmdzbGFzaCIsIl9yb3V0ZWxvYWRlciIsIl9zY3JpcHQiLCJfaXNlcnJvciIsIl8iLCJfZGVub3JtYWxpemVwYWdlcGF0aCIsIl9ub3JtYWxpemVsb2NhbGVwYXRoIiwiX21pdHQiLCJfdXRpbHMiLCJfaXNkeW5hbWljIiwiX3BhcnNlcmVsYXRpdmV1cmwiLCJfcmVzb2x2ZXJld3JpdGVzIiwiX3JvdXRlbWF0Y2hlciIsIl9yb3V0ZXJlZ2V4IiwiX2Zvcm1hdHVybCIsIl9kZXRlY3Rkb21haW5sb2NhbGUiLCJfcGFyc2VwYXRoIiwiX2FkZGxvY2FsZSIsIl9yZW1vdmVsb2NhbGUiLCJfcmVtb3ZlYmFzZXBhdGgiLCJfYWRkYmFzZXBhdGgiLCJfaGFzYmFzZXBhdGgiLCJfaXNhcGlyb3V0ZSIsIl9nZXRuZXh0cGF0aG5hbWVpbmZvIiwiX2Zvcm1hdG5leHRwYXRobmFtZWluZm8iLCJfY29tcGFyZXN0YXRlcyIsIl9pc2xvY2FsdXJsIiwiX2lzYm90IiwiX29taXQiLCJfcmVzb2x2ZWhyZWYiLCJfaW50ZXJwb2xhdGVhcyIsIl9oYW5kbGVzbW9vdGhzY3JvbGwiLCJidWlsZENhbmNlbGxhdGlvbkVycm9yIiwiYXNzaWduIiwiRXJyb3IiLCJjYW5jZWxsZWQiLCJvcHRpb25zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyb3V0ZXIiLCJwYWdlTG9hZGVyIiwiZ2V0TWlkZGxld2FyZSIsIm1hdGNoZXJzIiwicGFyc2VQYXRoIiwiYXNQYXRoIiwiYXNQYXRobmFtZSIsInBhdGhuYW1lIiwiY2xlYW5lZEFzIiwiaGFzQmFzZVBhdGgiLCJyZW1vdmVCYXNlUGF0aCIsImFzV2l0aEJhc2VQYXRoQW5kTG9jYWxlIiwiYWRkQmFzZVBhdGgiLCJhZGRMb2NhbGUiLCJsb2NhbGUiLCJzb21lIiwibSIsIlJlZ0V4cCIsInJlZ2V4cCIsInRlc3QiLCJzdHJpcE9yaWdpbiIsInVybCIsIm9yaWdpbiIsImdldExvY2F0aW9uT3JpZ2luIiwic3RhcnRzV2l0aCIsInN1YnN0cmluZyIsImxlbmd0aCIsInByZXBhcmVVcmxBcyIsImFzIiwicmVzb2x2ZUhyZWYiLCJyZXNvbHZlZEhyZWYiLCJyZXNvbHZlZEFzIiwiaHJlZldhc0Fic29sdXRlIiwiYXNXYXNBYnNvbHV0ZSIsInByZXBhcmVkVXJsIiwicHJlcGFyZWRBcyIsInJlc29sdmVEeW5hbWljUm91dGUiLCJwYWdlcyIsImNsZWFuUGF0aG5hbWUiLCJyZW1vdmVUcmFpbGluZ1NsYXNoIiwiZGVub3JtYWxpemVQYWdlUGF0aCIsImluY2x1ZGVzIiwicGFnZSIsImlzRHluYW1pY1JvdXRlIiwiZ2V0Um91dGVSZWdleCIsInJlIiwiZ2V0TWlkZGxld2FyZURhdGEiLCJzb3VyY2UiLCJyZXNwb25zZSIsIm5leHRDb25maWciLCJiYXNlUGF0aCIsImkxOG4iLCJsb2NhbGVzIiwidHJhaWxpbmdTbGFzaCIsIkJvb2xlYW4iLCJwcm9jZXNzIiwiZW52IiwiX19ORVhUX1RSQUlMSU5HX1NMQVNIIiwicmV3cml0ZUhlYWRlciIsImhlYWRlcnMiLCJyZXdyaXRlVGFyZ2V0IiwibWF0Y2hlZFBhdGgiLCJfX05FWFRfRVhURVJOQUxfTUlERExFV0FSRV9SRVdSSVRFX1JFU09MVkUiLCJwYXJzZWRSZXdyaXRlVGFyZ2V0IiwicGFyc2VSZWxhdGl2ZVVybCIsInBhdGhuYW1lSW5mbyIsImdldE5leHRQYXRobmFtZUluZm8iLCJwYXJzZURhdGEiLCJmc1BhdGhuYW1lIiwiZ2V0UGFnZUxpc3QiLCJnZXRDbGllbnRCdWlsZE1hbmlmZXN0IiwidGhlbiIsInBhcmFtIiwicmV3cml0ZXMiLCJfX3Jld3JpdGVzIiwibm9ybWFsaXplTG9jYWxlUGF0aCIsInBhcnNlZFNvdXJjZSIsIl9fTkVYVF9IQVNfUkVXUklURVMiLCJ1bmRlZmluZWQiLCJyZXN1bHQiLCJxdWVyeSIsInBhdGgiLCJtYXRjaGVkUGFnZSIsInBhcnNlZEFzIiwicmVzb2x2ZWRQYXRobmFtZSIsIm1hdGNoZXMiLCJnZXRSb3V0ZU1hdGNoZXIiLCJ0eXBlIiwic3JjIiwiZm9ybWF0TmV4dFBhdGhuYW1lSW5mbyIsImRlZmF1bHRMb2NhbGUiLCJidWlsZElkIiwiZGVzdGluYXRpb24iLCJoYXNoIiwicmVkaXJlY3RUYXJnZXQiLCJuZXdBcyIsIm5ld1VybCIsIndpdGhNaWRkbGV3YXJlRWZmZWN0cyIsImZldGNoRGF0YSIsImRhdGEiLCJkYXRhSHJlZiIsImVmZmVjdCIsImpzb24iLCJ0ZXh0IiwiY2FjaGVLZXkiLCJtYW51YWxTY3JvbGxSZXN0b3JhdGlvbiIsIl9fTkVYVF9TQ1JPTExfUkVTVE9SQVRJT04iLCJ3aW5kb3ciLCJoaXN0b3J5IiwidiIsInNlc3Npb25TdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJuIiwiU1NHX0RBVEFfTk9UX0ZPVU5EIiwiU3ltYm9sIiwiZmV0Y2hSZXRyeSIsImF0dGVtcHRzIiwiZmV0Y2giLCJjcmVkZW50aWFscyIsIm1ldGhvZCIsIm9rIiwic3RhdHVzIiwidHJ5VG9QYXJzZUFzSlNPTiIsIkpTT04iLCJwYXJzZSIsImVycm9yIiwiZmV0Y2hOZXh0RGF0YSIsImluZmxpZ2h0Q2FjaGUiLCJpc1ByZWZldGNoIiwiaGFzTWlkZGxld2FyZSIsImlzU2VydmVyUmVuZGVyIiwicGFyc2VKU09OIiwicGVyc2lzdENhY2hlIiwiaXNCYWNrZ3JvdW5kIiwidW5zdGFibGVfc2tpcENsaWVudENhY2hlIiwiVVJMIiwibG9jYXRpb24iLCJocmVmIiwiX3BhcmFtc19tZXRob2QiLCJnZXREYXRhIiwicGFyYW1zIiwicHVycG9zZSIsIl90cnlUb1BhcnNlQXNKU09OIiwibm90Rm91bmQiLCJtYXJrQXNzZXRFcnJvciIsImVyciIsIm1lc3NhZ2UiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSIsImhhbmRsZUhhcmROYXZpZ2F0aW9uIiwiZ2V0Q2FuY2VsbGVkSGFuZGxlciIsInJvdXRlIiwiY2FuY2VsIiwiY2xjIiwiaGFuZGxlQ2FuY2VsbGVkIiwiaW5pdGlhbFByb3BzIiwiQXBwIiwid3JhcEFwcCIsIkNvbXBvbmVudCIsInN1YnNjcmlwdGlvbiIsImlzRmFsbGJhY2siLCJkb21haW5Mb2NhbGVzIiwiaXNQcmV2aWV3Iiwic2RjIiwic2JjIiwiaXNGaXJzdFBvcFN0YXRlRXZlbnQiLCJfa2V5Iiwib25Qb3BTdGF0ZSIsImUiLCJzdGF0ZSIsImNoYW5nZVN0YXRlIiwiZm9ybWF0V2l0aFZhbGlkYXRpb24iLCJnZXRVUkwiLCJfX05BIiwicmVsb2FkIiwiX19OIiwiZm9yY2VkU2Nyb2xsIiwia2V5Iiwic3RyaW5naWZ5IiwieCIsInNlbGYiLCJwYWdlWE9mZnNldCIsInkiLCJwYWdlWU9mZnNldCIsImdldEl0ZW0iLCJpc1NzciIsIl9icHMiLCJjaGFuZ2UiLCJzaGFsbG93IiwiX3NoYWxsb3ciLCJfaCIsImNvbXBvbmVudHMiLCJpbml0aWFsIiwicHJvcHMiLCJfX05fU1NHIiwiX19OX1NTUCIsInN0eWxlU2hlZXRzIiwiX19ORVhUX0NMSUVOVF9ST1VURVJfRklMVEVSX0VOQUJMRUQiLCJCbG9vbUZpbHRlciIsInN0YXRpY0ZpbHRlckRhdGEiLCJfX05FWFRfQ0xJRU5UX1JPVVRFUl9TX0ZJTFRFUiIsImR5bmFtaWNGaWx0ZXJEYXRhIiwiX19ORVhUX0NMSUVOVF9ST1VURVJfRF9GSUxURVIiLCJudW1IYXNoZXMiLCJfYmZsX3MiLCJudW1JdGVtcyIsImVycm9yUmF0ZSIsIl9iZmxfZCIsImV2ZW50cyIsImF1dG9FeHBvcnREeW5hbWljIiwiX19ORVhUX0RBVEFfXyIsImF1dG9FeHBvcnQiLCJfX05FWFRfUk9VVEVSX0JBU0VQQVRIIiwic3ViIiwiX3dyYXBBcHAiLCJpc0xvY2FsZURvbWFpbiIsImlzUmVhZHkiLCJnc3NwIiwiZ2lwIiwiYXBwR2lwIiwiZ3NwIiwic2VhcmNoIiwiX19ORVhUX0kxOE5fU1VQUE9SVCIsImRldGVjdERvbWFpbkxvY2FsZSIsImhvc3RuYW1lIiwiX2luaXRpYWxNYXRjaGVzTWlkZGxld2FyZVByb21pc2UiLCJfc2hvdWxkUmVzb2x2ZUhyZWYiLCJhZGRFdmVudExpc3RlbmVyIiwic2Nyb2xsUmVzdG9yYXRpb24iLCJiYWNrIiwiZm9yd2FyZCIsInNraXBOYXZpZ2F0ZSIsIm1hdGNoZXNCZmxTdGF0aWMiLCJtYXRjaGVzQmZsRHluYW1pYyIsImN1ckFzIiwiYXNOb1NsYXNoIiwiYXNOb1NsYXNoTG9jYWxlIiwiX3RoaXNfX2JmbF9zIiwiY29udGFpbnMiLCJfdGhpc19fYmZsX3MxIiwibm9ybWFsaXplZEFTIiwiY3VyQXNQYXJ0cyIsInNwbGl0IiwiaSIsImN1cnJlbnRQYXJ0Iiwiam9pbiIsIl90aGlzX19iZmxfZCIsImlzTG9jYWxVUkwiLCJpc1F1ZXJ5VXBkYXRpbmciLCJfYmZsIiwic2hvdWxkUmVzb2x2ZUhyZWYiLCJuZXh0U3RhdGUiLCJyZWFkeVN0YXRlQ2hhbmdlIiwicHJldkxvY2FsZSIsImxvY2FsZVBhdGhSZXN1bHQiLCJkZXRlY3RlZExvY2FsZSIsImRpZE5hdmlnYXRlIiwiX3RoaXNfbG9jYWxlcyIsImRldGVjdGVkRG9tYWluIiwiZG9tYWluIiwiYXNOb0Jhc2VQYXRoIiwiaHR0cCIsIlNUIiwicGVyZm9ybWFuY2UiLCJtYXJrIiwic2Nyb2xsIiwicm91dGVQcm9wcyIsIl9pbkZsaWdodFJvdXRlIiwiZW1pdCIsInJlbW92ZUxvY2FsZSIsImxvY2FsZUNoYW5nZSIsIm9ubHlBSGFzaENoYW5nZSIsInNjcm9sbFRvSGFzaCIsInNldCIsInBhcnNlZCIsIl90aGlzX2NvbXBvbmVudHNfcGF0aG5hbWUiLCJfX2FwcFJvdXRlciIsInVybElzTmV3IiwicGFyc2VkQXNQYXRobmFtZSIsImlzTWlkZGxld2FyZVJld3JpdGUiLCJpc01pZGRsZXdhcmVNYXRjaCIsInJld3JpdGVzUmVzdWx0IiwicCIsImV4dGVybmFsRGVzdCIsInJvdXRlTWF0Y2giLCJyb3V0ZVJlZ2V4Iiwic2hvdWxkSW50ZXJwb2xhdGUiLCJpbnRlcnBvbGF0ZWRBcyIsImludGVycG9sYXRlQXMiLCJtaXNzaW5nUGFyYW1zIiwia2V5cyIsImdyb3VwcyIsImZpbHRlciIsIm9wdGlvbmFsIiwiY29uc29sZSIsIndhcm4iLCJvbWl0IiwiaXNFcnJvclJvdXRlIiwiZ2V0Um91dGVJbmZvIiwicm91dGVJbmZvIiwiY2xlYW5lZFBhcnNlZFBhdGhuYW1lIiwiZm9yRWFjaCIsInByZWZpeGVkQXMiLCJyZXdyaXRlQXMiLCJsb2NhbGVSZXN1bHQiLCJjdXJSb3V0ZU1hdGNoIiwiY29tcG9uZW50IiwidW5zdGFibGVfc2NyaXB0TG9hZGVyIiwic2NyaXB0cyIsImNvbmNhdCIsInNjcmlwdCIsImhhbmRsZUNsaWVudFNjcmlwdExvYWQiLCJwYWdlUHJvcHMiLCJfX05fUkVESVJFQ1QiLCJfX05fUkVESVJFQ1RfQkFTRV9QQVRIIiwicGFyc2VkSHJlZiIsIl9fTl9QUkVWSUVXIiwiZmV0Y2hDb21wb25lbnQiLCJub3RGb3VuZFJvdXRlIiwiaXNOb3RGb3VuZCIsIl9zZWxmX19fTkVYVF9EQVRBX19fcHJvcHMiLCJfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzX3BhZ2VQcm9wcyIsInN0YXR1c0NvZGUiLCJfcm91dGVJbmZvX3Byb3BzIiwiaXNWYWxpZFNoYWxsb3dSb3V0ZSIsIl9yb3V0ZUluZm9fcm91dGUiLCJzaG91bGRTY3JvbGwiLCJfb3B0aW9uc19zY3JvbGwiLCJyZXNldFNjcm9sbCIsInVwY29taW5nU2Nyb2xsU3RhdGUiLCJ1cGNvbWluZ1JvdXRlclN0YXRlIiwiX3NlbGZfX19ORVhUX0RBVEFfX19wcm9wczEiLCJfc2VsZl9fX05FWFRfREFUQV9fX3Byb3BzX3BhZ2VQcm9wczEiLCJfcm91dGVJbmZvX3Byb3BzMSIsImNhblNraXBVcGRhdGluZyIsImNvbXBhcmVSb3V0ZXJTdGF0ZXMiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImxhbmciLCJoYXNoUmVnZXgiLCJsb2FkRXJyb3JGYWlsIiwiaXNBc3NldEVycm9yIiwiZ2V0SW5pdGlhbFByb3BzIiwiaGFuZGxlUm91dGVJbmZvRXJyb3IiLCJyZXF1ZXN0ZWRSb3V0ZSIsImV4aXN0aW5nSW5mbyIsImNhY2hlZFJvdXRlSW5mbyIsImZldGNoTmV4dERhdGFQYXJhbXMiLCJnZXREYXRhSHJlZiIsInNraXBJbnRlcnBvbGF0aW9uIiwiX2RhdGFfZWZmZWN0IiwiX2RhdGFfZWZmZWN0MSIsIl9kYXRhX2VmZmVjdDIiLCJyZXNvbHZlZFJvdXRlIiwiaXNBUElSb3V0ZSIsInJlcyIsIm1vZCIsImlzVmFsaWRFbGVtZW50VHlwZSIsIndhc0JhaWxlZFByZWZldGNoIiwiX2RhdGFfcmVzcG9uc2UiLCJzaG91bGRGZXRjaERhdGEiLCJfZ2V0RGF0YSIsImZldGNoZWQiLCJnZXRQcm9wZXJFcnJvciIsImNiIiwib2xkVXJsTm9IYXNoIiwib2xkSGFzaCIsIm5ld1VybE5vSGFzaCIsIm5ld0hhc2giLCJoYW5kbGVTbW9vdGhTY3JvbGwiLCJzY3JvbGxUbyIsInJhd0hhc2giLCJkZWNvZGVVUklDb21wb25lbnQiLCJpZEVsIiwiZ2V0RWxlbWVudEJ5SWQiLCJzY3JvbGxJbnRvVmlldyIsIm5hbWVFbCIsImdldEVsZW1lbnRzQnlOYW1lIiwiaXNCb3QiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ1cmxQYXRobmFtZSIsIm9yaWdpbmFsUGF0aG5hbWUiLCJfX05FWFRfTUlERExFV0FSRV9QUkVGRVRDSCIsIl9pc1NzZyIsImlzU3NnIiwicHJpb3JpdHkiLCJfX05FWFRfT1BUSU1JU1RJQ19DTElFTlRfQ0FDSEUiLCJsb2FkUGFnZSIsImNvbXBvbmVudFJlc3VsdCIsImZuIiwiY3R4IiwiQXBwVHJlZSIsImxvYWRHZXRJbml0aWFsUHJvcHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../node_modules/.pnpm/next@13.4.4_@babel+core@7.27.4_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/next/dist/shared/lib/router/router.js\n"));

/***/ })

});